
ACCSensor_v1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000041ec  080001f8  080001f8  000101f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  080043e4  080043e4  000143e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004434  08004434  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08004434  08004434  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004434  08004434  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004434  08004434  00014434  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004438  08004438  00014438  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800443c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000098  2000000c  08004448  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000a4  08004448  000200a4  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cd96  00000000  00000000  00020042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d3c  00000000  00000000  0002cdd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ad8  00000000  00000000  0002eb18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a00  00000000  00000000  0002f5f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000278c1  00000000  00000000  0002fff0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c46e  00000000  00000000  000578b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fac52  00000000  00000000  00063d1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0015e971  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002cb8  00000000  00000000  0015e9c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	e000      	b.n	800020a <__do_global_dtors_aux+0x12>
 8000208:	bf00      	nop
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000000c 	.word	0x2000000c
 8000214:	00000000 	.word	0x00000000
 8000218:	080043cc 	.word	0x080043cc

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	e000      	b.n	800022a <frame_dummy+0xe>
 8000228:	bf00      	nop
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000010 	.word	0x20000010
 8000234:	080043cc 	.word	0x080043cc

08000238 <__aeabi_drsub>:
 8000238:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800023c:	e002      	b.n	8000244 <__adddf3>
 800023e:	bf00      	nop

08000240 <__aeabi_dsub>:
 8000240:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000244 <__adddf3>:
 8000244:	b530      	push	{r4, r5, lr}
 8000246:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800024a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800024e:	ea94 0f05 	teq	r4, r5
 8000252:	bf08      	it	eq
 8000254:	ea90 0f02 	teqeq	r0, r2
 8000258:	bf1f      	itttt	ne
 800025a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800025e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000262:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000266:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800026a:	f000 80e2 	beq.w	8000432 <__adddf3+0x1ee>
 800026e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000272:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000276:	bfb8      	it	lt
 8000278:	426d      	neglt	r5, r5
 800027a:	dd0c      	ble.n	8000296 <__adddf3+0x52>
 800027c:	442c      	add	r4, r5
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	ea82 0000 	eor.w	r0, r2, r0
 800028a:	ea83 0101 	eor.w	r1, r3, r1
 800028e:	ea80 0202 	eor.w	r2, r0, r2
 8000292:	ea81 0303 	eor.w	r3, r1, r3
 8000296:	2d36      	cmp	r5, #54	; 0x36
 8000298:	bf88      	it	hi
 800029a:	bd30      	pophi	{r4, r5, pc}
 800029c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002a4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002ac:	d002      	beq.n	80002b4 <__adddf3+0x70>
 80002ae:	4240      	negs	r0, r0
 80002b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c0:	d002      	beq.n	80002c8 <__adddf3+0x84>
 80002c2:	4252      	negs	r2, r2
 80002c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c8:	ea94 0f05 	teq	r4, r5
 80002cc:	f000 80a7 	beq.w	800041e <__adddf3+0x1da>
 80002d0:	f1a4 0401 	sub.w	r4, r4, #1
 80002d4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d8:	db0d      	blt.n	80002f6 <__adddf3+0xb2>
 80002da:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002de:	fa22 f205 	lsr.w	r2, r2, r5
 80002e2:	1880      	adds	r0, r0, r2
 80002e4:	f141 0100 	adc.w	r1, r1, #0
 80002e8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002ec:	1880      	adds	r0, r0, r2
 80002ee:	fa43 f305 	asr.w	r3, r3, r5
 80002f2:	4159      	adcs	r1, r3
 80002f4:	e00e      	b.n	8000314 <__adddf3+0xd0>
 80002f6:	f1a5 0520 	sub.w	r5, r5, #32
 80002fa:	f10e 0e20 	add.w	lr, lr, #32
 80002fe:	2a01      	cmp	r2, #1
 8000300:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000304:	bf28      	it	cs
 8000306:	f04c 0c02 	orrcs.w	ip, ip, #2
 800030a:	fa43 f305 	asr.w	r3, r3, r5
 800030e:	18c0      	adds	r0, r0, r3
 8000310:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000314:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000318:	d507      	bpl.n	800032a <__adddf3+0xe6>
 800031a:	f04f 0e00 	mov.w	lr, #0
 800031e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000322:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000326:	eb6e 0101 	sbc.w	r1, lr, r1
 800032a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800032e:	d31b      	bcc.n	8000368 <__adddf3+0x124>
 8000330:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000334:	d30c      	bcc.n	8000350 <__adddf3+0x10c>
 8000336:	0849      	lsrs	r1, r1, #1
 8000338:	ea5f 0030 	movs.w	r0, r0, rrx
 800033c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000340:	f104 0401 	add.w	r4, r4, #1
 8000344:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000348:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800034c:	f080 809a 	bcs.w	8000484 <__adddf3+0x240>
 8000350:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	ea41 0105 	orr.w	r1, r1, r5
 8000366:	bd30      	pop	{r4, r5, pc}
 8000368:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800036c:	4140      	adcs	r0, r0
 800036e:	eb41 0101 	adc.w	r1, r1, r1
 8000372:	3c01      	subs	r4, #1
 8000374:	bf28      	it	cs
 8000376:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800037a:	d2e9      	bcs.n	8000350 <__adddf3+0x10c>
 800037c:	f091 0f00 	teq	r1, #0
 8000380:	bf04      	itt	eq
 8000382:	4601      	moveq	r1, r0
 8000384:	2000      	moveq	r0, #0
 8000386:	fab1 f381 	clz	r3, r1
 800038a:	bf08      	it	eq
 800038c:	3320      	addeq	r3, #32
 800038e:	f1a3 030b 	sub.w	r3, r3, #11
 8000392:	f1b3 0220 	subs.w	r2, r3, #32
 8000396:	da0c      	bge.n	80003b2 <__adddf3+0x16e>
 8000398:	320c      	adds	r2, #12
 800039a:	dd08      	ble.n	80003ae <__adddf3+0x16a>
 800039c:	f102 0c14 	add.w	ip, r2, #20
 80003a0:	f1c2 020c 	rsb	r2, r2, #12
 80003a4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a8:	fa21 f102 	lsr.w	r1, r1, r2
 80003ac:	e00c      	b.n	80003c8 <__adddf3+0x184>
 80003ae:	f102 0214 	add.w	r2, r2, #20
 80003b2:	bfd8      	it	le
 80003b4:	f1c2 0c20 	rsble	ip, r2, #32
 80003b8:	fa01 f102 	lsl.w	r1, r1, r2
 80003bc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c0:	bfdc      	itt	le
 80003c2:	ea41 010c 	orrle.w	r1, r1, ip
 80003c6:	4090      	lslle	r0, r2
 80003c8:	1ae4      	subs	r4, r4, r3
 80003ca:	bfa2      	ittt	ge
 80003cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d0:	4329      	orrge	r1, r5
 80003d2:	bd30      	popge	{r4, r5, pc}
 80003d4:	ea6f 0404 	mvn.w	r4, r4
 80003d8:	3c1f      	subs	r4, #31
 80003da:	da1c      	bge.n	8000416 <__adddf3+0x1d2>
 80003dc:	340c      	adds	r4, #12
 80003de:	dc0e      	bgt.n	80003fe <__adddf3+0x1ba>
 80003e0:	f104 0414 	add.w	r4, r4, #20
 80003e4:	f1c4 0220 	rsb	r2, r4, #32
 80003e8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ec:	fa01 f302 	lsl.w	r3, r1, r2
 80003f0:	ea40 0003 	orr.w	r0, r0, r3
 80003f4:	fa21 f304 	lsr.w	r3, r1, r4
 80003f8:	ea45 0103 	orr.w	r1, r5, r3
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f1c4 040c 	rsb	r4, r4, #12
 8000402:	f1c4 0220 	rsb	r2, r4, #32
 8000406:	fa20 f002 	lsr.w	r0, r0, r2
 800040a:	fa01 f304 	lsl.w	r3, r1, r4
 800040e:	ea40 0003 	orr.w	r0, r0, r3
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	fa21 f004 	lsr.w	r0, r1, r4
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	f094 0f00 	teq	r4, #0
 8000422:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000426:	bf06      	itte	eq
 8000428:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800042c:	3401      	addeq	r4, #1
 800042e:	3d01      	subne	r5, #1
 8000430:	e74e      	b.n	80002d0 <__adddf3+0x8c>
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf18      	it	ne
 8000438:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800043c:	d029      	beq.n	8000492 <__adddf3+0x24e>
 800043e:	ea94 0f05 	teq	r4, r5
 8000442:	bf08      	it	eq
 8000444:	ea90 0f02 	teqeq	r0, r2
 8000448:	d005      	beq.n	8000456 <__adddf3+0x212>
 800044a:	ea54 0c00 	orrs.w	ip, r4, r0
 800044e:	bf04      	itt	eq
 8000450:	4619      	moveq	r1, r3
 8000452:	4610      	moveq	r0, r2
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea91 0f03 	teq	r1, r3
 800045a:	bf1e      	ittt	ne
 800045c:	2100      	movne	r1, #0
 800045e:	2000      	movne	r0, #0
 8000460:	bd30      	popne	{r4, r5, pc}
 8000462:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000466:	d105      	bne.n	8000474 <__adddf3+0x230>
 8000468:	0040      	lsls	r0, r0, #1
 800046a:	4149      	adcs	r1, r1
 800046c:	bf28      	it	cs
 800046e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000472:	bd30      	pop	{r4, r5, pc}
 8000474:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000478:	bf3c      	itt	cc
 800047a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800047e:	bd30      	popcc	{r4, r5, pc}
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000488:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800048c:	f04f 0000 	mov.w	r0, #0
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000496:	bf1a      	itte	ne
 8000498:	4619      	movne	r1, r3
 800049a:	4610      	movne	r0, r2
 800049c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a0:	bf1c      	itt	ne
 80004a2:	460b      	movne	r3, r1
 80004a4:	4602      	movne	r2, r0
 80004a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004aa:	bf06      	itte	eq
 80004ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b0:	ea91 0f03 	teqeq	r1, r3
 80004b4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	bf00      	nop

080004bc <__aeabi_ui2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f04f 0500 	mov.w	r5, #0
 80004d4:	f04f 0100 	mov.w	r1, #0
 80004d8:	e750      	b.n	800037c <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_i2d>:
 80004dc:	f090 0f00 	teq	r0, #0
 80004e0:	bf04      	itt	eq
 80004e2:	2100      	moveq	r1, #0
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004f0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004f4:	bf48      	it	mi
 80004f6:	4240      	negmi	r0, r0
 80004f8:	f04f 0100 	mov.w	r1, #0
 80004fc:	e73e      	b.n	800037c <__adddf3+0x138>
 80004fe:	bf00      	nop

08000500 <__aeabi_f2d>:
 8000500:	0042      	lsls	r2, r0, #1
 8000502:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000506:	ea4f 0131 	mov.w	r1, r1, rrx
 800050a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800050e:	bf1f      	itttt	ne
 8000510:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000514:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000518:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800051c:	4770      	bxne	lr
 800051e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000522:	bf08      	it	eq
 8000524:	4770      	bxeq	lr
 8000526:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800052a:	bf04      	itt	eq
 800052c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000530:	4770      	bxeq	lr
 8000532:	b530      	push	{r4, r5, lr}
 8000534:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000540:	e71c      	b.n	800037c <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_ul2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	e00a      	b.n	800056a <__aeabi_l2d+0x16>

08000554 <__aeabi_l2d>:
 8000554:	ea50 0201 	orrs.w	r2, r0, r1
 8000558:	bf08      	it	eq
 800055a:	4770      	bxeq	lr
 800055c:	b530      	push	{r4, r5, lr}
 800055e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000562:	d502      	bpl.n	800056a <__aeabi_l2d+0x16>
 8000564:	4240      	negs	r0, r0
 8000566:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800056a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000572:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000576:	f43f aed8 	beq.w	800032a <__adddf3+0xe6>
 800057a:	f04f 0203 	mov.w	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000592:	f1c2 0320 	rsb	r3, r2, #32
 8000596:	fa00 fc03 	lsl.w	ip, r0, r3
 800059a:	fa20 f002 	lsr.w	r0, r0, r2
 800059e:	fa01 fe03 	lsl.w	lr, r1, r3
 80005a2:	ea40 000e 	orr.w	r0, r0, lr
 80005a6:	fa21 f102 	lsr.w	r1, r1, r2
 80005aa:	4414      	add	r4, r2
 80005ac:	e6bd      	b.n	800032a <__adddf3+0xe6>
 80005ae:	bf00      	nop

080005b0 <__aeabi_dmul>:
 80005b0:	b570      	push	{r4, r5, r6, lr}
 80005b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005be:	bf1d      	ittte	ne
 80005c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005c4:	ea94 0f0c 	teqne	r4, ip
 80005c8:	ea95 0f0c 	teqne	r5, ip
 80005cc:	f000 f8de 	bleq	800078c <__aeabi_dmul+0x1dc>
 80005d0:	442c      	add	r4, r5
 80005d2:	ea81 0603 	eor.w	r6, r1, r3
 80005d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005e2:	bf18      	it	ne
 80005e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005f0:	d038      	beq.n	8000664 <__aeabi_dmul+0xb4>
 80005f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005fe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000602:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000606:	f04f 0600 	mov.w	r6, #0
 800060a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800060e:	f09c 0f00 	teq	ip, #0
 8000612:	bf18      	it	ne
 8000614:	f04e 0e01 	orrne.w	lr, lr, #1
 8000618:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800061c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000620:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000624:	d204      	bcs.n	8000630 <__aeabi_dmul+0x80>
 8000626:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800062a:	416d      	adcs	r5, r5
 800062c:	eb46 0606 	adc.w	r6, r6, r6
 8000630:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000634:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000638:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800063c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000640:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000644:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000648:	bf88      	it	hi
 800064a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800064e:	d81e      	bhi.n	800068e <__aeabi_dmul+0xde>
 8000650:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000654:	bf08      	it	eq
 8000656:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800065a:	f150 0000 	adcs.w	r0, r0, #0
 800065e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000668:	ea46 0101 	orr.w	r1, r6, r1
 800066c:	ea40 0002 	orr.w	r0, r0, r2
 8000670:	ea81 0103 	eor.w	r1, r1, r3
 8000674:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000678:	bfc2      	ittt	gt
 800067a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800067e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000682:	bd70      	popgt	{r4, r5, r6, pc}
 8000684:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000688:	f04f 0e00 	mov.w	lr, #0
 800068c:	3c01      	subs	r4, #1
 800068e:	f300 80ab 	bgt.w	80007e8 <__aeabi_dmul+0x238>
 8000692:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000696:	bfde      	ittt	le
 8000698:	2000      	movle	r0, #0
 800069a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800069e:	bd70      	pople	{r4, r5, r6, pc}
 80006a0:	f1c4 0400 	rsb	r4, r4, #0
 80006a4:	3c20      	subs	r4, #32
 80006a6:	da35      	bge.n	8000714 <__aeabi_dmul+0x164>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc1b      	bgt.n	80006e4 <__aeabi_dmul+0x134>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f305 	lsl.w	r3, r0, r5
 80006b8:	fa20 f004 	lsr.w	r0, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d0:	fa21 f604 	lsr.w	r6, r1, r4
 80006d4:	eb42 0106 	adc.w	r1, r2, r6
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 040c 	rsb	r4, r4, #12
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f304 	lsl.w	r3, r0, r4
 80006f0:	fa20 f005 	lsr.w	r0, r0, r5
 80006f4:	fa01 f204 	lsl.w	r2, r1, r4
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000704:	f141 0100 	adc.w	r1, r1, #0
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f1c4 0520 	rsb	r5, r4, #32
 8000718:	fa00 f205 	lsl.w	r2, r0, r5
 800071c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000720:	fa20 f304 	lsr.w	r3, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea43 0302 	orr.w	r3, r3, r2
 800072c:	fa21 f004 	lsr.w	r0, r1, r4
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000734:	fa21 f204 	lsr.w	r2, r1, r4
 8000738:	ea20 0002 	bic.w	r0, r0, r2
 800073c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f094 0f00 	teq	r4, #0
 8000750:	d10f      	bne.n	8000772 <__aeabi_dmul+0x1c2>
 8000752:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000756:	0040      	lsls	r0, r0, #1
 8000758:	eb41 0101 	adc.w	r1, r1, r1
 800075c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3c01      	subeq	r4, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1a6>
 8000766:	ea41 0106 	orr.w	r1, r1, r6
 800076a:	f095 0f00 	teq	r5, #0
 800076e:	bf18      	it	ne
 8000770:	4770      	bxne	lr
 8000772:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000776:	0052      	lsls	r2, r2, #1
 8000778:	eb43 0303 	adc.w	r3, r3, r3
 800077c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000780:	bf08      	it	eq
 8000782:	3d01      	subeq	r5, #1
 8000784:	d0f7      	beq.n	8000776 <__aeabi_dmul+0x1c6>
 8000786:	ea43 0306 	orr.w	r3, r3, r6
 800078a:	4770      	bx	lr
 800078c:	ea94 0f0c 	teq	r4, ip
 8000790:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000794:	bf18      	it	ne
 8000796:	ea95 0f0c 	teqne	r5, ip
 800079a:	d00c      	beq.n	80007b6 <__aeabi_dmul+0x206>
 800079c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a0:	bf18      	it	ne
 80007a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a6:	d1d1      	bne.n	800074c <__aeabi_dmul+0x19c>
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b0:	f04f 0000 	mov.w	r0, #0
 80007b4:	bd70      	pop	{r4, r5, r6, pc}
 80007b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ba:	bf06      	itte	eq
 80007bc:	4610      	moveq	r0, r2
 80007be:	4619      	moveq	r1, r3
 80007c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007c4:	d019      	beq.n	80007fa <__aeabi_dmul+0x24a>
 80007c6:	ea94 0f0c 	teq	r4, ip
 80007ca:	d102      	bne.n	80007d2 <__aeabi_dmul+0x222>
 80007cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d0:	d113      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007d2:	ea95 0f0c 	teq	r5, ip
 80007d6:	d105      	bne.n	80007e4 <__aeabi_dmul+0x234>
 80007d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007dc:	bf1c      	itt	ne
 80007de:	4610      	movne	r0, r2
 80007e0:	4619      	movne	r1, r3
 80007e2:	d10a      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007e4:	ea81 0103 	eor.w	r1, r1, r3
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007f4:	f04f 0000 	mov.w	r0, #0
 80007f8:	bd70      	pop	{r4, r5, r6, pc}
 80007fa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007fe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000802:	bd70      	pop	{r4, r5, r6, pc}

08000804 <__aeabi_ddiv>:
 8000804:	b570      	push	{r4, r5, r6, lr}
 8000806:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800080a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800080e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000812:	bf1d      	ittte	ne
 8000814:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000818:	ea94 0f0c 	teqne	r4, ip
 800081c:	ea95 0f0c 	teqne	r5, ip
 8000820:	f000 f8a7 	bleq	8000972 <__aeabi_ddiv+0x16e>
 8000824:	eba4 0405 	sub.w	r4, r4, r5
 8000828:	ea81 0e03 	eor.w	lr, r1, r3
 800082c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000830:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000834:	f000 8088 	beq.w	8000948 <__aeabi_ddiv+0x144>
 8000838:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800083c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000840:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000844:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000848:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800084c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000850:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000854:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000858:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800085c:	429d      	cmp	r5, r3
 800085e:	bf08      	it	eq
 8000860:	4296      	cmpeq	r6, r2
 8000862:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000866:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800086a:	d202      	bcs.n	8000872 <__aeabi_ddiv+0x6e>
 800086c:	085b      	lsrs	r3, r3, #1
 800086e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000872:	1ab6      	subs	r6, r6, r2
 8000874:	eb65 0503 	sbc.w	r5, r5, r3
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000882:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 000c 	orrcs.w	r0, r0, ip
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008e4:	d018      	beq.n	8000918 <__aeabi_ddiv+0x114>
 80008e6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ea:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ee:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008f2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008f6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008fa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008fe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000902:	d1c0      	bne.n	8000886 <__aeabi_ddiv+0x82>
 8000904:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000908:	d10b      	bne.n	8000922 <__aeabi_ddiv+0x11e>
 800090a:	ea41 0100 	orr.w	r1, r1, r0
 800090e:	f04f 0000 	mov.w	r0, #0
 8000912:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000916:	e7b6      	b.n	8000886 <__aeabi_ddiv+0x82>
 8000918:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800091c:	bf04      	itt	eq
 800091e:	4301      	orreq	r1, r0
 8000920:	2000      	moveq	r0, #0
 8000922:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000926:	bf88      	it	hi
 8000928:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800092c:	f63f aeaf 	bhi.w	800068e <__aeabi_dmul+0xde>
 8000930:	ebb5 0c03 	subs.w	ip, r5, r3
 8000934:	bf04      	itt	eq
 8000936:	ebb6 0c02 	subseq.w	ip, r6, r2
 800093a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800093e:	f150 0000 	adcs.w	r0, r0, #0
 8000942:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000946:	bd70      	pop	{r4, r5, r6, pc}
 8000948:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800094c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000950:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000954:	bfc2      	ittt	gt
 8000956:	ebd4 050c 	rsbsgt	r5, r4, ip
 800095a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800095e:	bd70      	popgt	{r4, r5, r6, pc}
 8000960:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000964:	f04f 0e00 	mov.w	lr, #0
 8000968:	3c01      	subs	r4, #1
 800096a:	e690      	b.n	800068e <__aeabi_dmul+0xde>
 800096c:	ea45 0e06 	orr.w	lr, r5, r6
 8000970:	e68d      	b.n	800068e <__aeabi_dmul+0xde>
 8000972:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000976:	ea94 0f0c 	teq	r4, ip
 800097a:	bf08      	it	eq
 800097c:	ea95 0f0c 	teqeq	r5, ip
 8000980:	f43f af3b 	beq.w	80007fa <__aeabi_dmul+0x24a>
 8000984:	ea94 0f0c 	teq	r4, ip
 8000988:	d10a      	bne.n	80009a0 <__aeabi_ddiv+0x19c>
 800098a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800098e:	f47f af34 	bne.w	80007fa <__aeabi_dmul+0x24a>
 8000992:	ea95 0f0c 	teq	r5, ip
 8000996:	f47f af25 	bne.w	80007e4 <__aeabi_dmul+0x234>
 800099a:	4610      	mov	r0, r2
 800099c:	4619      	mov	r1, r3
 800099e:	e72c      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009a0:	ea95 0f0c 	teq	r5, ip
 80009a4:	d106      	bne.n	80009b4 <__aeabi_ddiv+0x1b0>
 80009a6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009aa:	f43f aefd 	beq.w	80007a8 <__aeabi_dmul+0x1f8>
 80009ae:	4610      	mov	r0, r2
 80009b0:	4619      	mov	r1, r3
 80009b2:	e722      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b8:	bf18      	it	ne
 80009ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009be:	f47f aec5 	bne.w	800074c <__aeabi_dmul+0x19c>
 80009c2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009c6:	f47f af0d 	bne.w	80007e4 <__aeabi_dmul+0x234>
 80009ca:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ce:	f47f aeeb 	bne.w	80007a8 <__aeabi_dmul+0x1f8>
 80009d2:	e712      	b.n	80007fa <__aeabi_dmul+0x24a>

080009d4 <__aeabi_d2f>:
 80009d4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009d8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009dc:	bf24      	itt	cs
 80009de:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80009e2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80009e6:	d90d      	bls.n	8000a04 <__aeabi_d2f+0x30>
 80009e8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009ec:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009f0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009f4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80009f8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009fc:	bf08      	it	eq
 80009fe:	f020 0001 	biceq.w	r0, r0, #1
 8000a02:	4770      	bx	lr
 8000a04:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a08:	d121      	bne.n	8000a4e <__aeabi_d2f+0x7a>
 8000a0a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a0e:	bfbc      	itt	lt
 8000a10:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a14:	4770      	bxlt	lr
 8000a16:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a1a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a1e:	f1c2 0218 	rsb	r2, r2, #24
 8000a22:	f1c2 0c20 	rsb	ip, r2, #32
 8000a26:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a2a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a2e:	bf18      	it	ne
 8000a30:	f040 0001 	orrne.w	r0, r0, #1
 8000a34:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a38:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a3c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a40:	ea40 000c 	orr.w	r0, r0, ip
 8000a44:	fa23 f302 	lsr.w	r3, r3, r2
 8000a48:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a4c:	e7cc      	b.n	80009e8 <__aeabi_d2f+0x14>
 8000a4e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a52:	d107      	bne.n	8000a64 <__aeabi_d2f+0x90>
 8000a54:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a58:	bf1e      	ittt	ne
 8000a5a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a5e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a62:	4770      	bxne	lr
 8000a64:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a68:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a6c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a70:	4770      	bx	lr
 8000a72:	bf00      	nop

08000a74 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b086      	sub	sp, #24
 8000a78:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a7a:	f000 fe40 	bl	80016fe <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a7e:	f000 f84d 	bl	8000b1c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a82:	f000 f8e9 	bl	8000c58 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000a86:	f000 f89b 	bl	8000bc0 <MX_I2C1_Init>
  MX_ICACHE_Init();
 8000a8a:	f000 f8d9 	bl	8000c40 <MX_ICACHE_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint8_t buffer = 0x00;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	71fb      	strb	r3, [r7, #7]
  HAL_I2C_Mem_Read(&hi2c1, 0xD5, 0x0F, I2C_MEMADD_SIZE_8BIT, &buffer, 1, 100);
 8000a92:	2364      	movs	r3, #100	; 0x64
 8000a94:	9302      	str	r3, [sp, #8]
 8000a96:	2301      	movs	r3, #1
 8000a98:	9301      	str	r3, [sp, #4]
 8000a9a:	1dfb      	adds	r3, r7, #7
 8000a9c:	9300      	str	r3, [sp, #0]
 8000a9e:	2301      	movs	r3, #1
 8000aa0:	220f      	movs	r2, #15
 8000aa2:	21d5      	movs	r1, #213	; 0xd5
 8000aa4:	481b      	ldr	r0, [pc, #108]	; (8000b14 <main+0xa0>)
 8000aa6:	f001 fb29 	bl	80020fc <HAL_I2C_Mem_Read>

  /* Output Data für 1,6 khz für Drehrate und Acc Messung */
  buffer = 0x88;
 8000aaa:	2388      	movs	r3, #136	; 0x88
 8000aac:	71fb      	strb	r3, [r7, #7]
  HAL_I2C_Mem_Write(&hi2c1, 0xD4, 0x10, I2C_MEMADD_SIZE_8BIT, &buffer, 1, 50);
 8000aae:	2332      	movs	r3, #50	; 0x32
 8000ab0:	9302      	str	r3, [sp, #8]
 8000ab2:	2301      	movs	r3, #1
 8000ab4:	9301      	str	r3, [sp, #4]
 8000ab6:	1dfb      	adds	r3, r7, #7
 8000ab8:	9300      	str	r3, [sp, #0]
 8000aba:	2301      	movs	r3, #1
 8000abc:	2210      	movs	r2, #16
 8000abe:	21d4      	movs	r1, #212	; 0xd4
 8000ac0:	4814      	ldr	r0, [pc, #80]	; (8000b14 <main+0xa0>)
 8000ac2:	f001 fa07 	bl	8001ed4 <HAL_I2C_Mem_Write>
  HAL_I2C_Mem_Write(&hi2c1, 0xD4, 0x11, I2C_MEMADD_SIZE_8BIT, &buffer, 1, 50);
 8000ac6:	2332      	movs	r3, #50	; 0x32
 8000ac8:	9302      	str	r3, [sp, #8]
 8000aca:	2301      	movs	r3, #1
 8000acc:	9301      	str	r3, [sp, #4]
 8000ace:	1dfb      	adds	r3, r7, #7
 8000ad0:	9300      	str	r3, [sp, #0]
 8000ad2:	2301      	movs	r3, #1
 8000ad4:	2211      	movs	r2, #17
 8000ad6:	21d4      	movs	r1, #212	; 0xd4
 8000ad8:	480e      	ldr	r0, [pc, #56]	; (8000b14 <main+0xa0>)
 8000ada:	f001 f9fb 	bl	8001ed4 <HAL_I2C_Mem_Write>

  /* setup the DRDY as a pulse (not latched until the sensor data is read) */
  // buffer = 0x80;
  // HAL_I2C_Mem_Write(&hi2c1, 0xD4, 0x0B, I2C_MEMADD_SIZE_8BIT, &buffer, 1, 50);
  /* Alternatively do a dummy read to reset the DRDY signal */
  HAL_I2C_Mem_Read(&hi2c1, 0xD5, 0x20, I2C_MEMADD_SIZE_8BIT, &data[0], 14, 50);
 8000ade:	2332      	movs	r3, #50	; 0x32
 8000ae0:	9302      	str	r3, [sp, #8]
 8000ae2:	230e      	movs	r3, #14
 8000ae4:	9301      	str	r3, [sp, #4]
 8000ae6:	4b0c      	ldr	r3, [pc, #48]	; (8000b18 <main+0xa4>)
 8000ae8:	9300      	str	r3, [sp, #0]
 8000aea:	2301      	movs	r3, #1
 8000aec:	2220      	movs	r2, #32
 8000aee:	21d5      	movs	r1, #213	; 0xd5
 8000af0:	4808      	ldr	r0, [pc, #32]	; (8000b14 <main+0xa0>)
 8000af2:	f001 fb03 	bl	80020fc <HAL_I2C_Mem_Read>

  buffer = 0x83;
 8000af6:	2383      	movs	r3, #131	; 0x83
 8000af8:	71fb      	strb	r3, [r7, #7]
  HAL_I2C_Mem_Write(&hi2c1, 0xD4, 0x0D, I2C_MEMADD_SIZE_8BIT, &buffer, 1, 50);
 8000afa:	2332      	movs	r3, #50	; 0x32
 8000afc:	9302      	str	r3, [sp, #8]
 8000afe:	2301      	movs	r3, #1
 8000b00:	9301      	str	r3, [sp, #4]
 8000b02:	1dfb      	adds	r3, r7, #7
 8000b04:	9300      	str	r3, [sp, #0]
 8000b06:	2301      	movs	r3, #1
 8000b08:	220d      	movs	r2, #13
 8000b0a:	21d4      	movs	r1, #212	; 0xd4
 8000b0c:	4801      	ldr	r0, [pc, #4]	; (8000b14 <main+0xa0>)
 8000b0e:	f001 f9e1 	bl	8001ed4 <HAL_I2C_Mem_Write>
  while (1)
 8000b12:	e7fe      	b.n	8000b12 <main+0x9e>
 8000b14:	20000028 	.word	0x20000028
 8000b18:	20000074 	.word	0x20000074

08000b1c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b098      	sub	sp, #96	; 0x60
 8000b20:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b22:	f107 0318 	add.w	r3, r7, #24
 8000b26:	2248      	movs	r2, #72	; 0x48
 8000b28:	2100      	movs	r1, #0
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	f003 fc46 	bl	80043bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b30:	1d3b      	adds	r3, r7, #4
 8000b32:	2200      	movs	r2, #0
 8000b34:	601a      	str	r2, [r3, #0]
 8000b36:	605a      	str	r2, [r3, #4]
 8000b38:	609a      	str	r2, [r3, #8]
 8000b3a:	60da      	str	r2, [r3, #12]
 8000b3c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE0) != HAL_OK)
 8000b3e:	2000      	movs	r0, #0
 8000b40:	f001 fec8 	bl	80028d4 <HAL_PWREx_ControlVoltageScaling>
 8000b44:	4603      	mov	r3, r0
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d001      	beq.n	8000b4e <SystemClock_Config+0x32>
  {
    Error_Handler();
 8000b4a:	f000 faff 	bl	800114c <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000b4e:	2310      	movs	r3, #16
 8000b50:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000b52:	2301      	movs	r3, #1
 8000b54:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000b56:	2300      	movs	r3, #0
 8000b58:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 8000b5a:	23b0      	movs	r3, #176	; 0xb0
 8000b5c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b5e:	2302      	movs	r3, #2
 8000b60:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000b62:	2301      	movs	r3, #1
 8000b64:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLM = 12;
 8000b66:	230c      	movs	r3, #12
 8000b68:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLN = 55;
 8000b6a:	2337      	movs	r3, #55	; 0x37
 8000b6c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000b6e:	2307      	movs	r3, #7
 8000b70:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000b72:	2302      	movs	r3, #2
 8000b74:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000b76:	2302      	movs	r3, #2
 8000b78:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b7a:	f107 0318 	add.w	r3, r7, #24
 8000b7e:	4618      	mov	r0, r3
 8000b80:	f001 ff48 	bl	8002a14 <HAL_RCC_OscConfig>
 8000b84:	4603      	mov	r3, r0
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d001      	beq.n	8000b8e <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000b8a:	f000 fadf 	bl	800114c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b8e:	230f      	movs	r3, #15
 8000b90:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b92:	2303      	movs	r3, #3
 8000b94:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b96:	2300      	movs	r3, #0
 8000b98:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000ba2:	1d3b      	adds	r3, r7, #4
 8000ba4:	2105      	movs	r1, #5
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	f002 fc16 	bl	80033d8 <HAL_RCC_ClockConfig>
 8000bac:	4603      	mov	r3, r0
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d001      	beq.n	8000bb6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000bb2:	f000 facb 	bl	800114c <Error_Handler>
  }
}
 8000bb6:	bf00      	nop
 8000bb8:	3760      	adds	r7, #96	; 0x60
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}
	...

08000bc0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000bc4:	4b1b      	ldr	r3, [pc, #108]	; (8000c34 <MX_I2C1_Init+0x74>)
 8000bc6:	4a1c      	ldr	r2, [pc, #112]	; (8000c38 <MX_I2C1_Init+0x78>)
 8000bc8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00A03AC8;
 8000bca:	4b1a      	ldr	r3, [pc, #104]	; (8000c34 <MX_I2C1_Init+0x74>)
 8000bcc:	4a1b      	ldr	r2, [pc, #108]	; (8000c3c <MX_I2C1_Init+0x7c>)
 8000bce:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000bd0:	4b18      	ldr	r3, [pc, #96]	; (8000c34 <MX_I2C1_Init+0x74>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000bd6:	4b17      	ldr	r3, [pc, #92]	; (8000c34 <MX_I2C1_Init+0x74>)
 8000bd8:	2201      	movs	r2, #1
 8000bda:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000bdc:	4b15      	ldr	r3, [pc, #84]	; (8000c34 <MX_I2C1_Init+0x74>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000be2:	4b14      	ldr	r3, [pc, #80]	; (8000c34 <MX_I2C1_Init+0x74>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000be8:	4b12      	ldr	r3, [pc, #72]	; (8000c34 <MX_I2C1_Init+0x74>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000bee:	4b11      	ldr	r3, [pc, #68]	; (8000c34 <MX_I2C1_Init+0x74>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000bf4:	4b0f      	ldr	r3, [pc, #60]	; (8000c34 <MX_I2C1_Init+0x74>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000bfa:	480e      	ldr	r0, [pc, #56]	; (8000c34 <MX_I2C1_Init+0x74>)
 8000bfc:	f001 f8da 	bl	8001db4 <HAL_I2C_Init>
 8000c00:	4603      	mov	r3, r0
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d001      	beq.n	8000c0a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000c06:	f000 faa1 	bl	800114c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000c0a:	2100      	movs	r1, #0
 8000c0c:	4809      	ldr	r0, [pc, #36]	; (8000c34 <MX_I2C1_Init+0x74>)
 8000c0e:	f001 fdab 	bl	8002768 <HAL_I2CEx_ConfigAnalogFilter>
 8000c12:	4603      	mov	r3, r0
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d001      	beq.n	8000c1c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000c18:	f000 fa98 	bl	800114c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000c1c:	2100      	movs	r1, #0
 8000c1e:	4805      	ldr	r0, [pc, #20]	; (8000c34 <MX_I2C1_Init+0x74>)
 8000c20:	f001 fded 	bl	80027fe <HAL_I2CEx_ConfigDigitalFilter>
 8000c24:	4603      	mov	r3, r0
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d001      	beq.n	8000c2e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000c2a:	f000 fa8f 	bl	800114c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000c2e:	bf00      	nop
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	20000028 	.word	0x20000028
 8000c38:	40005400 	.word	0x40005400
 8000c3c:	00a03ac8 	.word	0x00a03ac8

08000c40 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ICACHE_Init 1 */

  /* USER CODE END ICACHE_Init 1 */
  /** Enable instruction cache (default 2-ways set associative cache)
  */
  if (HAL_ICACHE_Enable() != HAL_OK)
 8000c44:	f001 fe28 	bl	8002898 <HAL_ICACHE_Enable>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d001      	beq.n	8000c52 <MX_ICACHE_Init+0x12>
  {
    Error_Handler();
 8000c4e:	f000 fa7d 	bl	800114c <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 8000c52:	bf00      	nop
 8000c54:	bd80      	pop	{r7, pc}
	...

08000c58 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b08e      	sub	sp, #56	; 0x38
 8000c5c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c62:	2200      	movs	r2, #0
 8000c64:	601a      	str	r2, [r3, #0]
 8000c66:	605a      	str	r2, [r3, #4]
 8000c68:	609a      	str	r2, [r3, #8]
 8000c6a:	60da      	str	r2, [r3, #12]
 8000c6c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c6e:	4bb2      	ldr	r3, [pc, #712]	; (8000f38 <MX_GPIO_Init+0x2e0>)
 8000c70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c72:	4ab1      	ldr	r2, [pc, #708]	; (8000f38 <MX_GPIO_Init+0x2e0>)
 8000c74:	f043 0310 	orr.w	r3, r3, #16
 8000c78:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c7a:	4baf      	ldr	r3, [pc, #700]	; (8000f38 <MX_GPIO_Init+0x2e0>)
 8000c7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c7e:	f003 0310 	and.w	r3, r3, #16
 8000c82:	623b      	str	r3, [r7, #32]
 8000c84:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c86:	4bac      	ldr	r3, [pc, #688]	; (8000f38 <MX_GPIO_Init+0x2e0>)
 8000c88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c8a:	4aab      	ldr	r2, [pc, #684]	; (8000f38 <MX_GPIO_Init+0x2e0>)
 8000c8c:	f043 0302 	orr.w	r3, r3, #2
 8000c90:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c92:	4ba9      	ldr	r3, [pc, #676]	; (8000f38 <MX_GPIO_Init+0x2e0>)
 8000c94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c96:	f003 0302 	and.w	r3, r3, #2
 8000c9a:	61fb      	str	r3, [r7, #28]
 8000c9c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c9e:	4ba6      	ldr	r3, [pc, #664]	; (8000f38 <MX_GPIO_Init+0x2e0>)
 8000ca0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ca2:	4aa5      	ldr	r2, [pc, #660]	; (8000f38 <MX_GPIO_Init+0x2e0>)
 8000ca4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ca8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000caa:	4ba3      	ldr	r3, [pc, #652]	; (8000f38 <MX_GPIO_Init+0x2e0>)
 8000cac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000cb2:	61bb      	str	r3, [r7, #24]
 8000cb4:	69bb      	ldr	r3, [r7, #24]
  HAL_PWREx_EnableVddIO2();
 8000cb6:	f001 fe69 	bl	800298c <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cba:	4b9f      	ldr	r3, [pc, #636]	; (8000f38 <MX_GPIO_Init+0x2e0>)
 8000cbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cbe:	4a9e      	ldr	r2, [pc, #632]	; (8000f38 <MX_GPIO_Init+0x2e0>)
 8000cc0:	f043 0308 	orr.w	r3, r3, #8
 8000cc4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cc6:	4b9c      	ldr	r3, [pc, #624]	; (8000f38 <MX_GPIO_Init+0x2e0>)
 8000cc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cca:	f003 0308 	and.w	r3, r3, #8
 8000cce:	617b      	str	r3, [r7, #20]
 8000cd0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cd2:	4b99      	ldr	r3, [pc, #612]	; (8000f38 <MX_GPIO_Init+0x2e0>)
 8000cd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cd6:	4a98      	ldr	r2, [pc, #608]	; (8000f38 <MX_GPIO_Init+0x2e0>)
 8000cd8:	f043 0304 	orr.w	r3, r3, #4
 8000cdc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cde:	4b96      	ldr	r3, [pc, #600]	; (8000f38 <MX_GPIO_Init+0x2e0>)
 8000ce0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ce2:	f003 0304 	and.w	r3, r3, #4
 8000ce6:	613b      	str	r3, [r7, #16]
 8000ce8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cea:	4b93      	ldr	r3, [pc, #588]	; (8000f38 <MX_GPIO_Init+0x2e0>)
 8000cec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cee:	4a92      	ldr	r2, [pc, #584]	; (8000f38 <MX_GPIO_Init+0x2e0>)
 8000cf0:	f043 0301 	orr.w	r3, r3, #1
 8000cf4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cf6:	4b90      	ldr	r3, [pc, #576]	; (8000f38 <MX_GPIO_Init+0x2e0>)
 8000cf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cfa:	f003 0301 	and.w	r3, r3, #1
 8000cfe:	60fb      	str	r3, [r7, #12]
 8000d00:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d02:	4b8d      	ldr	r3, [pc, #564]	; (8000f38 <MX_GPIO_Init+0x2e0>)
 8000d04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d06:	4a8c      	ldr	r2, [pc, #560]	; (8000f38 <MX_GPIO_Init+0x2e0>)
 8000d08:	f043 0320 	orr.w	r3, r3, #32
 8000d0c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d0e:	4b8a      	ldr	r3, [pc, #552]	; (8000f38 <MX_GPIO_Init+0x2e0>)
 8000d10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d12:	f003 0320 	and.w	r3, r3, #32
 8000d16:	60bb      	str	r3, [r7, #8]
 8000d18:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d1a:	4b87      	ldr	r3, [pc, #540]	; (8000f38 <MX_GPIO_Init+0x2e0>)
 8000d1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d1e:	4a86      	ldr	r2, [pc, #536]	; (8000f38 <MX_GPIO_Init+0x2e0>)
 8000d20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d24:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d26:	4b84      	ldr	r3, [pc, #528]	; (8000f38 <MX_GPIO_Init+0x2e0>)
 8000d28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d2e:	607b      	str	r3, [r7, #4]
 8000d30:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LED_GREEN_Pin|BLE_RSTN_Pin|AUDIO_RESETN_Pin, GPIO_PIN_RESET);
 8000d32:	2200      	movs	r2, #0
 8000d34:	f241 1102 	movw	r1, #4354	; 0x1102
 8000d38:	4880      	ldr	r0, [pc, #512]	; (8000f3c <MX_GPIO_Init+0x2e4>)
 8000d3a:	f000 ffe7 	bl	8001d0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 8000d3e:	2200      	movs	r2, #0
 8000d40:	2108      	movs	r1, #8
 8000d42:	487f      	ldr	r0, [pc, #508]	; (8000f40 <MX_GPIO_Init+0x2e8>)
 8000d44:	f000 ffe2 	bl	8001d0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(UCPD_DBn_GPIO_Port, UCPD_DBn_Pin, GPIO_PIN_RESET);
 8000d48:	2200      	movs	r2, #0
 8000d4a:	2120      	movs	r1, #32
 8000d4c:	487d      	ldr	r0, [pc, #500]	; (8000f44 <MX_GPIO_Init+0x2ec>)
 8000d4e:	f000 ffdd 	bl	8001d0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_TE_GPIO_Port, LCD_TE_Pin, GPIO_PIN_RESET);
 8000d52:	2200      	movs	r2, #0
 8000d54:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d58:	487b      	ldr	r0, [pc, #492]	; (8000f48 <MX_GPIO_Init+0x2f0>)
 8000d5a:	f000 ffd7 	bl	8001d0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_PWR_ON_GPIO_Port, LCD_PWR_ON_Pin, GPIO_PIN_RESET);
 8000d5e:	2200      	movs	r2, #0
 8000d60:	2101      	movs	r1, #1
 8000d62:	487a      	ldr	r0, [pc, #488]	; (8000f4c <MX_GPIO_Init+0x2f4>)
 8000d64:	f000 ffd2 	bl	8001d0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, LCD_RST_Pin|STMOD_SEL_12_Pin|STMOD_SEL_34_Pin|CTP_RST_Pin, GPIO_PIN_RESET);
 8000d68:	2200      	movs	r2, #0
 8000d6a:	f44f 4158 	mov.w	r1, #55296	; 0xd800
 8000d6e:	4878      	ldr	r0, [pc, #480]	; (8000f50 <MX_GPIO_Init+0x2f8>)
 8000d70:	f000 ffcc 	bl	8001d0c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE5 PE3 PE4 PE2
                           PE6 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_2
 8000d74:	237c      	movs	r3, #124	; 0x7c
 8000d76:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d78:	2302      	movs	r3, #2
 8000d7a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d80:	2300      	movs	r3, #0
 8000d82:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8000d84:	230d      	movs	r3, #13
 8000d86:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	4871      	ldr	r0, [pc, #452]	; (8000f54 <MX_GPIO_Init+0x2fc>)
 8000d90:	f000 fe3c 	bl	8001a0c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_PWM_Pin */
  GPIO_InitStruct.Pin = LCD_BL_PWM_Pin;
 8000d94:	2302      	movs	r3, #2
 8000d96:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d98:	2302      	movs	r3, #2
 8000d9a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000da0:	2300      	movs	r3, #0
 8000da2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_TIM17;
 8000da4:	230e      	movs	r3, #14
 8000da6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_BL_PWM_GPIO_Port, &GPIO_InitStruct);
 8000da8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dac:	4619      	mov	r1, r3
 8000dae:	4869      	ldr	r0, [pc, #420]	; (8000f54 <MX_GPIO_Init+0x2fc>)
 8000db0:	f000 fe2c 	bl	8001a0c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin BLE_RSTN_Pin AUDIO_RESETN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|BLE_RSTN_Pin|AUDIO_RESETN_Pin;
 8000db4:	f241 1302 	movw	r3, #4354	; 0x1102
 8000db8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dba:	2301      	movs	r3, #1
 8000dbc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000dc6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dca:	4619      	mov	r1, r3
 8000dcc:	485b      	ldr	r0, [pc, #364]	; (8000f3c <MX_GPIO_Init+0x2e4>)
 8000dce:	f000 fe1d 	bl	8001a0c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD5 PD4 PD1 PD0
                           PD7 PD14 PD15 PD9
                           PD8 PD10 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_1|GPIO_PIN_0
 8000dd2:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 8000dd6:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_7|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_9
                          |GPIO_PIN_8|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dd8:	2302      	movs	r3, #2
 8000dda:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000de0:	2303      	movs	r3, #3
 8000de2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000de4:	230c      	movs	r3, #12
 8000de6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000de8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dec:	4619      	mov	r1, r3
 8000dee:	4854      	ldr	r0, [pc, #336]	; (8000f40 <MX_GPIO_Init+0x2e8>)
 8000df0:	f000 fe0c 	bl	8001a0c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000df4:	2304      	movs	r3, #4
 8000df6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000df8:	2302      	movs	r3, #2
 8000dfa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e00:	2303      	movs	r3, #3
 8000e02:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000e04:	230c      	movs	r3, #12
 8000e06:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	484c      	ldr	r0, [pc, #304]	; (8000f40 <MX_GPIO_Init+0x2e8>)
 8000e10:	f000 fdfc 	bl	8001a0c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC11 PC12 PC10 PC9
                           PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_10|GPIO_PIN_9
 8000e14:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8000e18:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e1a:	2302      	movs	r3, #2
 8000e1c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e22:	2303      	movs	r3, #3
 8000e24:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000e26:	230c      	movs	r3, #12
 8000e28:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e2e:	4619      	mov	r1, r3
 8000e30:	4849      	ldr	r0, [pc, #292]	; (8000f58 <MX_GPIO_Init+0x300>)
 8000e32:	f000 fdeb 	bl	8001a0c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA15 VBUS_SENSE_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_15|VBUS_SENSE_Pin;
 8000e36:	f248 0310 	movw	r3, #32784	; 0x8010
 8000e3a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e3c:	2303      	movs	r3, #3
 8000e3e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e40:	2300      	movs	r3, #0
 8000e42:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e48:	4619      	mov	r1, r3
 8000e4a:	483f      	ldr	r0, [pc, #252]	; (8000f48 <MX_GPIO_Init+0x2f0>)
 8000e4c:	f000 fdde 	bl	8001a0c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA12 PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11;
 8000e50:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000e54:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e56:	2302      	movs	r3, #2
 8000e58:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8000e62:	230a      	movs	r3, #10
 8000e64:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e6a:	4619      	mov	r1, r3
 8000e6c:	4836      	ldr	r0, [pc, #216]	; (8000f48 <MX_GPIO_Init+0x2f0>)
 8000e6e:	f000 fdcd 	bl	8001a0c <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_BUTTON_Pin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 8000e72:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e76:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000e80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e84:	4619      	mov	r1, r3
 8000e86:	4834      	ldr	r0, [pc, #208]	; (8000f58 <MX_GPIO_Init+0x300>)
 8000e88:	f000 fdc0 	bl	8001a0c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin;
 8000e8c:	2308      	movs	r3, #8
 8000e8e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e90:	2301      	movs	r3, #1
 8000e92:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e94:	2300      	movs	r3, #0
 8000e96:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 8000e9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	4827      	ldr	r0, [pc, #156]	; (8000f40 <MX_GPIO_Init+0x2e8>)
 8000ea4:	f000 fdb2 	bl	8001a0c <HAL_GPIO_Init>

  /*Configure GPIO pin : PF0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000ea8:	2301      	movs	r3, #1
 8000eaa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eac:	2302      	movs	r3, #2
 8000eae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eb4:	2303      	movs	r3, #3
 8000eb6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000eb8:	230c      	movs	r3, #12
 8000eba:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000ebc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	4823      	ldr	r0, [pc, #140]	; (8000f50 <MX_GPIO_Init+0x2f8>)
 8000ec4:	f000 fda2 	bl	8001a0c <HAL_GPIO_Init>

  /*Configure GPIO pins : GYRO_ACC_INT_Pin SDIO_DETECT_Pin CTP_INT_Pin */
  GPIO_InitStruct.Pin = GYRO_ACC_INT_Pin|SDIO_DETECT_Pin|CTP_INT_Pin;
 8000ec8:	230e      	movs	r3, #14
 8000eca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ecc:	4b23      	ldr	r3, [pc, #140]	; (8000f5c <MX_GPIO_Init+0x304>)
 8000ece:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000ed4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ed8:	4619      	mov	r1, r3
 8000eda:	481d      	ldr	r0, [pc, #116]	; (8000f50 <MX_GPIO_Init+0x2f8>)
 8000edc:	f000 fd96 	bl	8001a0c <HAL_GPIO_Init>

  /*Configure GPIO pin : UCPD_DBn_Pin */
  GPIO_InitStruct.Pin = UCPD_DBn_Pin;
 8000ee0:	2320      	movs	r3, #32
 8000ee2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ee4:	2301      	movs	r3, #1
 8000ee6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eec:	2300      	movs	r3, #0
 8000eee:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(UCPD_DBn_GPIO_Port, &GPIO_InitStruct);
 8000ef0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ef4:	4619      	mov	r1, r3
 8000ef6:	4813      	ldr	r0, [pc, #76]	; (8000f44 <MX_GPIO_Init+0x2ec>)
 8000ef8:	f000 fd88 	bl	8001a0c <HAL_GPIO_Init>

  /*Configure GPIO pins : USART1_TX_Pin USART1_RX_Pin */
  GPIO_InitStruct.Pin = USART1_TX_Pin|USART1_RX_Pin;
 8000efc:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000f00:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f02:	2302      	movs	r3, #2
 8000f04:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f06:	2300      	movs	r3, #0
 8000f08:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000f0e:	2307      	movs	r3, #7
 8000f10:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f16:	4619      	mov	r1, r3
 8000f18:	480b      	ldr	r0, [pc, #44]	; (8000f48 <MX_GPIO_Init+0x2f0>)
 8000f1a:	f000 fd77 	bl	8001a0c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_TE_Pin */
  GPIO_InitStruct.Pin = LCD_TE_Pin;
 8000f1e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f22:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f24:	2301      	movs	r3, #1
 8000f26:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_TE_GPIO_Port, &GPIO_InitStruct);
 8000f30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f34:	4619      	mov	r1, r3
 8000f36:	e013      	b.n	8000f60 <MX_GPIO_Init+0x308>
 8000f38:	40021000 	.word	0x40021000
 8000f3c:	42021800 	.word	0x42021800
 8000f40:	42020c00 	.word	0x42020c00
 8000f44:	42020400 	.word	0x42020400
 8000f48:	42020000 	.word	0x42020000
 8000f4c:	42021c00 	.word	0x42021c00
 8000f50:	42021400 	.word	0x42021400
 8000f54:	42021000 	.word	0x42021000
 8000f58:	42020800 	.word	0x42020800
 8000f5c:	10110000 	.word	0x10110000
 8000f60:	4872      	ldr	r0, [pc, #456]	; (800112c <MX_GPIO_Init+0x4d4>)
 8000f62:	f000 fd53 	bl	8001a0c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_PWR_ON_Pin */
  GPIO_InitStruct.Pin = LCD_PWR_ON_Pin;
 8000f66:	2301      	movs	r3, #1
 8000f68:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f72:	2300      	movs	r3, #0
 8000f74:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_PWR_ON_GPIO_Port, &GPIO_InitStruct);
 8000f76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	486c      	ldr	r0, [pc, #432]	; (8001130 <MX_GPIO_Init+0x4d8>)
 8000f7e:	f000 fd45 	bl	8001a0c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC2 PC3 PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_1;
 8000f82:	230e      	movs	r3, #14
 8000f84:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f86:	2302      	movs	r3, #2
 8000f88:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f8e:	2303      	movs	r3, #3
 8000f90:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPI1;
 8000f92:	230a      	movs	r3, #10
 8000f94:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f9a:	4619      	mov	r1, r3
 8000f9c:	4865      	ldr	r0, [pc, #404]	; (8001134 <MX_GPIO_Init+0x4dc>)
 8000f9e:	f000 fd35 	bl	8001a0c <HAL_GPIO_Init>

  /*Configure GPIO pin : BLE_INT_Pin */
  GPIO_InitStruct.Pin = BLE_INT_Pin;
 8000fa2:	2340      	movs	r3, #64	; 0x40
 8000fa4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000fa6:	4b64      	ldr	r3, [pc, #400]	; (8001138 <MX_GPIO_Init+0x4e0>)
 8000fa8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000faa:	2300      	movs	r3, #0
 8000fac:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BLE_INT_GPIO_Port, &GPIO_InitStruct);
 8000fae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fb2:	4619      	mov	r1, r3
 8000fb4:	4861      	ldr	r0, [pc, #388]	; (800113c <MX_GPIO_Init+0x4e4>)
 8000fb6:	f000 fd29 	bl	8001a0c <HAL_GPIO_Init>

  /*Configure GPIO pin : PG7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000fba:	2380      	movs	r3, #128	; 0x80
 8000fbc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fbe:	2302      	movs	r3, #2
 8000fc0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8000fca:	2306      	movs	r3, #6
 8000fcc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000fce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	4859      	ldr	r0, [pc, #356]	; (800113c <MX_GPIO_Init+0x4e4>)
 8000fd6:	f000 fd19 	bl	8001a0c <HAL_GPIO_Init>

  /*Configure GPIO pins : PG4 PG2 PG3 BLE_CSN_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_2|GPIO_PIN_3|BLE_CSN_Pin;
 8000fda:	233c      	movs	r3, #60	; 0x3c
 8000fdc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fde:	2302      	movs	r3, #2
 8000fe0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000fea:	2305      	movs	r3, #5
 8000fec:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000fee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	4851      	ldr	r0, [pc, #324]	; (800113c <MX_GPIO_Init+0x4e4>)
 8000ff6:	f000 fd09 	bl	8001a0c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ffe:	2302      	movs	r3, #2
 8001000:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001002:	2300      	movs	r3, #0
 8001004:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001006:	2303      	movs	r3, #3
 8001008:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_OCTOSPI1;
 800100a:	2303      	movs	r3, #3
 800100c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800100e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001012:	4619      	mov	r1, r3
 8001014:	4847      	ldr	r0, [pc, #284]	; (8001134 <MX_GPIO_Init+0x4dc>)
 8001016:	f000 fcf9 	bl	8001a0c <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_RST_Pin STMOD_SEL_12_Pin STMOD_SEL_34_Pin CTP_RST_Pin */
  GPIO_InitStruct.Pin = LCD_RST_Pin|STMOD_SEL_12_Pin|STMOD_SEL_34_Pin|CTP_RST_Pin;
 800101a:	f44f 4358 	mov.w	r3, #55296	; 0xd800
 800101e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001020:	2301      	movs	r3, #1
 8001022:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001024:	2300      	movs	r3, #0
 8001026:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001028:	2300      	movs	r3, #0
 800102a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800102c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001030:	4619      	mov	r1, r3
 8001032:	4843      	ldr	r0, [pc, #268]	; (8001140 <MX_GPIO_Init+0x4e8>)
 8001034:	f000 fcea 	bl	8001a0c <HAL_GPIO_Init>

  /*Configure GPIO pins : PE8 PE10 PE12 PE7
                           PE14 PE11 PE15 PE9
                           PE13 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_7
 8001038:	f64f 7380 	movw	r3, #65408	; 0xff80
 800103c:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_14|GPIO_PIN_11|GPIO_PIN_15|GPIO_PIN_9
                          |GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800103e:	2302      	movs	r3, #2
 8001040:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001042:	2300      	movs	r3, #0
 8001044:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001046:	2303      	movs	r3, #3
 8001048:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800104a:	230c      	movs	r3, #12
 800104c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800104e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001052:	4619      	mov	r1, r3
 8001054:	483b      	ldr	r0, [pc, #236]	; (8001144 <MX_GPIO_Init+0x4ec>)
 8001056:	f000 fcd9 	bl	8001a0c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA7 PA3 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_7|GPIO_PIN_3|GPIO_PIN_6;
 800105a:	23cc      	movs	r3, #204	; 0xcc
 800105c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800105e:	2302      	movs	r3, #2
 8001060:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001062:	2300      	movs	r3, #0
 8001064:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001066:	2303      	movs	r3, #3
 8001068:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPI1;
 800106a:	230a      	movs	r3, #10
 800106c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800106e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001072:	4619      	mov	r1, r3
 8001074:	482d      	ldr	r0, [pc, #180]	; (800112c <MX_GPIO_Init+0x4d4>)
 8001076:	f000 fcc9 	bl	8001a0c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB1 PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0;
 800107a:	2307      	movs	r3, #7
 800107c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800107e:	2302      	movs	r3, #2
 8001080:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001082:	2300      	movs	r3, #0
 8001084:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001086:	2303      	movs	r3, #3
 8001088:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPI1;
 800108a:	230a      	movs	r3, #10
 800108c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800108e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001092:	4619      	mov	r1, r3
 8001094:	482c      	ldr	r0, [pc, #176]	; (8001148 <MX_GPIO_Init+0x4f0>)
 8001096:	f000 fcb9 	bl	8001a0c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800109a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800109e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010a0:	2302      	movs	r3, #2
 80010a2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a4:	2300      	movs	r3, #0
 80010a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a8:	2300      	movs	r3, #0
 80010aa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80010ac:	2308      	movs	r3, #8
 80010ae:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010b4:	4619      	mov	r1, r3
 80010b6:	4824      	ldr	r0, [pc, #144]	; (8001148 <MX_GPIO_Init+0x4f0>)
 80010b8:	f000 fca8 	bl	8001a0c <HAL_GPIO_Init>

  /*Configure GPIO pin : UCPD_FLT_Pin */
  GPIO_InitStruct.Pin = UCPD_FLT_Pin;
 80010bc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80010c0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010c2:	2300      	movs	r3, #0
 80010c4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c6:	2300      	movs	r3, #0
 80010c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(UCPD_FLT_GPIO_Port, &GPIO_InitStruct);
 80010ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010ce:	4619      	mov	r1, r3
 80010d0:	481d      	ldr	r0, [pc, #116]	; (8001148 <MX_GPIO_Init+0x4f0>)
 80010d2:	f000 fc9b 	bl	8001a0c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80010d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80010da:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010dc:	2303      	movs	r3, #3
 80010de:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e0:	2300      	movs	r3, #0
 80010e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010e8:	4619      	mov	r1, r3
 80010ea:	4817      	ldr	r0, [pc, #92]	; (8001148 <MX_GPIO_Init+0x4f0>)
 80010ec:	f000 fc8e 	bl	8001a0c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80010f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010f4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010f6:	2302      	movs	r3, #2
 80010f8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fa:	2300      	movs	r3, #0
 80010fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010fe:	2300      	movs	r3, #0
 8001100:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001102:	2306      	movs	r3, #6
 8001104:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001106:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800110a:	4619      	mov	r1, r3
 800110c:	480e      	ldr	r0, [pc, #56]	; (8001148 <MX_GPIO_Init+0x4f0>)
 800110e:	f000 fc7d 	bl	8001a0c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8001112:	2200      	movs	r2, #0
 8001114:	2100      	movs	r1, #0
 8001116:	200e      	movs	r0, #14
 8001118:	f000 fc43 	bl	80019a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 800111c:	200e      	movs	r0, #14
 800111e:	f000 fc5a 	bl	80019d6 <HAL_NVIC_EnableIRQ>

}
 8001122:	bf00      	nop
 8001124:	3738      	adds	r7, #56	; 0x38
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	42020000 	.word	0x42020000
 8001130:	42021c00 	.word	0x42021c00
 8001134:	42020800 	.word	0x42020800
 8001138:	10110000 	.word	0x10110000
 800113c:	42021800 	.word	0x42021800
 8001140:	42021400 	.word	0x42021400
 8001144:	42021000 	.word	0x42021000
 8001148:	42020400 	.word	0x42020400

0800114c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800114c:	b480      	push	{r7}
 800114e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001150:	b672      	cpsid	i
}
 8001152:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001154:	e7fe      	b.n	8001154 <Error_Handler+0x8>
	...

08001158 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b082      	sub	sp, #8
 800115c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800115e:	4b0f      	ldr	r3, [pc, #60]	; (800119c <HAL_MspInit+0x44>)
 8001160:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001162:	4a0e      	ldr	r2, [pc, #56]	; (800119c <HAL_MspInit+0x44>)
 8001164:	f043 0301 	orr.w	r3, r3, #1
 8001168:	6613      	str	r3, [r2, #96]	; 0x60
 800116a:	4b0c      	ldr	r3, [pc, #48]	; (800119c <HAL_MspInit+0x44>)
 800116c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800116e:	f003 0301 	and.w	r3, r3, #1
 8001172:	607b      	str	r3, [r7, #4]
 8001174:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001176:	4b09      	ldr	r3, [pc, #36]	; (800119c <HAL_MspInit+0x44>)
 8001178:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800117a:	4a08      	ldr	r2, [pc, #32]	; (800119c <HAL_MspInit+0x44>)
 800117c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001180:	6593      	str	r3, [r2, #88]	; 0x58
 8001182:	4b06      	ldr	r3, [pc, #24]	; (800119c <HAL_MspInit+0x44>)
 8001184:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001186:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800118a:	603b      	str	r3, [r7, #0]
 800118c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800118e:	f001 fc0d 	bl	80029ac <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001192:	bf00      	nop
 8001194:	3708      	adds	r7, #8
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	40021000 	.word	0x40021000

080011a0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b0ae      	sub	sp, #184	; 0xb8
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011a8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80011ac:	2200      	movs	r2, #0
 80011ae:	601a      	str	r2, [r3, #0]
 80011b0:	605a      	str	r2, [r3, #4]
 80011b2:	609a      	str	r2, [r3, #8]
 80011b4:	60da      	str	r2, [r3, #12]
 80011b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80011b8:	f107 0310 	add.w	r3, r7, #16
 80011bc:	2294      	movs	r2, #148	; 0x94
 80011be:	2100      	movs	r1, #0
 80011c0:	4618      	mov	r0, r3
 80011c2:	f003 f8fb 	bl	80043bc <memset>
  if(hi2c->Instance==I2C1)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	4a21      	ldr	r2, [pc, #132]	; (8001250 <HAL_I2C_MspInit+0xb0>)
 80011cc:	4293      	cmp	r3, r2
 80011ce:	d13a      	bne.n	8001246 <HAL_I2C_MspInit+0xa6>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80011d0:	2340      	movs	r3, #64	; 0x40
 80011d2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80011d4:	2300      	movs	r3, #0
 80011d6:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011d8:	f107 0310 	add.w	r3, r7, #16
 80011dc:	4618      	mov	r0, r3
 80011de:	f002 fbb3 	bl	8003948 <HAL_RCCEx_PeriphCLKConfig>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d001      	beq.n	80011ec <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80011e8:	f7ff ffb0 	bl	800114c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011ec:	4b19      	ldr	r3, [pc, #100]	; (8001254 <HAL_I2C_MspInit+0xb4>)
 80011ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011f0:	4a18      	ldr	r2, [pc, #96]	; (8001254 <HAL_I2C_MspInit+0xb4>)
 80011f2:	f043 0302 	orr.w	r3, r3, #2
 80011f6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011f8:	4b16      	ldr	r3, [pc, #88]	; (8001254 <HAL_I2C_MspInit+0xb4>)
 80011fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011fc:	f003 0302 	and.w	r3, r3, #2
 8001200:	60fb      	str	r3, [r7, #12]
 8001202:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001204:	23c0      	movs	r3, #192	; 0xc0
 8001206:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800120a:	2312      	movs	r3, #18
 800120c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001210:	2300      	movs	r3, #0
 8001212:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001216:	2300      	movs	r3, #0
 8001218:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800121c:	2304      	movs	r3, #4
 800121e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001222:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001226:	4619      	mov	r1, r3
 8001228:	480b      	ldr	r0, [pc, #44]	; (8001258 <HAL_I2C_MspInit+0xb8>)
 800122a:	f000 fbef 	bl	8001a0c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800122e:	4b09      	ldr	r3, [pc, #36]	; (8001254 <HAL_I2C_MspInit+0xb4>)
 8001230:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001232:	4a08      	ldr	r2, [pc, #32]	; (8001254 <HAL_I2C_MspInit+0xb4>)
 8001234:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001238:	6593      	str	r3, [r2, #88]	; 0x58
 800123a:	4b06      	ldr	r3, [pc, #24]	; (8001254 <HAL_I2C_MspInit+0xb4>)
 800123c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800123e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001242:	60bb      	str	r3, [r7, #8]
 8001244:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001246:	bf00      	nop
 8001248:	37b8      	adds	r7, #184	; 0xb8
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	40005400 	.word	0x40005400
 8001254:	40021000 	.word	0x40021000
 8001258:	42020400 	.word	0x42020400

0800125c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800125c:	b480      	push	{r7}
 800125e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001260:	e7fe      	b.n	8001260 <NMI_Handler+0x4>

08001262 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001262:	b480      	push	{r7}
 8001264:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001266:	e7fe      	b.n	8001266 <HardFault_Handler+0x4>

08001268 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001268:	b480      	push	{r7}
 800126a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800126c:	e7fe      	b.n	800126c <MemManage_Handler+0x4>

0800126e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800126e:	b480      	push	{r7}
 8001270:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001272:	e7fe      	b.n	8001272 <BusFault_Handler+0x4>

08001274 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001278:	e7fe      	b.n	8001278 <UsageFault_Handler+0x4>

0800127a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800127a:	b480      	push	{r7}
 800127c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800127e:	bf00      	nop
 8001280:	46bd      	mov	sp, r7
 8001282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001286:	4770      	bx	lr

08001288 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001288:	b480      	push	{r7}
 800128a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800128c:	bf00      	nop
 800128e:	46bd      	mov	sp, r7
 8001290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001294:	4770      	bx	lr

08001296 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001296:	b480      	push	{r7}
 8001298:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800129a:	bf00      	nop
 800129c:	46bd      	mov	sp, r7
 800129e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a2:	4770      	bx	lr

080012a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012a8:	f000 fa80 	bl	80017ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012ac:	bf00      	nop
 80012ae:	bd80      	pop	{r7, pc}

080012b0 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b084      	sub	sp, #16
 80012b4:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN EXTI3_IRQn 0 */
	  HAL_I2C_Mem_Read(&hi2c1, 0xD5, 0x20, I2C_MEMADD_SIZE_8BIT, &data[0], 14, 50);
 80012b6:	2332      	movs	r3, #50	; 0x32
 80012b8:	9302      	str	r3, [sp, #8]
 80012ba:	230e      	movs	r3, #14
 80012bc:	9301      	str	r3, [sp, #4]
 80012be:	4b94      	ldr	r3, [pc, #592]	; (8001510 <EXTI3_IRQHandler+0x260>)
 80012c0:	9300      	str	r3, [sp, #0]
 80012c2:	2301      	movs	r3, #1
 80012c4:	2220      	movs	r2, #32
 80012c6:	21d5      	movs	r1, #213	; 0xd5
 80012c8:	4892      	ldr	r0, [pc, #584]	; (8001514 <EXTI3_IRQHandler+0x264>)
 80012ca:	f000 ff17 	bl	80020fc <HAL_I2C_Mem_Read>
	  sens_values.sensor_temp = ((int16_t)(data[0] | data[1]<<8)/256.0)+25;
 80012ce:	4b90      	ldr	r3, [pc, #576]	; (8001510 <EXTI3_IRQHandler+0x260>)
 80012d0:	781b      	ldrb	r3, [r3, #0]
 80012d2:	b21a      	sxth	r2, r3
 80012d4:	4b8e      	ldr	r3, [pc, #568]	; (8001510 <EXTI3_IRQHandler+0x260>)
 80012d6:	785b      	ldrb	r3, [r3, #1]
 80012d8:	021b      	lsls	r3, r3, #8
 80012da:	b21b      	sxth	r3, r3
 80012dc:	4313      	orrs	r3, r2
 80012de:	b21b      	sxth	r3, r3
 80012e0:	4618      	mov	r0, r3
 80012e2:	f7ff f8fb 	bl	80004dc <__aeabi_i2d>
 80012e6:	f04f 0200 	mov.w	r2, #0
 80012ea:	4b8b      	ldr	r3, [pc, #556]	; (8001518 <EXTI3_IRQHandler+0x268>)
 80012ec:	f7ff fa8a 	bl	8000804 <__aeabi_ddiv>
 80012f0:	4602      	mov	r2, r0
 80012f2:	460b      	mov	r3, r1
 80012f4:	4610      	mov	r0, r2
 80012f6:	4619      	mov	r1, r3
 80012f8:	f04f 0200 	mov.w	r2, #0
 80012fc:	4b87      	ldr	r3, [pc, #540]	; (800151c <EXTI3_IRQHandler+0x26c>)
 80012fe:	f7fe ffa1 	bl	8000244 <__adddf3>
 8001302:	4602      	mov	r2, r0
 8001304:	460b      	mov	r3, r1
 8001306:	4610      	mov	r0, r2
 8001308:	4619      	mov	r1, r3
 800130a:	f7ff fb63 	bl	80009d4 <__aeabi_d2f>
 800130e:	4603      	mov	r3, r0
 8001310:	4a83      	ldr	r2, [pc, #524]	; (8001520 <EXTI3_IRQHandler+0x270>)
 8001312:	6193      	str	r3, [r2, #24]

	  sens_values.gyro_x = ((int16_t)(data[2]|(data[3]<<8))/65535.0)*2000;
 8001314:	4b7e      	ldr	r3, [pc, #504]	; (8001510 <EXTI3_IRQHandler+0x260>)
 8001316:	789b      	ldrb	r3, [r3, #2]
 8001318:	b21a      	sxth	r2, r3
 800131a:	4b7d      	ldr	r3, [pc, #500]	; (8001510 <EXTI3_IRQHandler+0x260>)
 800131c:	78db      	ldrb	r3, [r3, #3]
 800131e:	021b      	lsls	r3, r3, #8
 8001320:	b21b      	sxth	r3, r3
 8001322:	4313      	orrs	r3, r2
 8001324:	b21b      	sxth	r3, r3
 8001326:	4618      	mov	r0, r3
 8001328:	f7ff f8d8 	bl	80004dc <__aeabi_i2d>
 800132c:	a374      	add	r3, pc, #464	; (adr r3, 8001500 <EXTI3_IRQHandler+0x250>)
 800132e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001332:	f7ff fa67 	bl	8000804 <__aeabi_ddiv>
 8001336:	4602      	mov	r2, r0
 8001338:	460b      	mov	r3, r1
 800133a:	4610      	mov	r0, r2
 800133c:	4619      	mov	r1, r3
 800133e:	f04f 0200 	mov.w	r2, #0
 8001342:	4b78      	ldr	r3, [pc, #480]	; (8001524 <EXTI3_IRQHandler+0x274>)
 8001344:	f7ff f934 	bl	80005b0 <__aeabi_dmul>
 8001348:	4602      	mov	r2, r0
 800134a:	460b      	mov	r3, r1
 800134c:	4610      	mov	r0, r2
 800134e:	4619      	mov	r1, r3
 8001350:	f7ff fb40 	bl	80009d4 <__aeabi_d2f>
 8001354:	4603      	mov	r3, r0
 8001356:	4a72      	ldr	r2, [pc, #456]	; (8001520 <EXTI3_IRQHandler+0x270>)
 8001358:	60d3      	str	r3, [r2, #12]
	  sens_values.gyro_y = ((int16_t)(data[4]|(data[5]<<8))/65535.0)*2000;
 800135a:	4b6d      	ldr	r3, [pc, #436]	; (8001510 <EXTI3_IRQHandler+0x260>)
 800135c:	791b      	ldrb	r3, [r3, #4]
 800135e:	b21a      	sxth	r2, r3
 8001360:	4b6b      	ldr	r3, [pc, #428]	; (8001510 <EXTI3_IRQHandler+0x260>)
 8001362:	795b      	ldrb	r3, [r3, #5]
 8001364:	021b      	lsls	r3, r3, #8
 8001366:	b21b      	sxth	r3, r3
 8001368:	4313      	orrs	r3, r2
 800136a:	b21b      	sxth	r3, r3
 800136c:	4618      	mov	r0, r3
 800136e:	f7ff f8b5 	bl	80004dc <__aeabi_i2d>
 8001372:	a363      	add	r3, pc, #396	; (adr r3, 8001500 <EXTI3_IRQHandler+0x250>)
 8001374:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001378:	f7ff fa44 	bl	8000804 <__aeabi_ddiv>
 800137c:	4602      	mov	r2, r0
 800137e:	460b      	mov	r3, r1
 8001380:	4610      	mov	r0, r2
 8001382:	4619      	mov	r1, r3
 8001384:	f04f 0200 	mov.w	r2, #0
 8001388:	4b66      	ldr	r3, [pc, #408]	; (8001524 <EXTI3_IRQHandler+0x274>)
 800138a:	f7ff f911 	bl	80005b0 <__aeabi_dmul>
 800138e:	4602      	mov	r2, r0
 8001390:	460b      	mov	r3, r1
 8001392:	4610      	mov	r0, r2
 8001394:	4619      	mov	r1, r3
 8001396:	f7ff fb1d 	bl	80009d4 <__aeabi_d2f>
 800139a:	4603      	mov	r3, r0
 800139c:	4a60      	ldr	r2, [pc, #384]	; (8001520 <EXTI3_IRQHandler+0x270>)
 800139e:	6113      	str	r3, [r2, #16]
	  sens_values.gyro_z = ((int16_t)(data[6]|(data[7]<<8))/65535.0)*2000;
 80013a0:	4b5b      	ldr	r3, [pc, #364]	; (8001510 <EXTI3_IRQHandler+0x260>)
 80013a2:	799b      	ldrb	r3, [r3, #6]
 80013a4:	b21a      	sxth	r2, r3
 80013a6:	4b5a      	ldr	r3, [pc, #360]	; (8001510 <EXTI3_IRQHandler+0x260>)
 80013a8:	79db      	ldrb	r3, [r3, #7]
 80013aa:	021b      	lsls	r3, r3, #8
 80013ac:	b21b      	sxth	r3, r3
 80013ae:	4313      	orrs	r3, r2
 80013b0:	b21b      	sxth	r3, r3
 80013b2:	4618      	mov	r0, r3
 80013b4:	f7ff f892 	bl	80004dc <__aeabi_i2d>
 80013b8:	a351      	add	r3, pc, #324	; (adr r3, 8001500 <EXTI3_IRQHandler+0x250>)
 80013ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013be:	f7ff fa21 	bl	8000804 <__aeabi_ddiv>
 80013c2:	4602      	mov	r2, r0
 80013c4:	460b      	mov	r3, r1
 80013c6:	4610      	mov	r0, r2
 80013c8:	4619      	mov	r1, r3
 80013ca:	f04f 0200 	mov.w	r2, #0
 80013ce:	4b55      	ldr	r3, [pc, #340]	; (8001524 <EXTI3_IRQHandler+0x274>)
 80013d0:	f7ff f8ee 	bl	80005b0 <__aeabi_dmul>
 80013d4:	4602      	mov	r2, r0
 80013d6:	460b      	mov	r3, r1
 80013d8:	4610      	mov	r0, r2
 80013da:	4619      	mov	r1, r3
 80013dc:	f7ff fafa 	bl	80009d4 <__aeabi_d2f>
 80013e0:	4603      	mov	r3, r0
 80013e2:	4a4f      	ldr	r2, [pc, #316]	; (8001520 <EXTI3_IRQHandler+0x270>)
 80013e4:	6153      	str	r3, [r2, #20]

	  sens_values.acc_x = ((int16_t)(data[8]|(data[9]<<8))/65535.0)*Gravity*8;
 80013e6:	4b4a      	ldr	r3, [pc, #296]	; (8001510 <EXTI3_IRQHandler+0x260>)
 80013e8:	7a1b      	ldrb	r3, [r3, #8]
 80013ea:	b21a      	sxth	r2, r3
 80013ec:	4b48      	ldr	r3, [pc, #288]	; (8001510 <EXTI3_IRQHandler+0x260>)
 80013ee:	7a5b      	ldrb	r3, [r3, #9]
 80013f0:	021b      	lsls	r3, r3, #8
 80013f2:	b21b      	sxth	r3, r3
 80013f4:	4313      	orrs	r3, r2
 80013f6:	b21b      	sxth	r3, r3
 80013f8:	4618      	mov	r0, r3
 80013fa:	f7ff f86f 	bl	80004dc <__aeabi_i2d>
 80013fe:	a340      	add	r3, pc, #256	; (adr r3, 8001500 <EXTI3_IRQHandler+0x250>)
 8001400:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001404:	f7ff f9fe 	bl	8000804 <__aeabi_ddiv>
 8001408:	4602      	mov	r2, r0
 800140a:	460b      	mov	r3, r1
 800140c:	4610      	mov	r0, r2
 800140e:	4619      	mov	r1, r3
 8001410:	a33d      	add	r3, pc, #244	; (adr r3, 8001508 <EXTI3_IRQHandler+0x258>)
 8001412:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001416:	f7ff f8cb 	bl	80005b0 <__aeabi_dmul>
 800141a:	4602      	mov	r2, r0
 800141c:	460b      	mov	r3, r1
 800141e:	4610      	mov	r0, r2
 8001420:	4619      	mov	r1, r3
 8001422:	f04f 0200 	mov.w	r2, #0
 8001426:	4b40      	ldr	r3, [pc, #256]	; (8001528 <EXTI3_IRQHandler+0x278>)
 8001428:	f7ff f8c2 	bl	80005b0 <__aeabi_dmul>
 800142c:	4602      	mov	r2, r0
 800142e:	460b      	mov	r3, r1
 8001430:	4610      	mov	r0, r2
 8001432:	4619      	mov	r1, r3
 8001434:	f7ff face 	bl	80009d4 <__aeabi_d2f>
 8001438:	4603      	mov	r3, r0
 800143a:	4a39      	ldr	r2, [pc, #228]	; (8001520 <EXTI3_IRQHandler+0x270>)
 800143c:	6013      	str	r3, [r2, #0]
	  sens_values.acc_y = ((int16_t)(data[10]|(data[11]<<8))/65535.0)*Gravity*8;
 800143e:	4b34      	ldr	r3, [pc, #208]	; (8001510 <EXTI3_IRQHandler+0x260>)
 8001440:	7a9b      	ldrb	r3, [r3, #10]
 8001442:	b21a      	sxth	r2, r3
 8001444:	4b32      	ldr	r3, [pc, #200]	; (8001510 <EXTI3_IRQHandler+0x260>)
 8001446:	7adb      	ldrb	r3, [r3, #11]
 8001448:	021b      	lsls	r3, r3, #8
 800144a:	b21b      	sxth	r3, r3
 800144c:	4313      	orrs	r3, r2
 800144e:	b21b      	sxth	r3, r3
 8001450:	4618      	mov	r0, r3
 8001452:	f7ff f843 	bl	80004dc <__aeabi_i2d>
 8001456:	a32a      	add	r3, pc, #168	; (adr r3, 8001500 <EXTI3_IRQHandler+0x250>)
 8001458:	e9d3 2300 	ldrd	r2, r3, [r3]
 800145c:	f7ff f9d2 	bl	8000804 <__aeabi_ddiv>
 8001460:	4602      	mov	r2, r0
 8001462:	460b      	mov	r3, r1
 8001464:	4610      	mov	r0, r2
 8001466:	4619      	mov	r1, r3
 8001468:	a327      	add	r3, pc, #156	; (adr r3, 8001508 <EXTI3_IRQHandler+0x258>)
 800146a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800146e:	f7ff f89f 	bl	80005b0 <__aeabi_dmul>
 8001472:	4602      	mov	r2, r0
 8001474:	460b      	mov	r3, r1
 8001476:	4610      	mov	r0, r2
 8001478:	4619      	mov	r1, r3
 800147a:	f04f 0200 	mov.w	r2, #0
 800147e:	4b2a      	ldr	r3, [pc, #168]	; (8001528 <EXTI3_IRQHandler+0x278>)
 8001480:	f7ff f896 	bl	80005b0 <__aeabi_dmul>
 8001484:	4602      	mov	r2, r0
 8001486:	460b      	mov	r3, r1
 8001488:	4610      	mov	r0, r2
 800148a:	4619      	mov	r1, r3
 800148c:	f7ff faa2 	bl	80009d4 <__aeabi_d2f>
 8001490:	4603      	mov	r3, r0
 8001492:	4a23      	ldr	r2, [pc, #140]	; (8001520 <EXTI3_IRQHandler+0x270>)
 8001494:	6053      	str	r3, [r2, #4]
	  sens_values.acc_z = ((int16_t)(data[12]|(data[13]<<8))/65535.0)*Gravity*8;
 8001496:	4b1e      	ldr	r3, [pc, #120]	; (8001510 <EXTI3_IRQHandler+0x260>)
 8001498:	7b1b      	ldrb	r3, [r3, #12]
 800149a:	b21a      	sxth	r2, r3
 800149c:	4b1c      	ldr	r3, [pc, #112]	; (8001510 <EXTI3_IRQHandler+0x260>)
 800149e:	7b5b      	ldrb	r3, [r3, #13]
 80014a0:	021b      	lsls	r3, r3, #8
 80014a2:	b21b      	sxth	r3, r3
 80014a4:	4313      	orrs	r3, r2
 80014a6:	b21b      	sxth	r3, r3
 80014a8:	4618      	mov	r0, r3
 80014aa:	f7ff f817 	bl	80004dc <__aeabi_i2d>
 80014ae:	a314      	add	r3, pc, #80	; (adr r3, 8001500 <EXTI3_IRQHandler+0x250>)
 80014b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014b4:	f7ff f9a6 	bl	8000804 <__aeabi_ddiv>
 80014b8:	4602      	mov	r2, r0
 80014ba:	460b      	mov	r3, r1
 80014bc:	4610      	mov	r0, r2
 80014be:	4619      	mov	r1, r3
 80014c0:	a311      	add	r3, pc, #68	; (adr r3, 8001508 <EXTI3_IRQHandler+0x258>)
 80014c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014c6:	f7ff f873 	bl	80005b0 <__aeabi_dmul>
 80014ca:	4602      	mov	r2, r0
 80014cc:	460b      	mov	r3, r1
 80014ce:	4610      	mov	r0, r2
 80014d0:	4619      	mov	r1, r3
 80014d2:	f04f 0200 	mov.w	r2, #0
 80014d6:	4b14      	ldr	r3, [pc, #80]	; (8001528 <EXTI3_IRQHandler+0x278>)
 80014d8:	f7ff f86a 	bl	80005b0 <__aeabi_dmul>
 80014dc:	4602      	mov	r2, r0
 80014de:	460b      	mov	r3, r1
 80014e0:	4610      	mov	r0, r2
 80014e2:	4619      	mov	r1, r3
 80014e4:	f7ff fa76 	bl	80009d4 <__aeabi_d2f>
 80014e8:	4603      	mov	r3, r0
 80014ea:	4a0d      	ldr	r2, [pc, #52]	; (8001520 <EXTI3_IRQHandler+0x270>)
 80014ec:	6093      	str	r3, [r2, #8]


  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 80014ee:	2008      	movs	r0, #8
 80014f0:	f000 fc24 	bl	8001d3c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80014f4:	bf00      	nop
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	f3af 8000 	nop.w
 8001500:	00000000 	.word	0x00000000
 8001504:	40efffe0 	.word	0x40efffe0
 8001508:	51eb851f 	.word	0x51eb851f
 800150c:	40239eb8 	.word	0x40239eb8
 8001510:	20000074 	.word	0x20000074
 8001514:	20000028 	.word	0x20000028
 8001518:	40700000 	.word	0x40700000
 800151c:	40390000 	.word	0x40390000
 8001520:	20000084 	.word	0x20000084
 8001524:	409f4000 	.word	0x409f4000
 8001528:	40200000 	.word	0x40200000

0800152c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800152c:	b480      	push	{r7}
 800152e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001530:	4b06      	ldr	r3, [pc, #24]	; (800154c <SystemInit+0x20>)
 8001532:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001536:	4a05      	ldr	r2, [pc, #20]	; (800154c <SystemInit+0x20>)
 8001538:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800153c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001540:	bf00      	nop
 8001542:	46bd      	mov	sp, r7
 8001544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001548:	4770      	bx	lr
 800154a:	bf00      	nop
 800154c:	e000ed00 	.word	0xe000ed00

08001550 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  *
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8001550:	b480      	push	{r7}
 8001552:	b087      	sub	sp, #28
 8001554:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllsource, pllm, pllr;

  /* Get MSI Range frequency--------------------------------------------------*/
  if((RCC->CR & RCC_CR_MSIRGSEL) == 0U)
 8001556:	4b4f      	ldr	r3, [pc, #316]	; (8001694 <SystemCoreClockUpdate+0x144>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f003 0308 	and.w	r3, r3, #8
 800155e:	2b00      	cmp	r3, #0
 8001560:	d107      	bne.n	8001572 <SystemCoreClockUpdate+0x22>
  { /* MSISRANGE from RCC_CSR applies */
    msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8U;
 8001562:	4b4c      	ldr	r3, [pc, #304]	; (8001694 <SystemCoreClockUpdate+0x144>)
 8001564:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001568:	0a1b      	lsrs	r3, r3, #8
 800156a:	f003 030f 	and.w	r3, r3, #15
 800156e:	617b      	str	r3, [r7, #20]
 8001570:	e005      	b.n	800157e <SystemCoreClockUpdate+0x2e>
  }
  else
  { /* MSIRANGE from RCC_CR applies */
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
 8001572:	4b48      	ldr	r3, [pc, #288]	; (8001694 <SystemCoreClockUpdate+0x144>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	091b      	lsrs	r3, r3, #4
 8001578:	f003 030f 	and.w	r3, r3, #15
 800157c:	617b      	str	r3, [r7, #20]
  }
  /*MSI frequency range in HZ*/
  msirange = MSIRangeTable[msirange];
 800157e:	4a46      	ldr	r2, [pc, #280]	; (8001698 <SystemCoreClockUpdate+0x148>)
 8001580:	697b      	ldr	r3, [r7, #20]
 8001582:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001586:	617b      	str	r3, [r7, #20]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001588:	4b42      	ldr	r3, [pc, #264]	; (8001694 <SystemCoreClockUpdate+0x144>)
 800158a:	689b      	ldr	r3, [r3, #8]
 800158c:	f003 030c 	and.w	r3, r3, #12
 8001590:	2b0c      	cmp	r3, #12
 8001592:	d866      	bhi.n	8001662 <SystemCoreClockUpdate+0x112>
 8001594:	a201      	add	r2, pc, #4	; (adr r2, 800159c <SystemCoreClockUpdate+0x4c>)
 8001596:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800159a:	bf00      	nop
 800159c:	080015d1 	.word	0x080015d1
 80015a0:	08001663 	.word	0x08001663
 80015a4:	08001663 	.word	0x08001663
 80015a8:	08001663 	.word	0x08001663
 80015ac:	080015d9 	.word	0x080015d9
 80015b0:	08001663 	.word	0x08001663
 80015b4:	08001663 	.word	0x08001663
 80015b8:	08001663 	.word	0x08001663
 80015bc:	080015e1 	.word	0x080015e1
 80015c0:	08001663 	.word	0x08001663
 80015c4:	08001663 	.word	0x08001663
 80015c8:	08001663 	.word	0x08001663
 80015cc:	080015e9 	.word	0x080015e9
  {
    case 0x00:  /* MSI used as system clock source */
      SystemCoreClock = msirange;
 80015d0:	4a32      	ldr	r2, [pc, #200]	; (800169c <SystemCoreClockUpdate+0x14c>)
 80015d2:	697b      	ldr	r3, [r7, #20]
 80015d4:	6013      	str	r3, [r2, #0]
      break;
 80015d6:	e048      	b.n	800166a <SystemCoreClockUpdate+0x11a>

    case 0x04:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 80015d8:	4b30      	ldr	r3, [pc, #192]	; (800169c <SystemCoreClockUpdate+0x14c>)
 80015da:	4a31      	ldr	r2, [pc, #196]	; (80016a0 <SystemCoreClockUpdate+0x150>)
 80015dc:	601a      	str	r2, [r3, #0]
      break;
 80015de:	e044      	b.n	800166a <SystemCoreClockUpdate+0x11a>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 80015e0:	4b2e      	ldr	r3, [pc, #184]	; (800169c <SystemCoreClockUpdate+0x14c>)
 80015e2:	4a30      	ldr	r2, [pc, #192]	; (80016a4 <SystemCoreClockUpdate+0x154>)
 80015e4:	601a      	str	r2, [r3, #0]
      break;
 80015e6:	e040      	b.n	800166a <SystemCoreClockUpdate+0x11a>

    case 0x0C:  /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80015e8:	4b2a      	ldr	r3, [pc, #168]	; (8001694 <SystemCoreClockUpdate+0x144>)
 80015ea:	68db      	ldr	r3, [r3, #12]
 80015ec:	f003 0303 	and.w	r3, r3, #3
 80015f0:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4U) + 1U ;
 80015f2:	4b28      	ldr	r3, [pc, #160]	; (8001694 <SystemCoreClockUpdate+0x144>)
 80015f4:	68db      	ldr	r3, [r3, #12]
 80015f6:	091b      	lsrs	r3, r3, #4
 80015f8:	f003 030f 	and.w	r3, r3, #15
 80015fc:	3301      	adds	r3, #1
 80015fe:	60bb      	str	r3, [r7, #8]
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	2b02      	cmp	r3, #2
 8001604:	d003      	beq.n	800160e <SystemCoreClockUpdate+0xbe>
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	2b03      	cmp	r3, #3
 800160a:	d006      	beq.n	800161a <SystemCoreClockUpdate+0xca>
 800160c:	e00b      	b.n	8001626 <SystemCoreClockUpdate+0xd6>

      switch (pllsource)
      {
        case 0x02:  /* HSI used as PLL clock source */
          pllvco = (HSI_VALUE / pllm);
 800160e:	4a24      	ldr	r2, [pc, #144]	; (80016a0 <SystemCoreClockUpdate+0x150>)
 8001610:	68bb      	ldr	r3, [r7, #8]
 8001612:	fbb2 f3f3 	udiv	r3, r2, r3
 8001616:	613b      	str	r3, [r7, #16]
          break;
 8001618:	e00b      	b.n	8001632 <SystemCoreClockUpdate+0xe2>

        case 0x03:  /* HSE used as PLL clock source */
          pllvco = (HSE_VALUE / pllm);
 800161a:	4a22      	ldr	r2, [pc, #136]	; (80016a4 <SystemCoreClockUpdate+0x154>)
 800161c:	68bb      	ldr	r3, [r7, #8]
 800161e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001622:	613b      	str	r3, [r7, #16]
          break;
 8001624:	e005      	b.n	8001632 <SystemCoreClockUpdate+0xe2>

        default:    /* MSI used as PLL clock source */
          pllvco = (msirange / pllm);
 8001626:	697a      	ldr	r2, [r7, #20]
 8001628:	68bb      	ldr	r3, [r7, #8]
 800162a:	fbb2 f3f3 	udiv	r3, r2, r3
 800162e:	613b      	str	r3, [r7, #16]
          break;
 8001630:	bf00      	nop
      }
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8U);
 8001632:	4b18      	ldr	r3, [pc, #96]	; (8001694 <SystemCoreClockUpdate+0x144>)
 8001634:	68db      	ldr	r3, [r3, #12]
 8001636:	0a1b      	lsrs	r3, r3, #8
 8001638:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800163c:	693b      	ldr	r3, [r7, #16]
 800163e:	fb02 f303 	mul.w	r3, r2, r3
 8001642:	613b      	str	r3, [r7, #16]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
 8001644:	4b13      	ldr	r3, [pc, #76]	; (8001694 <SystemCoreClockUpdate+0x144>)
 8001646:	68db      	ldr	r3, [r3, #12]
 8001648:	0e5b      	lsrs	r3, r3, #25
 800164a:	f003 0303 	and.w	r3, r3, #3
 800164e:	3301      	adds	r3, #1
 8001650:	005b      	lsls	r3, r3, #1
 8001652:	607b      	str	r3, [r7, #4]
      SystemCoreClock = pllvco/pllr;
 8001654:	693a      	ldr	r2, [r7, #16]
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	fbb2 f3f3 	udiv	r3, r2, r3
 800165c:	4a0f      	ldr	r2, [pc, #60]	; (800169c <SystemCoreClockUpdate+0x14c>)
 800165e:	6013      	str	r3, [r2, #0]
      break;
 8001660:	e003      	b.n	800166a <SystemCoreClockUpdate+0x11a>

    default:
      SystemCoreClock = msirange;
 8001662:	4a0e      	ldr	r2, [pc, #56]	; (800169c <SystemCoreClockUpdate+0x14c>)
 8001664:	697b      	ldr	r3, [r7, #20]
 8001666:	6013      	str	r3, [r2, #0]
      break;
 8001668:	bf00      	nop
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 800166a:	4b0a      	ldr	r3, [pc, #40]	; (8001694 <SystemCoreClockUpdate+0x144>)
 800166c:	689b      	ldr	r3, [r3, #8]
 800166e:	091b      	lsrs	r3, r3, #4
 8001670:	f003 030f 	and.w	r3, r3, #15
 8001674:	4a0c      	ldr	r2, [pc, #48]	; (80016a8 <SystemCoreClockUpdate+0x158>)
 8001676:	5cd3      	ldrb	r3, [r2, r3]
 8001678:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 800167a:	4b08      	ldr	r3, [pc, #32]	; (800169c <SystemCoreClockUpdate+0x14c>)
 800167c:	681a      	ldr	r2, [r3, #0]
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	fa22 f303 	lsr.w	r3, r2, r3
 8001684:	4a05      	ldr	r2, [pc, #20]	; (800169c <SystemCoreClockUpdate+0x14c>)
 8001686:	6013      	str	r3, [r2, #0]
}
 8001688:	bf00      	nop
 800168a:	371c      	adds	r7, #28
 800168c:	46bd      	mov	sp, r7
 800168e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001692:	4770      	bx	lr
 8001694:	40021000 	.word	0x40021000
 8001698:	080043f4 	.word	0x080043f4
 800169c:	20000000 	.word	0x20000000
 80016a0:	00f42400 	.word	0x00f42400
 80016a4:	007a1200 	.word	0x007a1200
 80016a8:	080043e4 	.word	0x080043e4

080016ac <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 80016ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80016e4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80016b0:	f7ff ff3c 	bl	800152c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80016b4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80016b6:	e003      	b.n	80016c0 <LoopCopyDataInit>

080016b8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80016b8:	4b0b      	ldr	r3, [pc, #44]	; (80016e8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80016ba:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80016bc:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80016be:	3104      	adds	r1, #4

080016c0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80016c0:	480a      	ldr	r0, [pc, #40]	; (80016ec <LoopForever+0xa>)
	ldr	r3, =_edata
 80016c2:	4b0b      	ldr	r3, [pc, #44]	; (80016f0 <LoopForever+0xe>)
	adds	r2, r0, r1
 80016c4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80016c6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80016c8:	d3f6      	bcc.n	80016b8 <CopyDataInit>
	ldr	r2, =_sbss
 80016ca:	4a0a      	ldr	r2, [pc, #40]	; (80016f4 <LoopForever+0x12>)
	b	LoopFillZerobss
 80016cc:	e002      	b.n	80016d4 <LoopFillZerobss>

080016ce <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80016ce:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80016d0:	f842 3b04 	str.w	r3, [r2], #4

080016d4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80016d4:	4b08      	ldr	r3, [pc, #32]	; (80016f8 <LoopForever+0x16>)
	cmp	r2, r3
 80016d6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80016d8:	d3f9      	bcc.n	80016ce <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80016da:	f002 fe4b 	bl	8004374 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80016de:	f7ff f9c9 	bl	8000a74 <main>

080016e2 <LoopForever>:

LoopForever:
    b LoopForever
 80016e2:	e7fe      	b.n	80016e2 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 80016e4:	20030000 	.word	0x20030000
	ldr	r3, =_sidata
 80016e8:	0800443c 	.word	0x0800443c
	ldr	r0, =_sdata
 80016ec:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80016f0:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 80016f4:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 80016f8:	200000a4 	.word	0x200000a4

080016fc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80016fc:	e7fe      	b.n	80016fc <ADC1_2_IRQHandler>

080016fe <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016fe:	b580      	push	{r7, lr}
 8001700:	b082      	sub	sp, #8
 8001702:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001704:	2300      	movs	r3, #0
 8001706:	71fb      	strb	r3, [r7, #7]

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8001708:	2004      	movs	r0, #4
 800170a:	f000 f93f 	bl	800198c <HAL_NVIC_SetPriorityGrouping>

  /* Insure time base clock coherency */
  SystemCoreClockUpdate();
 800170e:	f7ff ff1f 	bl	8001550 <SystemCoreClockUpdate>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001712:	2000      	movs	r0, #0
 8001714:	f000 f80e 	bl	8001734 <HAL_InitTick>
 8001718:	4603      	mov	r3, r0
 800171a:	2b00      	cmp	r3, #0
 800171c:	d002      	beq.n	8001724 <HAL_Init+0x26>
  {
    status = HAL_ERROR;
 800171e:	2301      	movs	r3, #1
 8001720:	71fb      	strb	r3, [r7, #7]
 8001722:	e001      	b.n	8001728 <HAL_Init+0x2a>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001724:	f7ff fd18 	bl	8001158 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001728:	79fb      	ldrb	r3, [r7, #7]
}
 800172a:	4618      	mov	r0, r3
 800172c:	3708      	adds	r7, #8
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}
	...

08001734 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b084      	sub	sp, #16
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800173c:	2300      	movs	r3, #0
 800173e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001740:	4b17      	ldr	r3, [pc, #92]	; (80017a0 <HAL_InitTick+0x6c>)
 8001742:	781b      	ldrb	r3, [r3, #0]
 8001744:	2b00      	cmp	r3, #0
 8001746:	d023      	beq.n	8001790 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001748:	4b16      	ldr	r3, [pc, #88]	; (80017a4 <HAL_InitTick+0x70>)
 800174a:	681a      	ldr	r2, [r3, #0]
 800174c:	4b14      	ldr	r3, [pc, #80]	; (80017a0 <HAL_InitTick+0x6c>)
 800174e:	781b      	ldrb	r3, [r3, #0]
 8001750:	4619      	mov	r1, r3
 8001752:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001756:	fbb3 f3f1 	udiv	r3, r3, r1
 800175a:	fbb2 f3f3 	udiv	r3, r2, r3
 800175e:	4618      	mov	r0, r3
 8001760:	f000 f947 	bl	80019f2 <HAL_SYSTICK_Config>
 8001764:	4603      	mov	r3, r0
 8001766:	2b00      	cmp	r3, #0
 8001768:	d10f      	bne.n	800178a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	2b07      	cmp	r3, #7
 800176e:	d809      	bhi.n	8001784 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001770:	2200      	movs	r2, #0
 8001772:	6879      	ldr	r1, [r7, #4]
 8001774:	f04f 30ff 	mov.w	r0, #4294967295
 8001778:	f000 f913 	bl	80019a2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800177c:	4a0a      	ldr	r2, [pc, #40]	; (80017a8 <HAL_InitTick+0x74>)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	6013      	str	r3, [r2, #0]
 8001782:	e007      	b.n	8001794 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001784:	2301      	movs	r3, #1
 8001786:	73fb      	strb	r3, [r7, #15]
 8001788:	e004      	b.n	8001794 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800178a:	2301      	movs	r3, #1
 800178c:	73fb      	strb	r3, [r7, #15]
 800178e:	e001      	b.n	8001794 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001790:	2301      	movs	r3, #1
 8001792:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001794:	7bfb      	ldrb	r3, [r7, #15]
}
 8001796:	4618      	mov	r0, r3
 8001798:	3710      	adds	r7, #16
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	20000008 	.word	0x20000008
 80017a4:	20000000 	.word	0x20000000
 80017a8:	20000004 	.word	0x20000004

080017ac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017ac:	b480      	push	{r7}
 80017ae:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80017b0:	4b06      	ldr	r3, [pc, #24]	; (80017cc <HAL_IncTick+0x20>)
 80017b2:	781b      	ldrb	r3, [r3, #0]
 80017b4:	461a      	mov	r2, r3
 80017b6:	4b06      	ldr	r3, [pc, #24]	; (80017d0 <HAL_IncTick+0x24>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	4413      	add	r3, r2
 80017bc:	4a04      	ldr	r2, [pc, #16]	; (80017d0 <HAL_IncTick+0x24>)
 80017be:	6013      	str	r3, [r2, #0]
}
 80017c0:	bf00      	nop
 80017c2:	46bd      	mov	sp, r7
 80017c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c8:	4770      	bx	lr
 80017ca:	bf00      	nop
 80017cc:	20000008 	.word	0x20000008
 80017d0:	200000a0 	.word	0x200000a0

080017d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017d4:	b480      	push	{r7}
 80017d6:	af00      	add	r7, sp, #0
  return uwTick;
 80017d8:	4b03      	ldr	r3, [pc, #12]	; (80017e8 <HAL_GetTick+0x14>)
 80017da:	681b      	ldr	r3, [r3, #0]
}
 80017dc:	4618      	mov	r0, r3
 80017de:	46bd      	mov	sp, r7
 80017e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e4:	4770      	bx	lr
 80017e6:	bf00      	nop
 80017e8:	200000a0 	.word	0x200000a0

080017ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017ec:	b480      	push	{r7}
 80017ee:	b085      	sub	sp, #20
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	f003 0307 	and.w	r3, r3, #7
 80017fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017fc:	4b0c      	ldr	r3, [pc, #48]	; (8001830 <__NVIC_SetPriorityGrouping+0x44>)
 80017fe:	68db      	ldr	r3, [r3, #12]
 8001800:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001802:	68ba      	ldr	r2, [r7, #8]
 8001804:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001808:	4013      	ands	r3, r2
 800180a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001810:	68bb      	ldr	r3, [r7, #8]
 8001812:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001814:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001818:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800181c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800181e:	4a04      	ldr	r2, [pc, #16]	; (8001830 <__NVIC_SetPriorityGrouping+0x44>)
 8001820:	68bb      	ldr	r3, [r7, #8]
 8001822:	60d3      	str	r3, [r2, #12]
}
 8001824:	bf00      	nop
 8001826:	3714      	adds	r7, #20
 8001828:	46bd      	mov	sp, r7
 800182a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182e:	4770      	bx	lr
 8001830:	e000ed00 	.word	0xe000ed00

08001834 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001834:	b480      	push	{r7}
 8001836:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001838:	4b04      	ldr	r3, [pc, #16]	; (800184c <__NVIC_GetPriorityGrouping+0x18>)
 800183a:	68db      	ldr	r3, [r3, #12]
 800183c:	0a1b      	lsrs	r3, r3, #8
 800183e:	f003 0307 	and.w	r3, r3, #7
}
 8001842:	4618      	mov	r0, r3
 8001844:	46bd      	mov	sp, r7
 8001846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184a:	4770      	bx	lr
 800184c:	e000ed00 	.word	0xe000ed00

08001850 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001850:	b480      	push	{r7}
 8001852:	b083      	sub	sp, #12
 8001854:	af00      	add	r7, sp, #0
 8001856:	4603      	mov	r3, r0
 8001858:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800185a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800185e:	2b00      	cmp	r3, #0
 8001860:	db0b      	blt.n	800187a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001862:	79fb      	ldrb	r3, [r7, #7]
 8001864:	f003 021f 	and.w	r2, r3, #31
 8001868:	4907      	ldr	r1, [pc, #28]	; (8001888 <__NVIC_EnableIRQ+0x38>)
 800186a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800186e:	095b      	lsrs	r3, r3, #5
 8001870:	2001      	movs	r0, #1
 8001872:	fa00 f202 	lsl.w	r2, r0, r2
 8001876:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800187a:	bf00      	nop
 800187c:	370c      	adds	r7, #12
 800187e:	46bd      	mov	sp, r7
 8001880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001884:	4770      	bx	lr
 8001886:	bf00      	nop
 8001888:	e000e100 	.word	0xe000e100

0800188c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800188c:	b480      	push	{r7}
 800188e:	b083      	sub	sp, #12
 8001890:	af00      	add	r7, sp, #0
 8001892:	4603      	mov	r3, r0
 8001894:	6039      	str	r1, [r7, #0]
 8001896:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001898:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800189c:	2b00      	cmp	r3, #0
 800189e:	db0a      	blt.n	80018b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	b2da      	uxtb	r2, r3
 80018a4:	490c      	ldr	r1, [pc, #48]	; (80018d8 <__NVIC_SetPriority+0x4c>)
 80018a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018aa:	0152      	lsls	r2, r2, #5
 80018ac:	b2d2      	uxtb	r2, r2
 80018ae:	440b      	add	r3, r1
 80018b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018b4:	e00a      	b.n	80018cc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	b2da      	uxtb	r2, r3
 80018ba:	4908      	ldr	r1, [pc, #32]	; (80018dc <__NVIC_SetPriority+0x50>)
 80018bc:	79fb      	ldrb	r3, [r7, #7]
 80018be:	f003 030f 	and.w	r3, r3, #15
 80018c2:	3b04      	subs	r3, #4
 80018c4:	0152      	lsls	r2, r2, #5
 80018c6:	b2d2      	uxtb	r2, r2
 80018c8:	440b      	add	r3, r1
 80018ca:	761a      	strb	r2, [r3, #24]
}
 80018cc:	bf00      	nop
 80018ce:	370c      	adds	r7, #12
 80018d0:	46bd      	mov	sp, r7
 80018d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d6:	4770      	bx	lr
 80018d8:	e000e100 	.word	0xe000e100
 80018dc:	e000ed00 	.word	0xe000ed00

080018e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b089      	sub	sp, #36	; 0x24
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	60f8      	str	r0, [r7, #12]
 80018e8:	60b9      	str	r1, [r7, #8]
 80018ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	f003 0307 	and.w	r3, r3, #7
 80018f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018f4:	69fb      	ldr	r3, [r7, #28]
 80018f6:	f1c3 0307 	rsb	r3, r3, #7
 80018fa:	2b03      	cmp	r3, #3
 80018fc:	bf28      	it	cs
 80018fe:	2303      	movcs	r3, #3
 8001900:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001902:	69fb      	ldr	r3, [r7, #28]
 8001904:	3303      	adds	r3, #3
 8001906:	2b06      	cmp	r3, #6
 8001908:	d902      	bls.n	8001910 <NVIC_EncodePriority+0x30>
 800190a:	69fb      	ldr	r3, [r7, #28]
 800190c:	3b04      	subs	r3, #4
 800190e:	e000      	b.n	8001912 <NVIC_EncodePriority+0x32>
 8001910:	2300      	movs	r3, #0
 8001912:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001914:	f04f 32ff 	mov.w	r2, #4294967295
 8001918:	69bb      	ldr	r3, [r7, #24]
 800191a:	fa02 f303 	lsl.w	r3, r2, r3
 800191e:	43da      	mvns	r2, r3
 8001920:	68bb      	ldr	r3, [r7, #8]
 8001922:	401a      	ands	r2, r3
 8001924:	697b      	ldr	r3, [r7, #20]
 8001926:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001928:	f04f 31ff 	mov.w	r1, #4294967295
 800192c:	697b      	ldr	r3, [r7, #20]
 800192e:	fa01 f303 	lsl.w	r3, r1, r3
 8001932:	43d9      	mvns	r1, r3
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001938:	4313      	orrs	r3, r2
         );
}
 800193a:	4618      	mov	r0, r3
 800193c:	3724      	adds	r7, #36	; 0x24
 800193e:	46bd      	mov	sp, r7
 8001940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001944:	4770      	bx	lr
	...

08001948 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b082      	sub	sp, #8
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	3b01      	subs	r3, #1
 8001954:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001958:	d301      	bcc.n	800195e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800195a:	2301      	movs	r3, #1
 800195c:	e00f      	b.n	800197e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800195e:	4a0a      	ldr	r2, [pc, #40]	; (8001988 <SysTick_Config+0x40>)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	3b01      	subs	r3, #1
 8001964:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001966:	2107      	movs	r1, #7
 8001968:	f04f 30ff 	mov.w	r0, #4294967295
 800196c:	f7ff ff8e 	bl	800188c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001970:	4b05      	ldr	r3, [pc, #20]	; (8001988 <SysTick_Config+0x40>)
 8001972:	2200      	movs	r2, #0
 8001974:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001976:	4b04      	ldr	r3, [pc, #16]	; (8001988 <SysTick_Config+0x40>)
 8001978:	2207      	movs	r2, #7
 800197a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800197c:	2300      	movs	r3, #0
}
 800197e:	4618      	mov	r0, r3
 8001980:	3708      	adds	r7, #8
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}
 8001986:	bf00      	nop
 8001988:	e000e010 	.word	0xe000e010

0800198c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b082      	sub	sp, #8
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001994:	6878      	ldr	r0, [r7, #4]
 8001996:	f7ff ff29 	bl	80017ec <__NVIC_SetPriorityGrouping>
}
 800199a:	bf00      	nop
 800199c:	3708      	adds	r7, #8
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}

080019a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 7
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019a2:	b580      	push	{r7, lr}
 80019a4:	b086      	sub	sp, #24
 80019a6:	af00      	add	r7, sp, #0
 80019a8:	4603      	mov	r3, r0
 80019aa:	60b9      	str	r1, [r7, #8]
 80019ac:	607a      	str	r2, [r7, #4]
 80019ae:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80019b0:	f7ff ff40 	bl	8001834 <__NVIC_GetPriorityGrouping>
 80019b4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019b6:	687a      	ldr	r2, [r7, #4]
 80019b8:	68b9      	ldr	r1, [r7, #8]
 80019ba:	6978      	ldr	r0, [r7, #20]
 80019bc:	f7ff ff90 	bl	80018e0 <NVIC_EncodePriority>
 80019c0:	4602      	mov	r2, r0
 80019c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019c6:	4611      	mov	r1, r2
 80019c8:	4618      	mov	r0, r3
 80019ca:	f7ff ff5f 	bl	800188c <__NVIC_SetPriority>
}
 80019ce:	bf00      	nop
 80019d0:	3718      	adds	r7, #24
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}

080019d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019d6:	b580      	push	{r7, lr}
 80019d8:	b082      	sub	sp, #8
 80019da:	af00      	add	r7, sp, #0
 80019dc:	4603      	mov	r3, r0
 80019de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019e4:	4618      	mov	r0, r3
 80019e6:	f7ff ff33 	bl	8001850 <__NVIC_EnableIRQ>
}
 80019ea:	bf00      	nop
 80019ec:	3708      	adds	r7, #8
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}

080019f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019f2:	b580      	push	{r7, lr}
 80019f4:	b082      	sub	sp, #8
 80019f6:	af00      	add	r7, sp, #0
 80019f8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80019fa:	6878      	ldr	r0, [r7, #4]
 80019fc:	f7ff ffa4 	bl	8001948 <SysTick_Config>
 8001a00:	4603      	mov	r3, r0
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	3708      	adds	r7, #8
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}
	...

08001a0c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b087      	sub	sp, #28
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
 8001a14:	6039      	str	r1, [r7, #0]
  uint32_t position = 0U;
 8001a16:	2300      	movs	r3, #0
 8001a18:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001a1a:	e158      	b.n	8001cce <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	681a      	ldr	r2, [r3, #0]
 8001a20:	2101      	movs	r1, #1
 8001a22:	697b      	ldr	r3, [r7, #20]
 8001a24:	fa01 f303 	lsl.w	r3, r1, r3
 8001a28:	4013      	ands	r3, r2
 8001a2a:	60fb      	str	r3, [r7, #12]

    if(iocurrent != 0U)
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	f000 814a 	beq.w	8001cc8 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	2b01      	cmp	r3, #1
 8001a3a:	d00b      	beq.n	8001a54 <HAL_GPIO_Init+0x48>
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	2b02      	cmp	r3, #2
 8001a42:	d007      	beq.n	8001a54 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a48:	2b11      	cmp	r3, #17
 8001a4a:	d003      	beq.n	8001a54 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	2b12      	cmp	r3, #18
 8001a52:	d130      	bne.n	8001ab6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	689b      	ldr	r3, [r3, #8]
 8001a58:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001a5a:	697b      	ldr	r3, [r7, #20]
 8001a5c:	005b      	lsls	r3, r3, #1
 8001a5e:	2203      	movs	r2, #3
 8001a60:	fa02 f303 	lsl.w	r3, r2, r3
 8001a64:	43db      	mvns	r3, r3
 8001a66:	693a      	ldr	r2, [r7, #16]
 8001a68:	4013      	ands	r3, r2
 8001a6a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	68da      	ldr	r2, [r3, #12]
 8001a70:	697b      	ldr	r3, [r7, #20]
 8001a72:	005b      	lsls	r3, r3, #1
 8001a74:	fa02 f303 	lsl.w	r3, r2, r3
 8001a78:	693a      	ldr	r2, [r7, #16]
 8001a7a:	4313      	orrs	r3, r2
 8001a7c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	693a      	ldr	r2, [r7, #16]
 8001a82:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001a8a:	2201      	movs	r2, #1
 8001a8c:	697b      	ldr	r3, [r7, #20]
 8001a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a92:	43db      	mvns	r3, r3
 8001a94:	693a      	ldr	r2, [r7, #16]
 8001a96:	4013      	ands	r3, r2
 8001a98:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	091b      	lsrs	r3, r3, #4
 8001aa0:	f003 0201 	and.w	r2, r3, #1
 8001aa4:	697b      	ldr	r3, [r7, #20]
 8001aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aaa:	693a      	ldr	r2, [r7, #16]
 8001aac:	4313      	orrs	r3, r2
 8001aae:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	693a      	ldr	r2, [r7, #16]
 8001ab4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	68db      	ldr	r3, [r3, #12]
 8001aba:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001abc:	697b      	ldr	r3, [r7, #20]
 8001abe:	005b      	lsls	r3, r3, #1
 8001ac0:	2203      	movs	r2, #3
 8001ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac6:	43db      	mvns	r3, r3
 8001ac8:	693a      	ldr	r2, [r7, #16]
 8001aca:	4013      	ands	r3, r2
 8001acc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	689a      	ldr	r2, [r3, #8]
 8001ad2:	697b      	ldr	r3, [r7, #20]
 8001ad4:	005b      	lsls	r3, r3, #1
 8001ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8001ada:	693a      	ldr	r2, [r7, #16]
 8001adc:	4313      	orrs	r3, r2
 8001ade:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	693a      	ldr	r2, [r7, #16]
 8001ae4:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	2b02      	cmp	r3, #2
 8001aec:	d003      	beq.n	8001af6 <HAL_GPIO_Init+0xea>
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	2b12      	cmp	r3, #18
 8001af4:	d123      	bne.n	8001b3e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001af6:	697b      	ldr	r3, [r7, #20]
 8001af8:	08da      	lsrs	r2, r3, #3
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	3208      	adds	r2, #8
 8001afe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b02:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 8001b04:	697b      	ldr	r3, [r7, #20]
 8001b06:	f003 0307 	and.w	r3, r3, #7
 8001b0a:	009b      	lsls	r3, r3, #2
 8001b0c:	220f      	movs	r2, #15
 8001b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b12:	43db      	mvns	r3, r3
 8001b14:	693a      	ldr	r2, [r7, #16]
 8001b16:	4013      	ands	r3, r2
 8001b18:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	691a      	ldr	r2, [r3, #16]
 8001b1e:	697b      	ldr	r3, [r7, #20]
 8001b20:	f003 0307 	and.w	r3, r3, #7
 8001b24:	009b      	lsls	r3, r3, #2
 8001b26:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2a:	693a      	ldr	r2, [r7, #16]
 8001b2c:	4313      	orrs	r3, r2
 8001b2e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001b30:	697b      	ldr	r3, [r7, #20]
 8001b32:	08da      	lsrs	r2, r3, #3
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	3208      	adds	r2, #8
 8001b38:	6939      	ldr	r1, [r7, #16]
 8001b3a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001b44:	697b      	ldr	r3, [r7, #20]
 8001b46:	005b      	lsls	r3, r3, #1
 8001b48:	2203      	movs	r2, #3
 8001b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4e:	43db      	mvns	r3, r3
 8001b50:	693a      	ldr	r2, [r7, #16]
 8001b52:	4013      	ands	r3, r2
 8001b54:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	f003 0203 	and.w	r2, r3, #3
 8001b5e:	697b      	ldr	r3, [r7, #20]
 8001b60:	005b      	lsls	r3, r3, #1
 8001b62:	fa02 f303 	lsl.w	r3, r2, r3
 8001b66:	693a      	ldr	r2, [r7, #16]
 8001b68:	4313      	orrs	r3, r2
 8001b6a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	693a      	ldr	r2, [r7, #16]
 8001b70:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	f000 80a4 	beq.w	8001cc8 <HAL_GPIO_Init+0x2bc>
      {
        temp = EXTI->EXTICR[position >> 2U];
 8001b80:	4a5a      	ldr	r2, [pc, #360]	; (8001cec <HAL_GPIO_Init+0x2e0>)
 8001b82:	697b      	ldr	r3, [r7, #20]
 8001b84:	089b      	lsrs	r3, r3, #2
 8001b86:	3318      	adds	r3, #24
 8001b88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b8c:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (8U * (position & 0x03U)));
 8001b8e:	697b      	ldr	r3, [r7, #20]
 8001b90:	f003 0303 	and.w	r3, r3, #3
 8001b94:	00db      	lsls	r3, r3, #3
 8001b96:	220f      	movs	r2, #15
 8001b98:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9c:	43db      	mvns	r3, r3
 8001b9e:	693a      	ldr	r2, [r7, #16]
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	4a52      	ldr	r2, [pc, #328]	; (8001cf0 <HAL_GPIO_Init+0x2e4>)
 8001ba8:	4293      	cmp	r3, r2
 8001baa:	d025      	beq.n	8001bf8 <HAL_GPIO_Init+0x1ec>
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	4a51      	ldr	r2, [pc, #324]	; (8001cf4 <HAL_GPIO_Init+0x2e8>)
 8001bb0:	4293      	cmp	r3, r2
 8001bb2:	d01f      	beq.n	8001bf4 <HAL_GPIO_Init+0x1e8>
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	4a50      	ldr	r2, [pc, #320]	; (8001cf8 <HAL_GPIO_Init+0x2ec>)
 8001bb8:	4293      	cmp	r3, r2
 8001bba:	d019      	beq.n	8001bf0 <HAL_GPIO_Init+0x1e4>
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	4a4f      	ldr	r2, [pc, #316]	; (8001cfc <HAL_GPIO_Init+0x2f0>)
 8001bc0:	4293      	cmp	r3, r2
 8001bc2:	d013      	beq.n	8001bec <HAL_GPIO_Init+0x1e0>
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	4a4e      	ldr	r2, [pc, #312]	; (8001d00 <HAL_GPIO_Init+0x2f4>)
 8001bc8:	4293      	cmp	r3, r2
 8001bca:	d00d      	beq.n	8001be8 <HAL_GPIO_Init+0x1dc>
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	4a4d      	ldr	r2, [pc, #308]	; (8001d04 <HAL_GPIO_Init+0x2f8>)
 8001bd0:	4293      	cmp	r3, r2
 8001bd2:	d007      	beq.n	8001be4 <HAL_GPIO_Init+0x1d8>
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	4a4c      	ldr	r2, [pc, #304]	; (8001d08 <HAL_GPIO_Init+0x2fc>)
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	d101      	bne.n	8001be0 <HAL_GPIO_Init+0x1d4>
 8001bdc:	2306      	movs	r3, #6
 8001bde:	e00c      	b.n	8001bfa <HAL_GPIO_Init+0x1ee>
 8001be0:	2307      	movs	r3, #7
 8001be2:	e00a      	b.n	8001bfa <HAL_GPIO_Init+0x1ee>
 8001be4:	2305      	movs	r3, #5
 8001be6:	e008      	b.n	8001bfa <HAL_GPIO_Init+0x1ee>
 8001be8:	2304      	movs	r3, #4
 8001bea:	e006      	b.n	8001bfa <HAL_GPIO_Init+0x1ee>
 8001bec:	2303      	movs	r3, #3
 8001bee:	e004      	b.n	8001bfa <HAL_GPIO_Init+0x1ee>
 8001bf0:	2302      	movs	r3, #2
 8001bf2:	e002      	b.n	8001bfa <HAL_GPIO_Init+0x1ee>
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	e000      	b.n	8001bfa <HAL_GPIO_Init+0x1ee>
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	697a      	ldr	r2, [r7, #20]
 8001bfc:	f002 0203 	and.w	r2, r2, #3
 8001c00:	00d2      	lsls	r2, r2, #3
 8001c02:	4093      	lsls	r3, r2
 8001c04:	693a      	ldr	r2, [r7, #16]
 8001c06:	4313      	orrs	r3, r2
 8001c08:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2U] = temp;
 8001c0a:	4938      	ldr	r1, [pc, #224]	; (8001cec <HAL_GPIO_Init+0x2e0>)
 8001c0c:	697b      	ldr	r3, [r7, #20]
 8001c0e:	089b      	lsrs	r3, r3, #2
 8001c10:	3318      	adds	r3, #24
 8001c12:	693a      	ldr	r2, [r7, #16]
 8001c14:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001c18:	4b34      	ldr	r3, [pc, #208]	; (8001cec <HAL_GPIO_Init+0x2e0>)
 8001c1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001c1e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	43db      	mvns	r3, r3
 8001c24:	693a      	ldr	r2, [r7, #16]
 8001c26:	4013      	ands	r3, r2
 8001c28:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d003      	beq.n	8001c3e <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8001c36:	693a      	ldr	r2, [r7, #16]
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	4313      	orrs	r3, r2
 8001c3c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001c3e:	4a2b      	ldr	r2, [pc, #172]	; (8001cec <HAL_GPIO_Init+0x2e0>)
 8001c40:	693b      	ldr	r3, [r7, #16]
 8001c42:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8001c46:	4b29      	ldr	r3, [pc, #164]	; (8001cec <HAL_GPIO_Init+0x2e0>)
 8001c48:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001c4c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	43db      	mvns	r3, r3
 8001c52:	693a      	ldr	r2, [r7, #16]
 8001c54:	4013      	ands	r3, r2
 8001c56:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d003      	beq.n	8001c6c <HAL_GPIO_Init+0x260>
        {
          temp |= iocurrent;
 8001c64:	693a      	ldr	r2, [r7, #16]
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	4313      	orrs	r3, r2
 8001c6a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001c6c:	4a1f      	ldr	r2, [pc, #124]	; (8001cec <HAL_GPIO_Init+0x2e0>)
 8001c6e:	693b      	ldr	r3, [r7, #16]
 8001c70:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001c74:	4b1d      	ldr	r3, [pc, #116]	; (8001cec <HAL_GPIO_Init+0x2e0>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	43db      	mvns	r3, r3
 8001c7e:	693a      	ldr	r2, [r7, #16]
 8001c80:	4013      	ands	r3, r2
 8001c82:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d003      	beq.n	8001c98 <HAL_GPIO_Init+0x28c>
        {
          temp |= iocurrent;
 8001c90:	693a      	ldr	r2, [r7, #16]
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	4313      	orrs	r3, r2
 8001c96:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001c98:	4a14      	ldr	r2, [pc, #80]	; (8001cec <HAL_GPIO_Init+0x2e0>)
 8001c9a:	693b      	ldr	r3, [r7, #16]
 8001c9c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001c9e:	4b13      	ldr	r3, [pc, #76]	; (8001cec <HAL_GPIO_Init+0x2e0>)
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	43db      	mvns	r3, r3
 8001ca8:	693a      	ldr	r2, [r7, #16]
 8001caa:	4013      	ands	r3, r2
 8001cac:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d003      	beq.n	8001cc2 <HAL_GPIO_Init+0x2b6>
        {
          temp |= iocurrent;
 8001cba:	693a      	ldr	r2, [r7, #16]
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	4313      	orrs	r3, r2
 8001cc0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001cc2:	4a0a      	ldr	r2, [pc, #40]	; (8001cec <HAL_GPIO_Init+0x2e0>)
 8001cc4:	693b      	ldr	r3, [r7, #16]
 8001cc6:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8001cc8:	697b      	ldr	r3, [r7, #20]
 8001cca:	3301      	adds	r3, #1
 8001ccc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	681a      	ldr	r2, [r3, #0]
 8001cd2:	697b      	ldr	r3, [r7, #20]
 8001cd4:	fa22 f303 	lsr.w	r3, r2, r3
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	f47f ae9f 	bne.w	8001a1c <HAL_GPIO_Init+0x10>
  }
}
 8001cde:	bf00      	nop
 8001ce0:	bf00      	nop
 8001ce2:	371c      	adds	r7, #28
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cea:	4770      	bx	lr
 8001cec:	4002f400 	.word	0x4002f400
 8001cf0:	42020000 	.word	0x42020000
 8001cf4:	42020400 	.word	0x42020400
 8001cf8:	42020800 	.word	0x42020800
 8001cfc:	42020c00 	.word	0x42020c00
 8001d00:	42021000 	.word	0x42021000
 8001d04:	42021400 	.word	0x42021400
 8001d08:	42021800 	.word	0x42021800

08001d0c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b083      	sub	sp, #12
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
 8001d14:	460b      	mov	r3, r1
 8001d16:	807b      	strh	r3, [r7, #2]
 8001d18:	4613      	mov	r3, r2
 8001d1a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001d1c:	787b      	ldrb	r3, [r7, #1]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d003      	beq.n	8001d2a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001d22:	887a      	ldrh	r2, [r7, #2]
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001d28:	e002      	b.n	8001d30 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001d2a:	887a      	ldrh	r2, [r7, #2]
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001d30:	bf00      	nop
 8001d32:	370c      	adds	r7, #12
 8001d34:	46bd      	mov	sp, r7
 8001d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3a:	4770      	bx	lr

08001d3c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b082      	sub	sp, #8
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	4603      	mov	r3, r0
 8001d44:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 8001d46:	4b0f      	ldr	r3, [pc, #60]	; (8001d84 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8001d48:	68da      	ldr	r2, [r3, #12]
 8001d4a:	88fb      	ldrh	r3, [r7, #6]
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d006      	beq.n	8001d60 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8001d52:	4a0c      	ldr	r2, [pc, #48]	; (8001d84 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8001d54:	88fb      	ldrh	r3, [r7, #6]
 8001d56:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8001d58:	88fb      	ldrh	r3, [r7, #6]
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f000 f814 	bl	8001d88 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if(__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 8001d60:	4b08      	ldr	r3, [pc, #32]	; (8001d84 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8001d62:	691a      	ldr	r2, [r3, #16]
 8001d64:	88fb      	ldrh	r3, [r7, #6]
 8001d66:	4013      	ands	r3, r2
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d006      	beq.n	8001d7a <HAL_GPIO_EXTI_IRQHandler+0x3e>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8001d6c:	4a05      	ldr	r2, [pc, #20]	; (8001d84 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8001d6e:	88fb      	ldrh	r3, [r7, #6]
 8001d70:	6113      	str	r3, [r2, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8001d72:	88fb      	ldrh	r3, [r7, #6]
 8001d74:	4618      	mov	r0, r3
 8001d76:	f000 f812 	bl	8001d9e <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8001d7a:	bf00      	nop
 8001d7c:	3708      	adds	r7, #8
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}
 8001d82:	bf00      	nop
 8001d84:	4002f400 	.word	0x4002f400

08001d88 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line rising detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b083      	sub	sp, #12
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	4603      	mov	r3, r0
 8001d90:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 8001d92:	bf00      	nop
 8001d94:	370c      	adds	r7, #12
 8001d96:	46bd      	mov	sp, r7
 8001d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9c:	4770      	bx	lr

08001d9e <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line falling detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8001d9e:	b480      	push	{r7}
 8001da0:	b083      	sub	sp, #12
 8001da2:	af00      	add	r7, sp, #0
 8001da4:	4603      	mov	r3, r0
 8001da6:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 8001da8:	bf00      	nop
 8001daa:	370c      	adds	r7, #12
 8001dac:	46bd      	mov	sp, r7
 8001dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db2:	4770      	bx	lr

08001db4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b082      	sub	sp, #8
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d101      	bne.n	8001dc6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	e081      	b.n	8001eca <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001dcc:	b2db      	uxtb	r3, r3
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d106      	bne.n	8001de0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001dda:	6878      	ldr	r0, [r7, #4]
 8001ddc:	f7ff f9e0 	bl	80011a0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2224      	movs	r2, #36	; 0x24
 8001de4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	681a      	ldr	r2, [r3, #0]
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f022 0201 	bic.w	r2, r2, #1
 8001df6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	685a      	ldr	r2, [r3, #4]
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001e04:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	689a      	ldr	r2, [r3, #8]
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001e14:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	68db      	ldr	r3, [r3, #12]
 8001e1a:	2b01      	cmp	r3, #1
 8001e1c:	d107      	bne.n	8001e2e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	689a      	ldr	r2, [r3, #8]
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001e2a:	609a      	str	r2, [r3, #8]
 8001e2c:	e006      	b.n	8001e3c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	689a      	ldr	r2, [r3, #8]
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001e3a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	68db      	ldr	r3, [r3, #12]
 8001e40:	2b02      	cmp	r3, #2
 8001e42:	d104      	bne.n	8001e4e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001e4c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	687a      	ldr	r2, [r7, #4]
 8001e56:	6812      	ldr	r2, [r2, #0]
 8001e58:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001e5c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e60:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	68da      	ldr	r2, [r3, #12]
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001e70:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	691a      	ldr	r2, [r3, #16]
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	695b      	ldr	r3, [r3, #20]
 8001e7a:	ea42 0103 	orr.w	r1, r2, r3
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	699b      	ldr	r3, [r3, #24]
 8001e82:	021a      	lsls	r2, r3, #8
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	430a      	orrs	r2, r1
 8001e8a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	69d9      	ldr	r1, [r3, #28]
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6a1a      	ldr	r2, [r3, #32]
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	430a      	orrs	r2, r1
 8001e9a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	681a      	ldr	r2, [r3, #0]
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f042 0201 	orr.w	r2, r2, #1
 8001eaa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2200      	movs	r2, #0
 8001eb0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2220      	movs	r2, #32
 8001eb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001ec8:	2300      	movs	r3, #0
}
 8001eca:	4618      	mov	r0, r3
 8001ecc:	3708      	adds	r7, #8
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}
	...

08001ed4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b088      	sub	sp, #32
 8001ed8:	af02      	add	r7, sp, #8
 8001eda:	60f8      	str	r0, [r7, #12]
 8001edc:	4608      	mov	r0, r1
 8001ede:	4611      	mov	r1, r2
 8001ee0:	461a      	mov	r2, r3
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	817b      	strh	r3, [r7, #10]
 8001ee6:	460b      	mov	r3, r1
 8001ee8:	813b      	strh	r3, [r7, #8]
 8001eea:	4613      	mov	r3, r2
 8001eec:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ef4:	b2db      	uxtb	r3, r3
 8001ef6:	2b20      	cmp	r3, #32
 8001ef8:	f040 80f9 	bne.w	80020ee <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001efc:	6a3b      	ldr	r3, [r7, #32]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d002      	beq.n	8001f08 <HAL_I2C_Mem_Write+0x34>
 8001f02:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d105      	bne.n	8001f14 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f0e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001f10:	2301      	movs	r3, #1
 8001f12:	e0ed      	b.n	80020f0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001f1a:	2b01      	cmp	r3, #1
 8001f1c:	d101      	bne.n	8001f22 <HAL_I2C_Mem_Write+0x4e>
 8001f1e:	2302      	movs	r3, #2
 8001f20:	e0e6      	b.n	80020f0 <HAL_I2C_Mem_Write+0x21c>
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	2201      	movs	r2, #1
 8001f26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001f2a:	f7ff fc53 	bl	80017d4 <HAL_GetTick>
 8001f2e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001f30:	697b      	ldr	r3, [r7, #20]
 8001f32:	9300      	str	r3, [sp, #0]
 8001f34:	2319      	movs	r3, #25
 8001f36:	2201      	movs	r2, #1
 8001f38:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001f3c:	68f8      	ldr	r0, [r7, #12]
 8001f3e:	f000 fac3 	bl	80024c8 <I2C_WaitOnFlagUntilTimeout>
 8001f42:	4603      	mov	r3, r0
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d001      	beq.n	8001f4c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8001f48:	2301      	movs	r3, #1
 8001f4a:	e0d1      	b.n	80020f0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	2221      	movs	r2, #33	; 0x21
 8001f50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	2240      	movs	r2, #64	; 0x40
 8001f58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	2200      	movs	r2, #0
 8001f60:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	6a3a      	ldr	r2, [r7, #32]
 8001f66:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001f6c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	2200      	movs	r2, #0
 8001f72:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001f74:	88f8      	ldrh	r0, [r7, #6]
 8001f76:	893a      	ldrh	r2, [r7, #8]
 8001f78:	8979      	ldrh	r1, [r7, #10]
 8001f7a:	697b      	ldr	r3, [r7, #20]
 8001f7c:	9301      	str	r3, [sp, #4]
 8001f7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f80:	9300      	str	r3, [sp, #0]
 8001f82:	4603      	mov	r3, r0
 8001f84:	68f8      	ldr	r0, [r7, #12]
 8001f86:	f000 f9d3 	bl	8002330 <I2C_RequestMemoryWrite>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d005      	beq.n	8001f9c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	2200      	movs	r2, #0
 8001f94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8001f98:	2301      	movs	r3, #1
 8001f9a:	e0a9      	b.n	80020f0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fa0:	b29b      	uxth	r3, r3
 8001fa2:	2bff      	cmp	r3, #255	; 0xff
 8001fa4:	d90e      	bls.n	8001fc4 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	22ff      	movs	r2, #255	; 0xff
 8001faa:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fb0:	b2da      	uxtb	r2, r3
 8001fb2:	8979      	ldrh	r1, [r7, #10]
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	9300      	str	r3, [sp, #0]
 8001fb8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001fbc:	68f8      	ldr	r0, [r7, #12]
 8001fbe:	f000 fba5 	bl	800270c <I2C_TransferConfig>
 8001fc2:	e00f      	b.n	8001fe4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fc8:	b29a      	uxth	r2, r3
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fd2:	b2da      	uxtb	r2, r3
 8001fd4:	8979      	ldrh	r1, [r7, #10]
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	9300      	str	r3, [sp, #0]
 8001fda:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001fde:	68f8      	ldr	r0, [r7, #12]
 8001fe0:	f000 fb94 	bl	800270c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001fe4:	697a      	ldr	r2, [r7, #20]
 8001fe6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001fe8:	68f8      	ldr	r0, [r7, #12]
 8001fea:	f000 faad 	bl	8002548 <I2C_WaitOnTXISFlagUntilTimeout>
 8001fee:	4603      	mov	r3, r0
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d001      	beq.n	8001ff8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	e07b      	b.n	80020f0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ffc:	781a      	ldrb	r2, [r3, #0]
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002008:	1c5a      	adds	r2, r3, #1
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002012:	b29b      	uxth	r3, r3
 8002014:	3b01      	subs	r3, #1
 8002016:	b29a      	uxth	r2, r3
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002020:	3b01      	subs	r3, #1
 8002022:	b29a      	uxth	r2, r3
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800202c:	b29b      	uxth	r3, r3
 800202e:	2b00      	cmp	r3, #0
 8002030:	d034      	beq.n	800209c <HAL_I2C_Mem_Write+0x1c8>
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002036:	2b00      	cmp	r3, #0
 8002038:	d130      	bne.n	800209c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800203a:	697b      	ldr	r3, [r7, #20]
 800203c:	9300      	str	r3, [sp, #0]
 800203e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002040:	2200      	movs	r2, #0
 8002042:	2180      	movs	r1, #128	; 0x80
 8002044:	68f8      	ldr	r0, [r7, #12]
 8002046:	f000 fa3f 	bl	80024c8 <I2C_WaitOnFlagUntilTimeout>
 800204a:	4603      	mov	r3, r0
 800204c:	2b00      	cmp	r3, #0
 800204e:	d001      	beq.n	8002054 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002050:	2301      	movs	r3, #1
 8002052:	e04d      	b.n	80020f0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002058:	b29b      	uxth	r3, r3
 800205a:	2bff      	cmp	r3, #255	; 0xff
 800205c:	d90e      	bls.n	800207c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	22ff      	movs	r2, #255	; 0xff
 8002062:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002068:	b2da      	uxtb	r2, r3
 800206a:	8979      	ldrh	r1, [r7, #10]
 800206c:	2300      	movs	r3, #0
 800206e:	9300      	str	r3, [sp, #0]
 8002070:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002074:	68f8      	ldr	r0, [r7, #12]
 8002076:	f000 fb49 	bl	800270c <I2C_TransferConfig>
 800207a:	e00f      	b.n	800209c <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002080:	b29a      	uxth	r2, r3
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800208a:	b2da      	uxtb	r2, r3
 800208c:	8979      	ldrh	r1, [r7, #10]
 800208e:	2300      	movs	r3, #0
 8002090:	9300      	str	r3, [sp, #0]
 8002092:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002096:	68f8      	ldr	r0, [r7, #12]
 8002098:	f000 fb38 	bl	800270c <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020a0:	b29b      	uxth	r3, r3
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d19e      	bne.n	8001fe4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80020a6:	697a      	ldr	r2, [r7, #20]
 80020a8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80020aa:	68f8      	ldr	r0, [r7, #12]
 80020ac:	f000 fa8c 	bl	80025c8 <I2C_WaitOnSTOPFlagUntilTimeout>
 80020b0:	4603      	mov	r3, r0
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d001      	beq.n	80020ba <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80020b6:	2301      	movs	r3, #1
 80020b8:	e01a      	b.n	80020f0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	2220      	movs	r2, #32
 80020c0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	6859      	ldr	r1, [r3, #4]
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	681a      	ldr	r2, [r3, #0]
 80020cc:	4b0a      	ldr	r3, [pc, #40]	; (80020f8 <HAL_I2C_Mem_Write+0x224>)
 80020ce:	400b      	ands	r3, r1
 80020d0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	2220      	movs	r2, #32
 80020d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	2200      	movs	r2, #0
 80020de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	2200      	movs	r2, #0
 80020e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80020ea:	2300      	movs	r3, #0
 80020ec:	e000      	b.n	80020f0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80020ee:	2302      	movs	r3, #2
  }
}
 80020f0:	4618      	mov	r0, r3
 80020f2:	3718      	adds	r7, #24
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bd80      	pop	{r7, pc}
 80020f8:	fe00e800 	.word	0xfe00e800

080020fc <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b088      	sub	sp, #32
 8002100:	af02      	add	r7, sp, #8
 8002102:	60f8      	str	r0, [r7, #12]
 8002104:	4608      	mov	r0, r1
 8002106:	4611      	mov	r1, r2
 8002108:	461a      	mov	r2, r3
 800210a:	4603      	mov	r3, r0
 800210c:	817b      	strh	r3, [r7, #10]
 800210e:	460b      	mov	r3, r1
 8002110:	813b      	strh	r3, [r7, #8]
 8002112:	4613      	mov	r3, r2
 8002114:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800211c:	b2db      	uxtb	r3, r3
 800211e:	2b20      	cmp	r3, #32
 8002120:	f040 80fd 	bne.w	800231e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002124:	6a3b      	ldr	r3, [r7, #32]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d002      	beq.n	8002130 <HAL_I2C_Mem_Read+0x34>
 800212a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800212c:	2b00      	cmp	r3, #0
 800212e:	d105      	bne.n	800213c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002136:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002138:	2301      	movs	r3, #1
 800213a:	e0f1      	b.n	8002320 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002142:	2b01      	cmp	r3, #1
 8002144:	d101      	bne.n	800214a <HAL_I2C_Mem_Read+0x4e>
 8002146:	2302      	movs	r3, #2
 8002148:	e0ea      	b.n	8002320 <HAL_I2C_Mem_Read+0x224>
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	2201      	movs	r2, #1
 800214e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002152:	f7ff fb3f 	bl	80017d4 <HAL_GetTick>
 8002156:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002158:	697b      	ldr	r3, [r7, #20]
 800215a:	9300      	str	r3, [sp, #0]
 800215c:	2319      	movs	r3, #25
 800215e:	2201      	movs	r2, #1
 8002160:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002164:	68f8      	ldr	r0, [r7, #12]
 8002166:	f000 f9af 	bl	80024c8 <I2C_WaitOnFlagUntilTimeout>
 800216a:	4603      	mov	r3, r0
 800216c:	2b00      	cmp	r3, #0
 800216e:	d001      	beq.n	8002174 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002170:	2301      	movs	r3, #1
 8002172:	e0d5      	b.n	8002320 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	2222      	movs	r2, #34	; 0x22
 8002178:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	2240      	movs	r2, #64	; 0x40
 8002180:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	2200      	movs	r2, #0
 8002188:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	6a3a      	ldr	r2, [r7, #32]
 800218e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002194:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	2200      	movs	r2, #0
 800219a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800219c:	88f8      	ldrh	r0, [r7, #6]
 800219e:	893a      	ldrh	r2, [r7, #8]
 80021a0:	8979      	ldrh	r1, [r7, #10]
 80021a2:	697b      	ldr	r3, [r7, #20]
 80021a4:	9301      	str	r3, [sp, #4]
 80021a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021a8:	9300      	str	r3, [sp, #0]
 80021aa:	4603      	mov	r3, r0
 80021ac:	68f8      	ldr	r0, [r7, #12]
 80021ae:	f000 f913 	bl	80023d8 <I2C_RequestMemoryRead>
 80021b2:	4603      	mov	r3, r0
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d005      	beq.n	80021c4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	2200      	movs	r2, #0
 80021bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80021c0:	2301      	movs	r3, #1
 80021c2:	e0ad      	b.n	8002320 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021c8:	b29b      	uxth	r3, r3
 80021ca:	2bff      	cmp	r3, #255	; 0xff
 80021cc:	d90e      	bls.n	80021ec <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	22ff      	movs	r2, #255	; 0xff
 80021d2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021d8:	b2da      	uxtb	r2, r3
 80021da:	8979      	ldrh	r1, [r7, #10]
 80021dc:	4b52      	ldr	r3, [pc, #328]	; (8002328 <HAL_I2C_Mem_Read+0x22c>)
 80021de:	9300      	str	r3, [sp, #0]
 80021e0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80021e4:	68f8      	ldr	r0, [r7, #12]
 80021e6:	f000 fa91 	bl	800270c <I2C_TransferConfig>
 80021ea:	e00f      	b.n	800220c <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021f0:	b29a      	uxth	r2, r3
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021fa:	b2da      	uxtb	r2, r3
 80021fc:	8979      	ldrh	r1, [r7, #10]
 80021fe:	4b4a      	ldr	r3, [pc, #296]	; (8002328 <HAL_I2C_Mem_Read+0x22c>)
 8002200:	9300      	str	r3, [sp, #0]
 8002202:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002206:	68f8      	ldr	r0, [r7, #12]
 8002208:	f000 fa80 	bl	800270c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800220c:	697b      	ldr	r3, [r7, #20]
 800220e:	9300      	str	r3, [sp, #0]
 8002210:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002212:	2200      	movs	r2, #0
 8002214:	2104      	movs	r1, #4
 8002216:	68f8      	ldr	r0, [r7, #12]
 8002218:	f000 f956 	bl	80024c8 <I2C_WaitOnFlagUntilTimeout>
 800221c:	4603      	mov	r3, r0
 800221e:	2b00      	cmp	r3, #0
 8002220:	d001      	beq.n	8002226 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002222:	2301      	movs	r3, #1
 8002224:	e07c      	b.n	8002320 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002230:	b2d2      	uxtb	r2, r2
 8002232:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002238:	1c5a      	adds	r2, r3, #1
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002242:	3b01      	subs	r3, #1
 8002244:	b29a      	uxth	r2, r3
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800224e:	b29b      	uxth	r3, r3
 8002250:	3b01      	subs	r3, #1
 8002252:	b29a      	uxth	r2, r3
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800225c:	b29b      	uxth	r3, r3
 800225e:	2b00      	cmp	r3, #0
 8002260:	d034      	beq.n	80022cc <HAL_I2C_Mem_Read+0x1d0>
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002266:	2b00      	cmp	r3, #0
 8002268:	d130      	bne.n	80022cc <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800226a:	697b      	ldr	r3, [r7, #20]
 800226c:	9300      	str	r3, [sp, #0]
 800226e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002270:	2200      	movs	r2, #0
 8002272:	2180      	movs	r1, #128	; 0x80
 8002274:	68f8      	ldr	r0, [r7, #12]
 8002276:	f000 f927 	bl	80024c8 <I2C_WaitOnFlagUntilTimeout>
 800227a:	4603      	mov	r3, r0
 800227c:	2b00      	cmp	r3, #0
 800227e:	d001      	beq.n	8002284 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002280:	2301      	movs	r3, #1
 8002282:	e04d      	b.n	8002320 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002288:	b29b      	uxth	r3, r3
 800228a:	2bff      	cmp	r3, #255	; 0xff
 800228c:	d90e      	bls.n	80022ac <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	22ff      	movs	r2, #255	; 0xff
 8002292:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002298:	b2da      	uxtb	r2, r3
 800229a:	8979      	ldrh	r1, [r7, #10]
 800229c:	2300      	movs	r3, #0
 800229e:	9300      	str	r3, [sp, #0]
 80022a0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80022a4:	68f8      	ldr	r0, [r7, #12]
 80022a6:	f000 fa31 	bl	800270c <I2C_TransferConfig>
 80022aa:	e00f      	b.n	80022cc <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022b0:	b29a      	uxth	r2, r3
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022ba:	b2da      	uxtb	r2, r3
 80022bc:	8979      	ldrh	r1, [r7, #10]
 80022be:	2300      	movs	r3, #0
 80022c0:	9300      	str	r3, [sp, #0]
 80022c2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80022c6:	68f8      	ldr	r0, [r7, #12]
 80022c8:	f000 fa20 	bl	800270c <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022d0:	b29b      	uxth	r3, r3
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d19a      	bne.n	800220c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80022d6:	697a      	ldr	r2, [r7, #20]
 80022d8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80022da:	68f8      	ldr	r0, [r7, #12]
 80022dc:	f000 f974 	bl	80025c8 <I2C_WaitOnSTOPFlagUntilTimeout>
 80022e0:	4603      	mov	r3, r0
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d001      	beq.n	80022ea <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80022e6:	2301      	movs	r3, #1
 80022e8:	e01a      	b.n	8002320 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	2220      	movs	r2, #32
 80022f0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	6859      	ldr	r1, [r3, #4]
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	681a      	ldr	r2, [r3, #0]
 80022fc:	4b0b      	ldr	r3, [pc, #44]	; (800232c <HAL_I2C_Mem_Read+0x230>)
 80022fe:	400b      	ands	r3, r1
 8002300:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	2220      	movs	r2, #32
 8002306:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	2200      	movs	r2, #0
 800230e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	2200      	movs	r2, #0
 8002316:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800231a:	2300      	movs	r3, #0
 800231c:	e000      	b.n	8002320 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800231e:	2302      	movs	r3, #2
  }
}
 8002320:	4618      	mov	r0, r3
 8002322:	3718      	adds	r7, #24
 8002324:	46bd      	mov	sp, r7
 8002326:	bd80      	pop	{r7, pc}
 8002328:	80002400 	.word	0x80002400
 800232c:	fe00e800 	.word	0xfe00e800

08002330 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b086      	sub	sp, #24
 8002334:	af02      	add	r7, sp, #8
 8002336:	60f8      	str	r0, [r7, #12]
 8002338:	4608      	mov	r0, r1
 800233a:	4611      	mov	r1, r2
 800233c:	461a      	mov	r2, r3
 800233e:	4603      	mov	r3, r0
 8002340:	817b      	strh	r3, [r7, #10]
 8002342:	460b      	mov	r3, r1
 8002344:	813b      	strh	r3, [r7, #8]
 8002346:	4613      	mov	r3, r2
 8002348:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800234a:	88fb      	ldrh	r3, [r7, #6]
 800234c:	b2da      	uxtb	r2, r3
 800234e:	8979      	ldrh	r1, [r7, #10]
 8002350:	4b20      	ldr	r3, [pc, #128]	; (80023d4 <I2C_RequestMemoryWrite+0xa4>)
 8002352:	9300      	str	r3, [sp, #0]
 8002354:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002358:	68f8      	ldr	r0, [r7, #12]
 800235a:	f000 f9d7 	bl	800270c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800235e:	69fa      	ldr	r2, [r7, #28]
 8002360:	69b9      	ldr	r1, [r7, #24]
 8002362:	68f8      	ldr	r0, [r7, #12]
 8002364:	f000 f8f0 	bl	8002548 <I2C_WaitOnTXISFlagUntilTimeout>
 8002368:	4603      	mov	r3, r0
 800236a:	2b00      	cmp	r3, #0
 800236c:	d001      	beq.n	8002372 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800236e:	2301      	movs	r3, #1
 8002370:	e02c      	b.n	80023cc <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002372:	88fb      	ldrh	r3, [r7, #6]
 8002374:	2b01      	cmp	r3, #1
 8002376:	d105      	bne.n	8002384 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002378:	893b      	ldrh	r3, [r7, #8]
 800237a:	b2da      	uxtb	r2, r3
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	629a      	str	r2, [r3, #40]	; 0x28
 8002382:	e015      	b.n	80023b0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002384:	893b      	ldrh	r3, [r7, #8]
 8002386:	0a1b      	lsrs	r3, r3, #8
 8002388:	b29b      	uxth	r3, r3
 800238a:	b2da      	uxtb	r2, r3
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002392:	69fa      	ldr	r2, [r7, #28]
 8002394:	69b9      	ldr	r1, [r7, #24]
 8002396:	68f8      	ldr	r0, [r7, #12]
 8002398:	f000 f8d6 	bl	8002548 <I2C_WaitOnTXISFlagUntilTimeout>
 800239c:	4603      	mov	r3, r0
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d001      	beq.n	80023a6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80023a2:	2301      	movs	r3, #1
 80023a4:	e012      	b.n	80023cc <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80023a6:	893b      	ldrh	r3, [r7, #8]
 80023a8:	b2da      	uxtb	r2, r3
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80023b0:	69fb      	ldr	r3, [r7, #28]
 80023b2:	9300      	str	r3, [sp, #0]
 80023b4:	69bb      	ldr	r3, [r7, #24]
 80023b6:	2200      	movs	r2, #0
 80023b8:	2180      	movs	r1, #128	; 0x80
 80023ba:	68f8      	ldr	r0, [r7, #12]
 80023bc:	f000 f884 	bl	80024c8 <I2C_WaitOnFlagUntilTimeout>
 80023c0:	4603      	mov	r3, r0
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d001      	beq.n	80023ca <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80023c6:	2301      	movs	r3, #1
 80023c8:	e000      	b.n	80023cc <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80023ca:	2300      	movs	r3, #0
}
 80023cc:	4618      	mov	r0, r3
 80023ce:	3710      	adds	r7, #16
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bd80      	pop	{r7, pc}
 80023d4:	80002000 	.word	0x80002000

080023d8 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b086      	sub	sp, #24
 80023dc:	af02      	add	r7, sp, #8
 80023de:	60f8      	str	r0, [r7, #12]
 80023e0:	4608      	mov	r0, r1
 80023e2:	4611      	mov	r1, r2
 80023e4:	461a      	mov	r2, r3
 80023e6:	4603      	mov	r3, r0
 80023e8:	817b      	strh	r3, [r7, #10]
 80023ea:	460b      	mov	r3, r1
 80023ec:	813b      	strh	r3, [r7, #8]
 80023ee:	4613      	mov	r3, r2
 80023f0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80023f2:	88fb      	ldrh	r3, [r7, #6]
 80023f4:	b2da      	uxtb	r2, r3
 80023f6:	8979      	ldrh	r1, [r7, #10]
 80023f8:	4b20      	ldr	r3, [pc, #128]	; (800247c <I2C_RequestMemoryRead+0xa4>)
 80023fa:	9300      	str	r3, [sp, #0]
 80023fc:	2300      	movs	r3, #0
 80023fe:	68f8      	ldr	r0, [r7, #12]
 8002400:	f000 f984 	bl	800270c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002404:	69fa      	ldr	r2, [r7, #28]
 8002406:	69b9      	ldr	r1, [r7, #24]
 8002408:	68f8      	ldr	r0, [r7, #12]
 800240a:	f000 f89d 	bl	8002548 <I2C_WaitOnTXISFlagUntilTimeout>
 800240e:	4603      	mov	r3, r0
 8002410:	2b00      	cmp	r3, #0
 8002412:	d001      	beq.n	8002418 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002414:	2301      	movs	r3, #1
 8002416:	e02c      	b.n	8002472 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002418:	88fb      	ldrh	r3, [r7, #6]
 800241a:	2b01      	cmp	r3, #1
 800241c:	d105      	bne.n	800242a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800241e:	893b      	ldrh	r3, [r7, #8]
 8002420:	b2da      	uxtb	r2, r3
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	629a      	str	r2, [r3, #40]	; 0x28
 8002428:	e015      	b.n	8002456 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800242a:	893b      	ldrh	r3, [r7, #8]
 800242c:	0a1b      	lsrs	r3, r3, #8
 800242e:	b29b      	uxth	r3, r3
 8002430:	b2da      	uxtb	r2, r3
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002438:	69fa      	ldr	r2, [r7, #28]
 800243a:	69b9      	ldr	r1, [r7, #24]
 800243c:	68f8      	ldr	r0, [r7, #12]
 800243e:	f000 f883 	bl	8002548 <I2C_WaitOnTXISFlagUntilTimeout>
 8002442:	4603      	mov	r3, r0
 8002444:	2b00      	cmp	r3, #0
 8002446:	d001      	beq.n	800244c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002448:	2301      	movs	r3, #1
 800244a:	e012      	b.n	8002472 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800244c:	893b      	ldrh	r3, [r7, #8]
 800244e:	b2da      	uxtb	r2, r3
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002456:	69fb      	ldr	r3, [r7, #28]
 8002458:	9300      	str	r3, [sp, #0]
 800245a:	69bb      	ldr	r3, [r7, #24]
 800245c:	2200      	movs	r2, #0
 800245e:	2140      	movs	r1, #64	; 0x40
 8002460:	68f8      	ldr	r0, [r7, #12]
 8002462:	f000 f831 	bl	80024c8 <I2C_WaitOnFlagUntilTimeout>
 8002466:	4603      	mov	r3, r0
 8002468:	2b00      	cmp	r3, #0
 800246a:	d001      	beq.n	8002470 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800246c:	2301      	movs	r3, #1
 800246e:	e000      	b.n	8002472 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002470:	2300      	movs	r3, #0
}
 8002472:	4618      	mov	r0, r3
 8002474:	3710      	adds	r7, #16
 8002476:	46bd      	mov	sp, r7
 8002478:	bd80      	pop	{r7, pc}
 800247a:	bf00      	nop
 800247c:	80002000 	.word	0x80002000

08002480 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002480:	b480      	push	{r7}
 8002482:	b083      	sub	sp, #12
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	699b      	ldr	r3, [r3, #24]
 800248e:	f003 0302 	and.w	r3, r3, #2
 8002492:	2b02      	cmp	r3, #2
 8002494:	d103      	bne.n	800249e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	2200      	movs	r2, #0
 800249c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	699b      	ldr	r3, [r3, #24]
 80024a4:	f003 0301 	and.w	r3, r3, #1
 80024a8:	2b01      	cmp	r3, #1
 80024aa:	d007      	beq.n	80024bc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	699a      	ldr	r2, [r3, #24]
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f042 0201 	orr.w	r2, r2, #1
 80024ba:	619a      	str	r2, [r3, #24]
  }
}
 80024bc:	bf00      	nop
 80024be:	370c      	adds	r7, #12
 80024c0:	46bd      	mov	sp, r7
 80024c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c6:	4770      	bx	lr

080024c8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b084      	sub	sp, #16
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	60f8      	str	r0, [r7, #12]
 80024d0:	60b9      	str	r1, [r7, #8]
 80024d2:	603b      	str	r3, [r7, #0]
 80024d4:	4613      	mov	r3, r2
 80024d6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80024d8:	e022      	b.n	8002520 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024e0:	d01e      	beq.n	8002520 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024e2:	f7ff f977 	bl	80017d4 <HAL_GetTick>
 80024e6:	4602      	mov	r2, r0
 80024e8:	69bb      	ldr	r3, [r7, #24]
 80024ea:	1ad3      	subs	r3, r2, r3
 80024ec:	683a      	ldr	r2, [r7, #0]
 80024ee:	429a      	cmp	r2, r3
 80024f0:	d302      	bcc.n	80024f8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d113      	bne.n	8002520 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024fc:	f043 0220 	orr.w	r2, r3, #32
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	2220      	movs	r2, #32
 8002508:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	2200      	movs	r2, #0
 8002510:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	2200      	movs	r2, #0
 8002518:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800251c:	2301      	movs	r3, #1
 800251e:	e00f      	b.n	8002540 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	699a      	ldr	r2, [r3, #24]
 8002526:	68bb      	ldr	r3, [r7, #8]
 8002528:	4013      	ands	r3, r2
 800252a:	68ba      	ldr	r2, [r7, #8]
 800252c:	429a      	cmp	r2, r3
 800252e:	bf0c      	ite	eq
 8002530:	2301      	moveq	r3, #1
 8002532:	2300      	movne	r3, #0
 8002534:	b2db      	uxtb	r3, r3
 8002536:	461a      	mov	r2, r3
 8002538:	79fb      	ldrb	r3, [r7, #7]
 800253a:	429a      	cmp	r2, r3
 800253c:	d0cd      	beq.n	80024da <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800253e:	2300      	movs	r3, #0
}
 8002540:	4618      	mov	r0, r3
 8002542:	3710      	adds	r7, #16
 8002544:	46bd      	mov	sp, r7
 8002546:	bd80      	pop	{r7, pc}

08002548 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b084      	sub	sp, #16
 800254c:	af00      	add	r7, sp, #0
 800254e:	60f8      	str	r0, [r7, #12]
 8002550:	60b9      	str	r1, [r7, #8]
 8002552:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002554:	e02c      	b.n	80025b0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002556:	687a      	ldr	r2, [r7, #4]
 8002558:	68b9      	ldr	r1, [r7, #8]
 800255a:	68f8      	ldr	r0, [r7, #12]
 800255c:	f000 f870 	bl	8002640 <I2C_IsAcknowledgeFailed>
 8002560:	4603      	mov	r3, r0
 8002562:	2b00      	cmp	r3, #0
 8002564:	d001      	beq.n	800256a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002566:	2301      	movs	r3, #1
 8002568:	e02a      	b.n	80025c0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800256a:	68bb      	ldr	r3, [r7, #8]
 800256c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002570:	d01e      	beq.n	80025b0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002572:	f7ff f92f 	bl	80017d4 <HAL_GetTick>
 8002576:	4602      	mov	r2, r0
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	1ad3      	subs	r3, r2, r3
 800257c:	68ba      	ldr	r2, [r7, #8]
 800257e:	429a      	cmp	r2, r3
 8002580:	d302      	bcc.n	8002588 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002582:	68bb      	ldr	r3, [r7, #8]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d113      	bne.n	80025b0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800258c:	f043 0220 	orr.w	r2, r3, #32
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	2220      	movs	r2, #32
 8002598:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	2200      	movs	r2, #0
 80025a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	2200      	movs	r2, #0
 80025a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80025ac:	2301      	movs	r3, #1
 80025ae:	e007      	b.n	80025c0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	699b      	ldr	r3, [r3, #24]
 80025b6:	f003 0302 	and.w	r3, r3, #2
 80025ba:	2b02      	cmp	r3, #2
 80025bc:	d1cb      	bne.n	8002556 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80025be:	2300      	movs	r3, #0
}
 80025c0:	4618      	mov	r0, r3
 80025c2:	3710      	adds	r7, #16
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bd80      	pop	{r7, pc}

080025c8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b084      	sub	sp, #16
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	60f8      	str	r0, [r7, #12]
 80025d0:	60b9      	str	r1, [r7, #8]
 80025d2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80025d4:	e028      	b.n	8002628 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80025d6:	687a      	ldr	r2, [r7, #4]
 80025d8:	68b9      	ldr	r1, [r7, #8]
 80025da:	68f8      	ldr	r0, [r7, #12]
 80025dc:	f000 f830 	bl	8002640 <I2C_IsAcknowledgeFailed>
 80025e0:	4603      	mov	r3, r0
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d001      	beq.n	80025ea <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80025e6:	2301      	movs	r3, #1
 80025e8:	e026      	b.n	8002638 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025ea:	f7ff f8f3 	bl	80017d4 <HAL_GetTick>
 80025ee:	4602      	mov	r2, r0
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	1ad3      	subs	r3, r2, r3
 80025f4:	68ba      	ldr	r2, [r7, #8]
 80025f6:	429a      	cmp	r2, r3
 80025f8:	d302      	bcc.n	8002600 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80025fa:	68bb      	ldr	r3, [r7, #8]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d113      	bne.n	8002628 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002604:	f043 0220 	orr.w	r2, r3, #32
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	2220      	movs	r2, #32
 8002610:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	2200      	movs	r2, #0
 8002618:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	2200      	movs	r2, #0
 8002620:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002624:	2301      	movs	r3, #1
 8002626:	e007      	b.n	8002638 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	699b      	ldr	r3, [r3, #24]
 800262e:	f003 0320 	and.w	r3, r3, #32
 8002632:	2b20      	cmp	r3, #32
 8002634:	d1cf      	bne.n	80025d6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002636:	2300      	movs	r3, #0
}
 8002638:	4618      	mov	r0, r3
 800263a:	3710      	adds	r7, #16
 800263c:	46bd      	mov	sp, r7
 800263e:	bd80      	pop	{r7, pc}

08002640 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b084      	sub	sp, #16
 8002644:	af00      	add	r7, sp, #0
 8002646:	60f8      	str	r0, [r7, #12]
 8002648:	60b9      	str	r1, [r7, #8]
 800264a:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	699b      	ldr	r3, [r3, #24]
 8002652:	f003 0310 	and.w	r3, r3, #16
 8002656:	2b10      	cmp	r3, #16
 8002658:	d151      	bne.n	80026fe <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800265a:	e022      	b.n	80026a2 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800265c:	68bb      	ldr	r3, [r7, #8]
 800265e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002662:	d01e      	beq.n	80026a2 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002664:	f7ff f8b6 	bl	80017d4 <HAL_GetTick>
 8002668:	4602      	mov	r2, r0
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	1ad3      	subs	r3, r2, r3
 800266e:	68ba      	ldr	r2, [r7, #8]
 8002670:	429a      	cmp	r2, r3
 8002672:	d302      	bcc.n	800267a <I2C_IsAcknowledgeFailed+0x3a>
 8002674:	68bb      	ldr	r3, [r7, #8]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d113      	bne.n	80026a2 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800267e:	f043 0220 	orr.w	r2, r3, #32
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	2220      	movs	r2, #32
 800268a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	2200      	movs	r2, #0
 8002692:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	2200      	movs	r2, #0
 800269a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800269e:	2301      	movs	r3, #1
 80026a0:	e02e      	b.n	8002700 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	699b      	ldr	r3, [r3, #24]
 80026a8:	f003 0320 	and.w	r3, r3, #32
 80026ac:	2b20      	cmp	r3, #32
 80026ae:	d1d5      	bne.n	800265c <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	2210      	movs	r2, #16
 80026b6:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	2220      	movs	r2, #32
 80026be:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80026c0:	68f8      	ldr	r0, [r7, #12]
 80026c2:	f7ff fedd 	bl	8002480 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	6859      	ldr	r1, [r3, #4]
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681a      	ldr	r2, [r3, #0]
 80026d0:	4b0d      	ldr	r3, [pc, #52]	; (8002708 <I2C_IsAcknowledgeFailed+0xc8>)
 80026d2:	400b      	ands	r3, r1
 80026d4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026da:	f043 0204 	orr.w	r2, r3, #4
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	2220      	movs	r2, #32
 80026e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	2200      	movs	r2, #0
 80026ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	2200      	movs	r2, #0
 80026f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80026fa:	2301      	movs	r3, #1
 80026fc:	e000      	b.n	8002700 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 80026fe:	2300      	movs	r3, #0
}
 8002700:	4618      	mov	r0, r3
 8002702:	3710      	adds	r7, #16
 8002704:	46bd      	mov	sp, r7
 8002706:	bd80      	pop	{r7, pc}
 8002708:	fe00e800 	.word	0xfe00e800

0800270c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800270c:	b480      	push	{r7}
 800270e:	b085      	sub	sp, #20
 8002710:	af00      	add	r7, sp, #0
 8002712:	60f8      	str	r0, [r7, #12]
 8002714:	607b      	str	r3, [r7, #4]
 8002716:	460b      	mov	r3, r1
 8002718:	817b      	strh	r3, [r7, #10]
 800271a:	4613      	mov	r3, r2
 800271c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	685a      	ldr	r2, [r3, #4]
 8002724:	69bb      	ldr	r3, [r7, #24]
 8002726:	0d5b      	lsrs	r3, r3, #21
 8002728:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800272c:	4b0d      	ldr	r3, [pc, #52]	; (8002764 <I2C_TransferConfig+0x58>)
 800272e:	430b      	orrs	r3, r1
 8002730:	43db      	mvns	r3, r3
 8002732:	ea02 0103 	and.w	r1, r2, r3
 8002736:	897b      	ldrh	r3, [r7, #10]
 8002738:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800273c:	7a7b      	ldrb	r3, [r7, #9]
 800273e:	041b      	lsls	r3, r3, #16
 8002740:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002744:	431a      	orrs	r2, r3
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	431a      	orrs	r2, r3
 800274a:	69bb      	ldr	r3, [r7, #24]
 800274c:	431a      	orrs	r2, r3
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	430a      	orrs	r2, r1
 8002754:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8002756:	bf00      	nop
 8002758:	3714      	adds	r7, #20
 800275a:	46bd      	mov	sp, r7
 800275c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002760:	4770      	bx	lr
 8002762:	bf00      	nop
 8002764:	03ff63ff 	.word	0x03ff63ff

08002768 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002768:	b480      	push	{r7}
 800276a:	b083      	sub	sp, #12
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
 8002770:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002778:	b2db      	uxtb	r3, r3
 800277a:	2b20      	cmp	r3, #32
 800277c:	d138      	bne.n	80027f0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002784:	2b01      	cmp	r3, #1
 8002786:	d101      	bne.n	800278c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002788:	2302      	movs	r3, #2
 800278a:	e032      	b.n	80027f2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2201      	movs	r2, #1
 8002790:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2224      	movs	r2, #36	; 0x24
 8002798:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	681a      	ldr	r2, [r3, #0]
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f022 0201 	bic.w	r2, r2, #1
 80027aa:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	681a      	ldr	r2, [r3, #0]
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80027ba:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	6819      	ldr	r1, [r3, #0]
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	683a      	ldr	r2, [r7, #0]
 80027c8:	430a      	orrs	r2, r1
 80027ca:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	681a      	ldr	r2, [r3, #0]
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f042 0201 	orr.w	r2, r2, #1
 80027da:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2220      	movs	r2, #32
 80027e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2200      	movs	r2, #0
 80027e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80027ec:	2300      	movs	r3, #0
 80027ee:	e000      	b.n	80027f2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80027f0:	2302      	movs	r3, #2
  }
}
 80027f2:	4618      	mov	r0, r3
 80027f4:	370c      	adds	r7, #12
 80027f6:	46bd      	mov	sp, r7
 80027f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fc:	4770      	bx	lr

080027fe <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80027fe:	b480      	push	{r7}
 8002800:	b085      	sub	sp, #20
 8002802:	af00      	add	r7, sp, #0
 8002804:	6078      	str	r0, [r7, #4]
 8002806:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800280e:	b2db      	uxtb	r3, r3
 8002810:	2b20      	cmp	r3, #32
 8002812:	d139      	bne.n	8002888 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800281a:	2b01      	cmp	r3, #1
 800281c:	d101      	bne.n	8002822 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800281e:	2302      	movs	r3, #2
 8002820:	e033      	b.n	800288a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2201      	movs	r2, #1
 8002826:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2224      	movs	r2, #36	; 0x24
 800282e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	681a      	ldr	r2, [r3, #0]
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f022 0201 	bic.w	r2, r2, #1
 8002840:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002850:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	021b      	lsls	r3, r3, #8
 8002856:	68fa      	ldr	r2, [r7, #12]
 8002858:	4313      	orrs	r3, r2
 800285a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	68fa      	ldr	r2, [r7, #12]
 8002862:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	681a      	ldr	r2, [r3, #0]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f042 0201 	orr.w	r2, r2, #1
 8002872:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2220      	movs	r2, #32
 8002878:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2200      	movs	r2, #0
 8002880:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002884:	2300      	movs	r3, #0
 8002886:	e000      	b.n	800288a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002888:	2302      	movs	r3, #2
  }
}
 800288a:	4618      	mov	r0, r3
 800288c:	3714      	adds	r7, #20
 800288e:	46bd      	mov	sp, r7
 8002890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002894:	4770      	bx	lr
	...

08002898 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8002898:	b480      	push	{r7}
 800289a:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 800289c:	4b05      	ldr	r3, [pc, #20]	; (80028b4 <HAL_ICACHE_Enable+0x1c>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4a04      	ldr	r2, [pc, #16]	; (80028b4 <HAL_ICACHE_Enable+0x1c>)
 80028a2:	f043 0301 	orr.w	r3, r3, #1
 80028a6:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80028a8:	2300      	movs	r3, #0
}
 80028aa:	4618      	mov	r0, r3
 80028ac:	46bd      	mov	sp, r7
 80028ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b2:	4770      	bx	lr
 80028b4:	40030400 	.word	0x40030400

080028b8 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE0, PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80028b8:	b480      	push	{r7}
 80028ba:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 80028bc:	4b04      	ldr	r3, [pc, #16]	; (80028d0 <HAL_PWREx_GetVoltageRange+0x18>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 80028c4:	4618      	mov	r0, r3
 80028c6:	46bd      	mov	sp, r7
 80028c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028cc:	4770      	bx	lr
 80028ce:	bf00      	nop
 80028d0:	40007000 	.word	0x40007000

080028d4 <HAL_PWREx_ControlVoltageScaling>:
  * @note  The VOS shall NOT be changed in LP Mode of if LP mode is asked.
  * @note  The function shall not be called in Low-power run mode (meaningless and misleading).
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b084      	sub	sp, #16
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  uint32_t vos_old = READ_BIT(PWR->CR1, PWR_CR1_VOS);
 80028dc:	4b27      	ldr	r3, [pc, #156]	; (800297c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80028e4:	60bb      	str	r3, [r7, #8]

  /* VOS shall not be changed in LP Mode            */
  /* or if LP Mode is asked but not yet established */
  if (HAL_PWREx_SMPS_GetEffectiveMode() == PWR_SMPS_LOW_POWER)
 80028e6:	f000 f871 	bl	80029cc <HAL_PWREx_SMPS_GetEffectiveMode>
 80028ea:	4603      	mov	r3, r0
 80028ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80028f0:	d101      	bne.n	80028f6 <HAL_PWREx_ControlVoltageScaling+0x22>
  {
    return HAL_ERROR;
 80028f2:	2301      	movs	r3, #1
 80028f4:	e03e      	b.n	8002974 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }
  if (READ_BIT(PWR->CR4, PWR_CR4_SMPSLPEN) == PWR_CR4_SMPSLPEN)
 80028f6:	4b21      	ldr	r3, [pc, #132]	; (800297c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80028f8:	68db      	ldr	r3, [r3, #12]
 80028fa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80028fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002902:	d101      	bne.n	8002908 <HAL_PWREx_ControlVoltageScaling+0x34>
  {
    return HAL_ERROR;
 8002904:	2301      	movs	r3, #1
 8002906:	e035      	b.n	8002974 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8002908:	68ba      	ldr	r2, [r7, #8]
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	429a      	cmp	r2, r3
 800290e:	d101      	bne.n	8002914 <HAL_PWREx_ControlVoltageScaling+0x40>
  {
    return HAL_OK;
 8002910:	2300      	movs	r3, #0
 8002912:	e02f      	b.n	8002974 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8002914:	4b19      	ldr	r3, [pc, #100]	; (800297c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800291c:	4917      	ldr	r1, [pc, #92]	; (800297c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	4313      	orrs	r3, r2
 8002922:	600b      	str	r3, [r1, #0]

  /* Wait until VOSF is cleared */
  /* and at least one iteration loop */
  wait_loop_index = ((PWR_VOSF_SETTING_DELAY_VALUE * (SystemCoreClock / 100000U)) / 10U) + 1U;
 8002924:	4b16      	ldr	r3, [pc, #88]	; (8002980 <HAL_PWREx_ControlVoltageScaling+0xac>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	095b      	lsrs	r3, r3, #5
 800292a:	4a16      	ldr	r2, [pc, #88]	; (8002984 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 800292c:	fba2 2303 	umull	r2, r3, r2, r3
 8002930:	09db      	lsrs	r3, r3, #7
 8002932:	2232      	movs	r2, #50	; 0x32
 8002934:	fb02 f303 	mul.w	r3, r2, r3
 8002938:	4a13      	ldr	r2, [pc, #76]	; (8002988 <HAL_PWREx_ControlVoltageScaling+0xb4>)
 800293a:	fba2 2303 	umull	r2, r3, r2, r3
 800293e:	08db      	lsrs	r3, r3, #3
 8002940:	3301      	adds	r3, #1
 8002942:	60fb      	str	r3, [r7, #12]

  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002944:	e002      	b.n	800294c <HAL_PWREx_ControlVoltageScaling+0x78>
  {
    wait_loop_index--;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	3b01      	subs	r3, #1
 800294a:	60fb      	str	r3, [r7, #12]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800294c:	4b0b      	ldr	r3, [pc, #44]	; (800297c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800294e:	695b      	ldr	r3, [r3, #20]
 8002950:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002954:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002958:	d102      	bne.n	8002960 <HAL_PWREx_ControlVoltageScaling+0x8c>
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d1f2      	bne.n	8002946 <HAL_PWREx_ControlVoltageScaling+0x72>
  }

  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002960:	4b06      	ldr	r3, [pc, #24]	; (800297c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002962:	695b      	ldr	r3, [r3, #20]
 8002964:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002968:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800296c:	d101      	bne.n	8002972 <HAL_PWREx_ControlVoltageScaling+0x9e>
  {
    return HAL_TIMEOUT;
 800296e:	2303      	movs	r3, #3
 8002970:	e000      	b.n	8002974 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  return HAL_OK;
 8002972:	2300      	movs	r3, #0
}
 8002974:	4618      	mov	r0, r3
 8002976:	3710      	adds	r7, #16
 8002978:	46bd      	mov	sp, r7
 800297a:	bd80      	pop	{r7, pc}
 800297c:	40007000 	.word	0x40007000
 8002980:	20000000 	.word	0x20000000
 8002984:	0a7c5ac5 	.word	0x0a7c5ac5
 8002988:	cccccccd 	.word	0xcccccccd

0800298c <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 800298c:	b480      	push	{r7}
 800298e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8002990:	4b05      	ldr	r3, [pc, #20]	; (80029a8 <HAL_PWREx_EnableVddIO2+0x1c>)
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	4a04      	ldr	r2, [pc, #16]	; (80029a8 <HAL_PWREx_EnableVddIO2+0x1c>)
 8002996:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800299a:	6053      	str	r3, [r2, #4]
}
 800299c:	bf00      	nop
 800299e:	46bd      	mov	sp, r7
 80029a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a4:	4770      	bx	lr
 80029a6:	bf00      	nop
 80029a8:	40007000 	.word	0x40007000

080029ac <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80029ac:	b480      	push	{r7}
 80029ae:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80029b0:	4b05      	ldr	r3, [pc, #20]	; (80029c8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80029b2:	689b      	ldr	r3, [r3, #8]
 80029b4:	4a04      	ldr	r2, [pc, #16]	; (80029c8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80029b6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029ba:	6093      	str	r3, [r2, #8]
}
 80029bc:	bf00      	nop
 80029be:	46bd      	mov	sp, r7
 80029c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c4:	4770      	bx	lr
 80029c6:	bf00      	nop
 80029c8:	40007000 	.word	0x40007000

080029cc <HAL_PWREx_SMPS_GetEffectiveMode>:
  *         @arg @ref PWR_SMPS_HIGH_POWER    SMPS step down converter in high-power mode (default)
  *         @arg @ref PWR_SMPS_LOW_POWER     SMPS step down converter in low-power mode
  *         @arg @ref PWR_SMPS_BYPASS        SMPS step down converter in bypass mode
  */
uint32_t HAL_PWREx_SMPS_GetEffectiveMode(void)
{
 80029cc:	b480      	push	{r7}
 80029ce:	b083      	sub	sp, #12
 80029d0:	af00      	add	r7, sp, #0
  uint32_t mode;
  uint32_t pwr_sr1;

  pwr_sr1 = READ_REG(PWR->SR1);
 80029d2:	4b0f      	ldr	r3, [pc, #60]	; (8002a10 <HAL_PWREx_SMPS_GetEffectiveMode+0x44>)
 80029d4:	691b      	ldr	r3, [r3, #16]
 80029d6:	603b      	str	r3, [r7, #0]
  if (READ_BIT(pwr_sr1, PWR_SR1_SMPSBYPRDY) != 0U)
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d003      	beq.n	80029ea <HAL_PWREx_SMPS_GetEffectiveMode+0x1e>
  {
    mode = PWR_SMPS_BYPASS;
 80029e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80029e6:	607b      	str	r3, [r7, #4]
 80029e8:	e00a      	b.n	8002a00 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else if (READ_BIT(pwr_sr1, PWR_SR1_SMPSHPRDY) == 0U)
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d103      	bne.n	80029fc <HAL_PWREx_SMPS_GetEffectiveMode+0x30>
  {
    mode = PWR_SMPS_LOW_POWER;
 80029f4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80029f8:	607b      	str	r3, [r7, #4]
 80029fa:	e001      	b.n	8002a00 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else
  {
    mode = PWR_SMPS_HIGH_POWER;
 80029fc:	2300      	movs	r3, #0
 80029fe:	607b      	str	r3, [r7, #4]
  }

  return mode;
 8002a00:	687b      	ldr	r3, [r7, #4]
}
 8002a02:	4618      	mov	r0, r3
 8002a04:	370c      	adds	r7, #12
 8002a06:	46bd      	mov	sp, r7
 8002a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0c:	4770      	bx	lr
 8002a0e:	bf00      	nop
 8002a10:	40007000 	.word	0x40007000

08002a14 <HAL_RCC_OscConfig>:
  *         and is updated by this function in case of simple MSI range update when MSI
  *         used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b088      	sub	sp, #32
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d102      	bne.n	8002a28 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002a22:	2301      	movs	r3, #1
 8002a24:	f000 bcd0 	b.w	80033c8 <HAL_RCC_OscConfig+0x9b4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a28:	4ba3      	ldr	r3, [pc, #652]	; (8002cb8 <HAL_RCC_OscConfig+0x2a4>)
 8002a2a:	689b      	ldr	r3, [r3, #8]
 8002a2c:	f003 030c 	and.w	r3, r3, #12
 8002a30:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002a32:	4ba1      	ldr	r3, [pc, #644]	; (8002cb8 <HAL_RCC_OscConfig+0x2a4>)
 8002a34:	68db      	ldr	r3, [r3, #12]
 8002a36:	f003 0303 	and.w	r3, r3, #3
 8002a3a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f003 0310 	and.w	r3, r3, #16
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	f000 80e9 	beq.w	8002c1c <HAL_RCC_OscConfig+0x208>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002a4a:	69bb      	ldr	r3, [r7, #24]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d006      	beq.n	8002a5e <HAL_RCC_OscConfig+0x4a>
 8002a50:	69bb      	ldr	r3, [r7, #24]
 8002a52:	2b0c      	cmp	r3, #12
 8002a54:	f040 8083 	bne.w	8002b5e <HAL_RCC_OscConfig+0x14a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002a58:	697b      	ldr	r3, [r7, #20]
 8002a5a:	2b01      	cmp	r3, #1
 8002a5c:	d17f      	bne.n	8002b5e <HAL_RCC_OscConfig+0x14a>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002a5e:	4b96      	ldr	r3, [pc, #600]	; (8002cb8 <HAL_RCC_OscConfig+0x2a4>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f003 0302 	and.w	r3, r3, #2
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d006      	beq.n	8002a78 <HAL_RCC_OscConfig+0x64>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	69db      	ldr	r3, [r3, #28]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d102      	bne.n	8002a78 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002a72:	2301      	movs	r3, #1
 8002a74:	f000 bca8 	b.w	80033c8 <HAL_RCC_OscConfig+0x9b4>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002a7c:	4b8e      	ldr	r3, [pc, #568]	; (8002cb8 <HAL_RCC_OscConfig+0x2a4>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f003 0308 	and.w	r3, r3, #8
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d004      	beq.n	8002a92 <HAL_RCC_OscConfig+0x7e>
 8002a88:	4b8b      	ldr	r3, [pc, #556]	; (8002cb8 <HAL_RCC_OscConfig+0x2a4>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a90:	e005      	b.n	8002a9e <HAL_RCC_OscConfig+0x8a>
 8002a92:	4b89      	ldr	r3, [pc, #548]	; (8002cb8 <HAL_RCC_OscConfig+0x2a4>)
 8002a94:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a98:	091b      	lsrs	r3, r3, #4
 8002a9a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d224      	bcs.n	8002aec <HAL_RCC_OscConfig+0xd8>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	f000 fe70 	bl	800378c <RCC_SetFlashLatencyFromMSIRange>
 8002aac:	4603      	mov	r3, r0
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d002      	beq.n	8002ab8 <HAL_RCC_OscConfig+0xa4>
          {
            return HAL_ERROR;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	f000 bc88 	b.w	80033c8 <HAL_RCC_OscConfig+0x9b4>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002ab8:	4b7f      	ldr	r3, [pc, #508]	; (8002cb8 <HAL_RCC_OscConfig+0x2a4>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a7e      	ldr	r2, [pc, #504]	; (8002cb8 <HAL_RCC_OscConfig+0x2a4>)
 8002abe:	f043 0308 	orr.w	r3, r3, #8
 8002ac2:	6013      	str	r3, [r2, #0]
 8002ac4:	4b7c      	ldr	r3, [pc, #496]	; (8002cb8 <HAL_RCC_OscConfig+0x2a4>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ad0:	4979      	ldr	r1, [pc, #484]	; (8002cb8 <HAL_RCC_OscConfig+0x2a4>)
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002ad6:	4b78      	ldr	r3, [pc, #480]	; (8002cb8 <HAL_RCC_OscConfig+0x2a4>)
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6a1b      	ldr	r3, [r3, #32]
 8002ae2:	021b      	lsls	r3, r3, #8
 8002ae4:	4974      	ldr	r1, [pc, #464]	; (8002cb8 <HAL_RCC_OscConfig+0x2a4>)
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	604b      	str	r3, [r1, #4]
 8002aea:	e026      	b.n	8002b3a <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002aec:	4b72      	ldr	r3, [pc, #456]	; (8002cb8 <HAL_RCC_OscConfig+0x2a4>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4a71      	ldr	r2, [pc, #452]	; (8002cb8 <HAL_RCC_OscConfig+0x2a4>)
 8002af2:	f043 0308 	orr.w	r3, r3, #8
 8002af6:	6013      	str	r3, [r2, #0]
 8002af8:	4b6f      	ldr	r3, [pc, #444]	; (8002cb8 <HAL_RCC_OscConfig+0x2a4>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b04:	496c      	ldr	r1, [pc, #432]	; (8002cb8 <HAL_RCC_OscConfig+0x2a4>)
 8002b06:	4313      	orrs	r3, r2
 8002b08:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002b0a:	4b6b      	ldr	r3, [pc, #428]	; (8002cb8 <HAL_RCC_OscConfig+0x2a4>)
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6a1b      	ldr	r3, [r3, #32]
 8002b16:	021b      	lsls	r3, r3, #8
 8002b18:	4967      	ldr	r1, [pc, #412]	; (8002cb8 <HAL_RCC_OscConfig+0x2a4>)
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002b1e:	69bb      	ldr	r3, [r7, #24]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d10a      	bne.n	8002b3a <HAL_RCC_OscConfig+0x126>
          {
            if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b28:	4618      	mov	r0, r3
 8002b2a:	f000 fe2f 	bl	800378c <RCC_SetFlashLatencyFromMSIRange>
 8002b2e:	4603      	mov	r3, r0
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d002      	beq.n	8002b3a <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8002b34:	2301      	movs	r3, #1
 8002b36:	f000 bc47 	b.w	80033c8 <HAL_RCC_OscConfig+0x9b4>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002b3a:	f000 fe13 	bl	8003764 <HAL_RCC_GetHCLKFreq>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	4a5e      	ldr	r2, [pc, #376]	; (8002cbc <HAL_RCC_OscConfig+0x2a8>)
 8002b42:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002b44:	4b5e      	ldr	r3, [pc, #376]	; (8002cc0 <HAL_RCC_OscConfig+0x2ac>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4618      	mov	r0, r3
 8002b4a:	f7fe fdf3 	bl	8001734 <HAL_InitTick>
 8002b4e:	4603      	mov	r3, r0
 8002b50:	73fb      	strb	r3, [r7, #15]
        if (status != HAL_OK)
 8002b52:	7bfb      	ldrb	r3, [r7, #15]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d060      	beq.n	8002c1a <HAL_RCC_OscConfig+0x206>
        {
          return status;
 8002b58:	7bfb      	ldrb	r3, [r7, #15]
 8002b5a:	f000 bc35 	b.w	80033c8 <HAL_RCC_OscConfig+0x9b4>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	69db      	ldr	r3, [r3, #28]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d039      	beq.n	8002bda <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002b66:	4b54      	ldr	r3, [pc, #336]	; (8002cb8 <HAL_RCC_OscConfig+0x2a4>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4a53      	ldr	r2, [pc, #332]	; (8002cb8 <HAL_RCC_OscConfig+0x2a4>)
 8002b6c:	f043 0301 	orr.w	r3, r3, #1
 8002b70:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002b72:	f7fe fe2f 	bl	80017d4 <HAL_GetTick>
 8002b76:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002b78:	e00f      	b.n	8002b9a <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002b7a:	f7fe fe2b 	bl	80017d4 <HAL_GetTick>
 8002b7e:	4602      	mov	r2, r0
 8002b80:	693b      	ldr	r3, [r7, #16]
 8002b82:	1ad3      	subs	r3, r2, r3
 8002b84:	2b02      	cmp	r3, #2
 8002b86:	d908      	bls.n	8002b9a <HAL_RCC_OscConfig+0x186>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002b88:	4b4b      	ldr	r3, [pc, #300]	; (8002cb8 <HAL_RCC_OscConfig+0x2a4>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f003 0302 	and.w	r3, r3, #2
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d102      	bne.n	8002b9a <HAL_RCC_OscConfig+0x186>
            {
              return HAL_TIMEOUT;
 8002b94:	2303      	movs	r3, #3
 8002b96:	f000 bc17 	b.w	80033c8 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002b9a:	4b47      	ldr	r3, [pc, #284]	; (8002cb8 <HAL_RCC_OscConfig+0x2a4>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f003 0302 	and.w	r3, r3, #2
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d0e9      	beq.n	8002b7a <HAL_RCC_OscConfig+0x166>
            }
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002ba6:	4b44      	ldr	r3, [pc, #272]	; (8002cb8 <HAL_RCC_OscConfig+0x2a4>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4a43      	ldr	r2, [pc, #268]	; (8002cb8 <HAL_RCC_OscConfig+0x2a4>)
 8002bac:	f043 0308 	orr.w	r3, r3, #8
 8002bb0:	6013      	str	r3, [r2, #0]
 8002bb2:	4b41      	ldr	r3, [pc, #260]	; (8002cb8 <HAL_RCC_OscConfig+0x2a4>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bbe:	493e      	ldr	r1, [pc, #248]	; (8002cb8 <HAL_RCC_OscConfig+0x2a4>)
 8002bc0:	4313      	orrs	r3, r2
 8002bc2:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002bc4:	4b3c      	ldr	r3, [pc, #240]	; (8002cb8 <HAL_RCC_OscConfig+0x2a4>)
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6a1b      	ldr	r3, [r3, #32]
 8002bd0:	021b      	lsls	r3, r3, #8
 8002bd2:	4939      	ldr	r1, [pc, #228]	; (8002cb8 <HAL_RCC_OscConfig+0x2a4>)
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	604b      	str	r3, [r1, #4]
 8002bd8:	e020      	b.n	8002c1c <HAL_RCC_OscConfig+0x208>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002bda:	4b37      	ldr	r3, [pc, #220]	; (8002cb8 <HAL_RCC_OscConfig+0x2a4>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4a36      	ldr	r2, [pc, #216]	; (8002cb8 <HAL_RCC_OscConfig+0x2a4>)
 8002be0:	f023 0301 	bic.w	r3, r3, #1
 8002be4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002be6:	f7fe fdf5 	bl	80017d4 <HAL_GetTick>
 8002bea:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002bec:	e00e      	b.n	8002c0c <HAL_RCC_OscConfig+0x1f8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002bee:	f7fe fdf1 	bl	80017d4 <HAL_GetTick>
 8002bf2:	4602      	mov	r2, r0
 8002bf4:	693b      	ldr	r3, [r7, #16]
 8002bf6:	1ad3      	subs	r3, r2, r3
 8002bf8:	2b02      	cmp	r3, #2
 8002bfa:	d907      	bls.n	8002c0c <HAL_RCC_OscConfig+0x1f8>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002bfc:	4b2e      	ldr	r3, [pc, #184]	; (8002cb8 <HAL_RCC_OscConfig+0x2a4>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f003 0302 	and.w	r3, r3, #2
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d001      	beq.n	8002c0c <HAL_RCC_OscConfig+0x1f8>
            {
              return HAL_TIMEOUT;
 8002c08:	2303      	movs	r3, #3
 8002c0a:	e3dd      	b.n	80033c8 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002c0c:	4b2a      	ldr	r3, [pc, #168]	; (8002cb8 <HAL_RCC_OscConfig+0x2a4>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f003 0302 	and.w	r3, r3, #2
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d1ea      	bne.n	8002bee <HAL_RCC_OscConfig+0x1da>
 8002c18:	e000      	b.n	8002c1c <HAL_RCC_OscConfig+0x208>
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002c1a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f003 0301 	and.w	r3, r3, #1
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d07e      	beq.n	8002d26 <HAL_RCC_OscConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8002c28:	69bb      	ldr	r3, [r7, #24]
 8002c2a:	2b08      	cmp	r3, #8
 8002c2c:	d005      	beq.n	8002c3a <HAL_RCC_OscConfig+0x226>
 8002c2e:	69bb      	ldr	r3, [r7, #24]
 8002c30:	2b0c      	cmp	r3, #12
 8002c32:	d10e      	bne.n	8002c52 <HAL_RCC_OscConfig+0x23e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002c34:	697b      	ldr	r3, [r7, #20]
 8002c36:	2b03      	cmp	r3, #3
 8002c38:	d10b      	bne.n	8002c52 <HAL_RCC_OscConfig+0x23e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c3a:	4b1f      	ldr	r3, [pc, #124]	; (8002cb8 <HAL_RCC_OscConfig+0x2a4>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d06e      	beq.n	8002d24 <HAL_RCC_OscConfig+0x310>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d16a      	bne.n	8002d24 <HAL_RCC_OscConfig+0x310>
      {
        return HAL_ERROR;
 8002c4e:	2301      	movs	r3, #1
 8002c50:	e3ba      	b.n	80033c8 <HAL_RCC_OscConfig+0x9b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c5a:	d106      	bne.n	8002c6a <HAL_RCC_OscConfig+0x256>
 8002c5c:	4b16      	ldr	r3, [pc, #88]	; (8002cb8 <HAL_RCC_OscConfig+0x2a4>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4a15      	ldr	r2, [pc, #84]	; (8002cb8 <HAL_RCC_OscConfig+0x2a4>)
 8002c62:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c66:	6013      	str	r3, [r2, #0]
 8002c68:	e01d      	b.n	8002ca6 <HAL_RCC_OscConfig+0x292>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c72:	d10c      	bne.n	8002c8e <HAL_RCC_OscConfig+0x27a>
 8002c74:	4b10      	ldr	r3, [pc, #64]	; (8002cb8 <HAL_RCC_OscConfig+0x2a4>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4a0f      	ldr	r2, [pc, #60]	; (8002cb8 <HAL_RCC_OscConfig+0x2a4>)
 8002c7a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c7e:	6013      	str	r3, [r2, #0]
 8002c80:	4b0d      	ldr	r3, [pc, #52]	; (8002cb8 <HAL_RCC_OscConfig+0x2a4>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4a0c      	ldr	r2, [pc, #48]	; (8002cb8 <HAL_RCC_OscConfig+0x2a4>)
 8002c86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c8a:	6013      	str	r3, [r2, #0]
 8002c8c:	e00b      	b.n	8002ca6 <HAL_RCC_OscConfig+0x292>
 8002c8e:	4b0a      	ldr	r3, [pc, #40]	; (8002cb8 <HAL_RCC_OscConfig+0x2a4>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4a09      	ldr	r2, [pc, #36]	; (8002cb8 <HAL_RCC_OscConfig+0x2a4>)
 8002c94:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c98:	6013      	str	r3, [r2, #0]
 8002c9a:	4b07      	ldr	r3, [pc, #28]	; (8002cb8 <HAL_RCC_OscConfig+0x2a4>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4a06      	ldr	r2, [pc, #24]	; (8002cb8 <HAL_RCC_OscConfig+0x2a4>)
 8002ca0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ca4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d020      	beq.n	8002cf0 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cae:	f7fe fd91 	bl	80017d4 <HAL_GetTick>
 8002cb2:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002cb4:	e015      	b.n	8002ce2 <HAL_RCC_OscConfig+0x2ce>
 8002cb6:	bf00      	nop
 8002cb8:	40021000 	.word	0x40021000
 8002cbc:	20000000 	.word	0x20000000
 8002cc0:	20000004 	.word	0x20000004
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002cc4:	f7fe fd86 	bl	80017d4 <HAL_GetTick>
 8002cc8:	4602      	mov	r2, r0
 8002cca:	693b      	ldr	r3, [r7, #16]
 8002ccc:	1ad3      	subs	r3, r2, r3
 8002cce:	2b64      	cmp	r3, #100	; 0x64
 8002cd0:	d907      	bls.n	8002ce2 <HAL_RCC_OscConfig+0x2ce>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002cd2:	4b9f      	ldr	r3, [pc, #636]	; (8002f50 <HAL_RCC_OscConfig+0x53c>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d101      	bne.n	8002ce2 <HAL_RCC_OscConfig+0x2ce>
            {
              return HAL_TIMEOUT;
 8002cde:	2303      	movs	r3, #3
 8002ce0:	e372      	b.n	80033c8 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002ce2:	4b9b      	ldr	r3, [pc, #620]	; (8002f50 <HAL_RCC_OscConfig+0x53c>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d0ea      	beq.n	8002cc4 <HAL_RCC_OscConfig+0x2b0>
 8002cee:	e01a      	b.n	8002d26 <HAL_RCC_OscConfig+0x312>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cf0:	f7fe fd70 	bl	80017d4 <HAL_GetTick>
 8002cf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002cf6:	e00e      	b.n	8002d16 <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002cf8:	f7fe fd6c 	bl	80017d4 <HAL_GetTick>
 8002cfc:	4602      	mov	r2, r0
 8002cfe:	693b      	ldr	r3, [r7, #16]
 8002d00:	1ad3      	subs	r3, r2, r3
 8002d02:	2b64      	cmp	r3, #100	; 0x64
 8002d04:	d907      	bls.n	8002d16 <HAL_RCC_OscConfig+0x302>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002d06:	4b92      	ldr	r3, [pc, #584]	; (8002f50 <HAL_RCC_OscConfig+0x53c>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d001      	beq.n	8002d16 <HAL_RCC_OscConfig+0x302>
            {
              return HAL_TIMEOUT;
 8002d12:	2303      	movs	r3, #3
 8002d14:	e358      	b.n	80033c8 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002d16:	4b8e      	ldr	r3, [pc, #568]	; (8002f50 <HAL_RCC_OscConfig+0x53c>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d1ea      	bne.n	8002cf8 <HAL_RCC_OscConfig+0x2e4>
 8002d22:	e000      	b.n	8002d26 <HAL_RCC_OscConfig+0x312>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d24:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f003 0302 	and.w	r3, r3, #2
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d06c      	beq.n	8002e0c <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8002d32:	69bb      	ldr	r3, [r7, #24]
 8002d34:	2b04      	cmp	r3, #4
 8002d36:	d005      	beq.n	8002d44 <HAL_RCC_OscConfig+0x330>
 8002d38:	69bb      	ldr	r3, [r7, #24]
 8002d3a:	2b0c      	cmp	r3, #12
 8002d3c:	d119      	bne.n	8002d72 <HAL_RCC_OscConfig+0x35e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002d3e:	697b      	ldr	r3, [r7, #20]
 8002d40:	2b02      	cmp	r3, #2
 8002d42:	d116      	bne.n	8002d72 <HAL_RCC_OscConfig+0x35e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d44:	4b82      	ldr	r3, [pc, #520]	; (8002f50 <HAL_RCC_OscConfig+0x53c>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d005      	beq.n	8002d5c <HAL_RCC_OscConfig+0x348>
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	68db      	ldr	r3, [r3, #12]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d101      	bne.n	8002d5c <HAL_RCC_OscConfig+0x348>
      {
        return HAL_ERROR;
 8002d58:	2301      	movs	r3, #1
 8002d5a:	e335      	b.n	80033c8 <HAL_RCC_OscConfig+0x9b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d5c:	4b7c      	ldr	r3, [pc, #496]	; (8002f50 <HAL_RCC_OscConfig+0x53c>)
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	691b      	ldr	r3, [r3, #16]
 8002d68:	061b      	lsls	r3, r3, #24
 8002d6a:	4979      	ldr	r1, [pc, #484]	; (8002f50 <HAL_RCC_OscConfig+0x53c>)
 8002d6c:	4313      	orrs	r3, r2
 8002d6e:	604b      	str	r3, [r1, #4]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d70:	e04c      	b.n	8002e0c <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	68db      	ldr	r3, [r3, #12]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d029      	beq.n	8002dce <HAL_RCC_OscConfig+0x3ba>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d7a:	4b75      	ldr	r3, [pc, #468]	; (8002f50 <HAL_RCC_OscConfig+0x53c>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4a74      	ldr	r2, [pc, #464]	; (8002f50 <HAL_RCC_OscConfig+0x53c>)
 8002d80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d84:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d86:	f7fe fd25 	bl	80017d4 <HAL_GetTick>
 8002d8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d8c:	e00e      	b.n	8002dac <HAL_RCC_OscConfig+0x398>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d8e:	f7fe fd21 	bl	80017d4 <HAL_GetTick>
 8002d92:	4602      	mov	r2, r0
 8002d94:	693b      	ldr	r3, [r7, #16]
 8002d96:	1ad3      	subs	r3, r2, r3
 8002d98:	2b02      	cmp	r3, #2
 8002d9a:	d907      	bls.n	8002dac <HAL_RCC_OscConfig+0x398>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d9c:	4b6c      	ldr	r3, [pc, #432]	; (8002f50 <HAL_RCC_OscConfig+0x53c>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d101      	bne.n	8002dac <HAL_RCC_OscConfig+0x398>
            {
              return HAL_TIMEOUT;
 8002da8:	2303      	movs	r3, #3
 8002daa:	e30d      	b.n	80033c8 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002dac:	4b68      	ldr	r3, [pc, #416]	; (8002f50 <HAL_RCC_OscConfig+0x53c>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d0ea      	beq.n	8002d8e <HAL_RCC_OscConfig+0x37a>
            }
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002db8:	4b65      	ldr	r3, [pc, #404]	; (8002f50 <HAL_RCC_OscConfig+0x53c>)
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	691b      	ldr	r3, [r3, #16]
 8002dc4:	061b      	lsls	r3, r3, #24
 8002dc6:	4962      	ldr	r1, [pc, #392]	; (8002f50 <HAL_RCC_OscConfig+0x53c>)
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	604b      	str	r3, [r1, #4]
 8002dcc:	e01e      	b.n	8002e0c <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002dce:	4b60      	ldr	r3, [pc, #384]	; (8002f50 <HAL_RCC_OscConfig+0x53c>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4a5f      	ldr	r2, [pc, #380]	; (8002f50 <HAL_RCC_OscConfig+0x53c>)
 8002dd4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002dd8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dda:	f7fe fcfb 	bl	80017d4 <HAL_GetTick>
 8002dde:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002de0:	e00e      	b.n	8002e00 <HAL_RCC_OscConfig+0x3ec>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002de2:	f7fe fcf7 	bl	80017d4 <HAL_GetTick>
 8002de6:	4602      	mov	r2, r0
 8002de8:	693b      	ldr	r3, [r7, #16]
 8002dea:	1ad3      	subs	r3, r2, r3
 8002dec:	2b02      	cmp	r3, #2
 8002dee:	d907      	bls.n	8002e00 <HAL_RCC_OscConfig+0x3ec>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002df0:	4b57      	ldr	r3, [pc, #348]	; (8002f50 <HAL_RCC_OscConfig+0x53c>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d001      	beq.n	8002e00 <HAL_RCC_OscConfig+0x3ec>
            {
              return HAL_TIMEOUT;
 8002dfc:	2303      	movs	r3, #3
 8002dfe:	e2e3      	b.n	80033c8 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002e00:	4b53      	ldr	r3, [pc, #332]	; (8002f50 <HAL_RCC_OscConfig+0x53c>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d1ea      	bne.n	8002de2 <HAL_RCC_OscConfig+0x3ce>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f003 0308 	and.w	r3, r3, #8
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d05f      	beq.n	8002ed8 <HAL_RCC_OscConfig+0x4c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	695b      	ldr	r3, [r3, #20]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d038      	beq.n	8002e92 <HAL_RCC_OscConfig+0x47e>
    {
      /* Apply prescaler value */
      if (RCC_OscInitStruct->LSIDiv == RCC_LSI_DIV1)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	699b      	ldr	r3, [r3, #24]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d108      	bne.n	8002e3a <HAL_RCC_OscConfig+0x426>
      {
        CLEAR_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 8002e28:	4b49      	ldr	r3, [pc, #292]	; (8002f50 <HAL_RCC_OscConfig+0x53c>)
 8002e2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e2e:	4a48      	ldr	r2, [pc, #288]	; (8002f50 <HAL_RCC_OscConfig+0x53c>)
 8002e30:	f023 0310 	bic.w	r3, r3, #16
 8002e34:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8002e38:	e007      	b.n	8002e4a <HAL_RCC_OscConfig+0x436>
      }
      else
      {
        SET_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 8002e3a:	4b45      	ldr	r3, [pc, #276]	; (8002f50 <HAL_RCC_OscConfig+0x53c>)
 8002e3c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e40:	4a43      	ldr	r2, [pc, #268]	; (8002f50 <HAL_RCC_OscConfig+0x53c>)
 8002e42:	f043 0310 	orr.w	r3, r3, #16
 8002e46:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e4a:	4b41      	ldr	r3, [pc, #260]	; (8002f50 <HAL_RCC_OscConfig+0x53c>)
 8002e4c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e50:	4a3f      	ldr	r2, [pc, #252]	; (8002f50 <HAL_RCC_OscConfig+0x53c>)
 8002e52:	f043 0301 	orr.w	r3, r3, #1
 8002e56:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e5a:	f7fe fcbb 	bl	80017d4 <HAL_GetTick>
 8002e5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002e60:	e00f      	b.n	8002e82 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e62:	f7fe fcb7 	bl	80017d4 <HAL_GetTick>
 8002e66:	4602      	mov	r2, r0
 8002e68:	693b      	ldr	r3, [r7, #16]
 8002e6a:	1ad3      	subs	r3, r2, r3
 8002e6c:	2b07      	cmp	r3, #7
 8002e6e:	d908      	bls.n	8002e82 <HAL_RCC_OscConfig+0x46e>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002e70:	4b37      	ldr	r3, [pc, #220]	; (8002f50 <HAL_RCC_OscConfig+0x53c>)
 8002e72:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e76:	f003 0302 	and.w	r3, r3, #2
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d101      	bne.n	8002e82 <HAL_RCC_OscConfig+0x46e>
          {
            return HAL_TIMEOUT;
 8002e7e:	2303      	movs	r3, #3
 8002e80:	e2a2      	b.n	80033c8 <HAL_RCC_OscConfig+0x9b4>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002e82:	4b33      	ldr	r3, [pc, #204]	; (8002f50 <HAL_RCC_OscConfig+0x53c>)
 8002e84:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e88:	f003 0302 	and.w	r3, r3, #2
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d0e8      	beq.n	8002e62 <HAL_RCC_OscConfig+0x44e>
 8002e90:	e022      	b.n	8002ed8 <HAL_RCC_OscConfig+0x4c4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e92:	4b2f      	ldr	r3, [pc, #188]	; (8002f50 <HAL_RCC_OscConfig+0x53c>)
 8002e94:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e98:	4a2d      	ldr	r2, [pc, #180]	; (8002f50 <HAL_RCC_OscConfig+0x53c>)
 8002e9a:	f023 0301 	bic.w	r3, r3, #1
 8002e9e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ea2:	f7fe fc97 	bl	80017d4 <HAL_GetTick>
 8002ea6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002ea8:	e00f      	b.n	8002eca <HAL_RCC_OscConfig+0x4b6>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002eaa:	f7fe fc93 	bl	80017d4 <HAL_GetTick>
 8002eae:	4602      	mov	r2, r0
 8002eb0:	693b      	ldr	r3, [r7, #16]
 8002eb2:	1ad3      	subs	r3, r2, r3
 8002eb4:	2b07      	cmp	r3, #7
 8002eb6:	d908      	bls.n	8002eca <HAL_RCC_OscConfig+0x4b6>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002eb8:	4b25      	ldr	r3, [pc, #148]	; (8002f50 <HAL_RCC_OscConfig+0x53c>)
 8002eba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ebe:	f003 0302 	and.w	r3, r3, #2
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d001      	beq.n	8002eca <HAL_RCC_OscConfig+0x4b6>
          {
            return HAL_TIMEOUT;
 8002ec6:	2303      	movs	r3, #3
 8002ec8:	e27e      	b.n	80033c8 <HAL_RCC_OscConfig+0x9b4>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002eca:	4b21      	ldr	r3, [pc, #132]	; (8002f50 <HAL_RCC_OscConfig+0x53c>)
 8002ecc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ed0:	f003 0302 	and.w	r3, r3, #2
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d1e8      	bne.n	8002eaa <HAL_RCC_OscConfig+0x496>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f003 0304 	and.w	r3, r3, #4
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	f000 8131 	beq.w	8003148 <HAL_RCC_OscConfig+0x734>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002eea:	4b19      	ldr	r3, [pc, #100]	; (8002f50 <HAL_RCC_OscConfig+0x53c>)
 8002eec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002eee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d10d      	bne.n	8002f12 <HAL_RCC_OscConfig+0x4fe>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ef6:	4b16      	ldr	r3, [pc, #88]	; (8002f50 <HAL_RCC_OscConfig+0x53c>)
 8002ef8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002efa:	4a15      	ldr	r2, [pc, #84]	; (8002f50 <HAL_RCC_OscConfig+0x53c>)
 8002efc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f00:	6593      	str	r3, [r2, #88]	; 0x58
 8002f02:	4b13      	ldr	r3, [pc, #76]	; (8002f50 <HAL_RCC_OscConfig+0x53c>)
 8002f04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f0a:	60bb      	str	r3, [r7, #8]
 8002f0c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f12:	4b10      	ldr	r3, [pc, #64]	; (8002f54 <HAL_RCC_OscConfig+0x540>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d122      	bne.n	8002f64 <HAL_RCC_OscConfig+0x550>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002f1e:	4b0d      	ldr	r3, [pc, #52]	; (8002f54 <HAL_RCC_OscConfig+0x540>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4a0c      	ldr	r2, [pc, #48]	; (8002f54 <HAL_RCC_OscConfig+0x540>)
 8002f24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f28:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f2a:	f7fe fc53 	bl	80017d4 <HAL_GetTick>
 8002f2e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f30:	e012      	b.n	8002f58 <HAL_RCC_OscConfig+0x544>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f32:	f7fe fc4f 	bl	80017d4 <HAL_GetTick>
 8002f36:	4602      	mov	r2, r0
 8002f38:	693b      	ldr	r3, [r7, #16]
 8002f3a:	1ad3      	subs	r3, r2, r3
 8002f3c:	2b02      	cmp	r3, #2
 8002f3e:	d90b      	bls.n	8002f58 <HAL_RCC_OscConfig+0x544>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f40:	4b04      	ldr	r3, [pc, #16]	; (8002f54 <HAL_RCC_OscConfig+0x540>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d105      	bne.n	8002f58 <HAL_RCC_OscConfig+0x544>
          {
            return HAL_TIMEOUT;
 8002f4c:	2303      	movs	r3, #3
 8002f4e:	e23b      	b.n	80033c8 <HAL_RCC_OscConfig+0x9b4>
 8002f50:	40021000 	.word	0x40021000
 8002f54:	40007000 	.word	0x40007000
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f58:	4bb8      	ldr	r3, [pc, #736]	; (800323c <HAL_RCC_OscConfig+0x828>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d0e6      	beq.n	8002f32 <HAL_RCC_OscConfig+0x51e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	689b      	ldr	r3, [r3, #8]
 8002f68:	f003 0301 	and.w	r3, r3, #1
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d01f      	beq.n	8002fb0 <HAL_RCC_OscConfig+0x59c>
    {
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	689b      	ldr	r3, [r3, #8]
 8002f74:	f003 0304 	and.w	r3, r3, #4
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d010      	beq.n	8002f9e <HAL_RCC_OscConfig+0x58a>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002f7c:	4bb0      	ldr	r3, [pc, #704]	; (8003240 <HAL_RCC_OscConfig+0x82c>)
 8002f7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f82:	4aaf      	ldr	r2, [pc, #700]	; (8003240 <HAL_RCC_OscConfig+0x82c>)
 8002f84:	f043 0304 	orr.w	r3, r3, #4
 8002f88:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002f8c:	4bac      	ldr	r3, [pc, #688]	; (8003240 <HAL_RCC_OscConfig+0x82c>)
 8002f8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f92:	4aab      	ldr	r2, [pc, #684]	; (8003240 <HAL_RCC_OscConfig+0x82c>)
 8002f94:	f043 0301 	orr.w	r3, r3, #1
 8002f98:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002f9c:	e018      	b.n	8002fd0 <HAL_RCC_OscConfig+0x5bc>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002f9e:	4ba8      	ldr	r3, [pc, #672]	; (8003240 <HAL_RCC_OscConfig+0x82c>)
 8002fa0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fa4:	4aa6      	ldr	r2, [pc, #664]	; (8003240 <HAL_RCC_OscConfig+0x82c>)
 8002fa6:	f043 0301 	orr.w	r3, r3, #1
 8002faa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002fae:	e00f      	b.n	8002fd0 <HAL_RCC_OscConfig+0x5bc>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002fb0:	4ba3      	ldr	r3, [pc, #652]	; (8003240 <HAL_RCC_OscConfig+0x82c>)
 8002fb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fb6:	4aa2      	ldr	r2, [pc, #648]	; (8003240 <HAL_RCC_OscConfig+0x82c>)
 8002fb8:	f023 0301 	bic.w	r3, r3, #1
 8002fbc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002fc0:	4b9f      	ldr	r3, [pc, #636]	; (8003240 <HAL_RCC_OscConfig+0x82c>)
 8002fc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fc6:	4a9e      	ldr	r2, [pc, #632]	; (8003240 <HAL_RCC_OscConfig+0x82c>)
 8002fc8:	f023 0304 	bic.w	r3, r3, #4
 8002fcc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    }

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	689b      	ldr	r3, [r3, #8]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d068      	beq.n	80030aa <HAL_RCC_OscConfig+0x696>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fd8:	f7fe fbfc 	bl	80017d4 <HAL_GetTick>
 8002fdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002fde:	e011      	b.n	8003004 <HAL_RCC_OscConfig+0x5f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fe0:	f7fe fbf8 	bl	80017d4 <HAL_GetTick>
 8002fe4:	4602      	mov	r2, r0
 8002fe6:	693b      	ldr	r3, [r7, #16]
 8002fe8:	1ad3      	subs	r3, r2, r3
 8002fea:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d908      	bls.n	8003004 <HAL_RCC_OscConfig+0x5f0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ff2:	4b93      	ldr	r3, [pc, #588]	; (8003240 <HAL_RCC_OscConfig+0x82c>)
 8002ff4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ff8:	f003 0302 	and.w	r3, r3, #2
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d101      	bne.n	8003004 <HAL_RCC_OscConfig+0x5f0>
          {
            return HAL_TIMEOUT;
 8003000:	2303      	movs	r3, #3
 8003002:	e1e1      	b.n	80033c8 <HAL_RCC_OscConfig+0x9b4>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003004:	4b8e      	ldr	r3, [pc, #568]	; (8003240 <HAL_RCC_OscConfig+0x82c>)
 8003006:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800300a:	f003 0302 	and.w	r3, r3, #2
 800300e:	2b00      	cmp	r3, #0
 8003010:	d0e6      	beq.n	8002fe0 <HAL_RCC_OscConfig+0x5cc>
          }
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	689b      	ldr	r3, [r3, #8]
 8003016:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800301a:	2b00      	cmp	r3, #0
 800301c:	d022      	beq.n	8003064 <HAL_RCC_OscConfig+0x650>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800301e:	4b88      	ldr	r3, [pc, #544]	; (8003240 <HAL_RCC_OscConfig+0x82c>)
 8003020:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003024:	4a86      	ldr	r2, [pc, #536]	; (8003240 <HAL_RCC_OscConfig+0x82c>)
 8003026:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800302a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800302e:	e011      	b.n	8003054 <HAL_RCC_OscConfig+0x640>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003030:	f7fe fbd0 	bl	80017d4 <HAL_GetTick>
 8003034:	4602      	mov	r2, r0
 8003036:	693b      	ldr	r3, [r7, #16]
 8003038:	1ad3      	subs	r3, r2, r3
 800303a:	f241 3288 	movw	r2, #5000	; 0x1388
 800303e:	4293      	cmp	r3, r2
 8003040:	d908      	bls.n	8003054 <HAL_RCC_OscConfig+0x640>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8003042:	4b7f      	ldr	r3, [pc, #508]	; (8003240 <HAL_RCC_OscConfig+0x82c>)
 8003044:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003048:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800304c:	2b00      	cmp	r3, #0
 800304e:	d101      	bne.n	8003054 <HAL_RCC_OscConfig+0x640>
            {
              return HAL_TIMEOUT;
 8003050:	2303      	movs	r3, #3
 8003052:	e1b9      	b.n	80033c8 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8003054:	4b7a      	ldr	r3, [pc, #488]	; (8003240 <HAL_RCC_OscConfig+0x82c>)
 8003056:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800305a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800305e:	2b00      	cmp	r3, #0
 8003060:	d0e6      	beq.n	8003030 <HAL_RCC_OscConfig+0x61c>
 8003062:	e068      	b.n	8003136 <HAL_RCC_OscConfig+0x722>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003064:	4b76      	ldr	r3, [pc, #472]	; (8003240 <HAL_RCC_OscConfig+0x82c>)
 8003066:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800306a:	4a75      	ldr	r2, [pc, #468]	; (8003240 <HAL_RCC_OscConfig+0x82c>)
 800306c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003070:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003074:	e011      	b.n	800309a <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003076:	f7fe fbad 	bl	80017d4 <HAL_GetTick>
 800307a:	4602      	mov	r2, r0
 800307c:	693b      	ldr	r3, [r7, #16]
 800307e:	1ad3      	subs	r3, r2, r3
 8003080:	f241 3288 	movw	r2, #5000	; 0x1388
 8003084:	4293      	cmp	r3, r2
 8003086:	d908      	bls.n	800309a <HAL_RCC_OscConfig+0x686>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003088:	4b6d      	ldr	r3, [pc, #436]	; (8003240 <HAL_RCC_OscConfig+0x82c>)
 800308a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800308e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003092:	2b00      	cmp	r3, #0
 8003094:	d001      	beq.n	800309a <HAL_RCC_OscConfig+0x686>
            {
              return HAL_TIMEOUT;
 8003096:	2303      	movs	r3, #3
 8003098:	e196      	b.n	80033c8 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800309a:	4b69      	ldr	r3, [pc, #420]	; (8003240 <HAL_RCC_OscConfig+0x82c>)
 800309c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d1e6      	bne.n	8003076 <HAL_RCC_OscConfig+0x662>
 80030a8:	e045      	b.n	8003136 <HAL_RCC_OscConfig+0x722>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030aa:	f7fe fb93 	bl	80017d4 <HAL_GetTick>
 80030ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80030b0:	e011      	b.n	80030d6 <HAL_RCC_OscConfig+0x6c2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030b2:	f7fe fb8f 	bl	80017d4 <HAL_GetTick>
 80030b6:	4602      	mov	r2, r0
 80030b8:	693b      	ldr	r3, [r7, #16]
 80030ba:	1ad3      	subs	r3, r2, r3
 80030bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d908      	bls.n	80030d6 <HAL_RCC_OscConfig+0x6c2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80030c4:	4b5e      	ldr	r3, [pc, #376]	; (8003240 <HAL_RCC_OscConfig+0x82c>)
 80030c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030ca:	f003 0302 	and.w	r3, r3, #2
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d001      	beq.n	80030d6 <HAL_RCC_OscConfig+0x6c2>
          {
            return HAL_TIMEOUT;
 80030d2:	2303      	movs	r3, #3
 80030d4:	e178      	b.n	80033c8 <HAL_RCC_OscConfig+0x9b4>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80030d6:	4b5a      	ldr	r3, [pc, #360]	; (8003240 <HAL_RCC_OscConfig+0x82c>)
 80030d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030dc:	f003 0302 	and.w	r3, r3, #2
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d1e6      	bne.n	80030b2 <HAL_RCC_OscConfig+0x69e>
          }
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 80030e4:	4b56      	ldr	r3, [pc, #344]	; (8003240 <HAL_RCC_OscConfig+0x82c>)
 80030e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d021      	beq.n	8003136 <HAL_RCC_OscConfig+0x722>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80030f2:	4b53      	ldr	r3, [pc, #332]	; (8003240 <HAL_RCC_OscConfig+0x82c>)
 80030f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030f8:	4a51      	ldr	r2, [pc, #324]	; (8003240 <HAL_RCC_OscConfig+0x82c>)
 80030fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80030fe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003102:	e011      	b.n	8003128 <HAL_RCC_OscConfig+0x714>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003104:	f7fe fb66 	bl	80017d4 <HAL_GetTick>
 8003108:	4602      	mov	r2, r0
 800310a:	693b      	ldr	r3, [r7, #16]
 800310c:	1ad3      	subs	r3, r2, r3
 800310e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003112:	4293      	cmp	r3, r2
 8003114:	d908      	bls.n	8003128 <HAL_RCC_OscConfig+0x714>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003116:	4b4a      	ldr	r3, [pc, #296]	; (8003240 <HAL_RCC_OscConfig+0x82c>)
 8003118:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800311c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003120:	2b00      	cmp	r3, #0
 8003122:	d001      	beq.n	8003128 <HAL_RCC_OscConfig+0x714>
            {
              return HAL_TIMEOUT;
 8003124:	2303      	movs	r3, #3
 8003126:	e14f      	b.n	80033c8 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003128:	4b45      	ldr	r3, [pc, #276]	; (8003240 <HAL_RCC_OscConfig+0x82c>)
 800312a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800312e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003132:	2b00      	cmp	r3, #0
 8003134:	d1e6      	bne.n	8003104 <HAL_RCC_OscConfig+0x6f0>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003136:	7ffb      	ldrb	r3, [r7, #31]
 8003138:	2b01      	cmp	r3, #1
 800313a:	d105      	bne.n	8003148 <HAL_RCC_OscConfig+0x734>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800313c:	4b40      	ldr	r3, [pc, #256]	; (8003240 <HAL_RCC_OscConfig+0x82c>)
 800313e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003140:	4a3f      	ldr	r2, [pc, #252]	; (8003240 <HAL_RCC_OscConfig+0x82c>)
 8003142:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003146:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f003 0320 	and.w	r3, r3, #32
 8003150:	2b00      	cmp	r3, #0
 8003152:	d04a      	beq.n	80031ea <HAL_RCC_OscConfig+0x7d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003158:	2b00      	cmp	r3, #0
 800315a:	d023      	beq.n	80031a4 <HAL_RCC_OscConfig+0x790>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800315c:	4b38      	ldr	r3, [pc, #224]	; (8003240 <HAL_RCC_OscConfig+0x82c>)
 800315e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003162:	4a37      	ldr	r2, [pc, #220]	; (8003240 <HAL_RCC_OscConfig+0x82c>)
 8003164:	f043 0301 	orr.w	r3, r3, #1
 8003168:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800316c:	f7fe fb32 	bl	80017d4 <HAL_GetTick>
 8003170:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003172:	e00f      	b.n	8003194 <HAL_RCC_OscConfig+0x780>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003174:	f7fe fb2e 	bl	80017d4 <HAL_GetTick>
 8003178:	4602      	mov	r2, r0
 800317a:	693b      	ldr	r3, [r7, #16]
 800317c:	1ad3      	subs	r3, r2, r3
 800317e:	2b02      	cmp	r3, #2
 8003180:	d908      	bls.n	8003194 <HAL_RCC_OscConfig+0x780>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003182:	4b2f      	ldr	r3, [pc, #188]	; (8003240 <HAL_RCC_OscConfig+0x82c>)
 8003184:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003188:	f003 0302 	and.w	r3, r3, #2
 800318c:	2b00      	cmp	r3, #0
 800318e:	d101      	bne.n	8003194 <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 8003190:	2303      	movs	r3, #3
 8003192:	e119      	b.n	80033c8 <HAL_RCC_OscConfig+0x9b4>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003194:	4b2a      	ldr	r3, [pc, #168]	; (8003240 <HAL_RCC_OscConfig+0x82c>)
 8003196:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800319a:	f003 0302 	and.w	r3, r3, #2
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d0e8      	beq.n	8003174 <HAL_RCC_OscConfig+0x760>
 80031a2:	e022      	b.n	80031ea <HAL_RCC_OscConfig+0x7d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80031a4:	4b26      	ldr	r3, [pc, #152]	; (8003240 <HAL_RCC_OscConfig+0x82c>)
 80031a6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80031aa:	4a25      	ldr	r2, [pc, #148]	; (8003240 <HAL_RCC_OscConfig+0x82c>)
 80031ac:	f023 0301 	bic.w	r3, r3, #1
 80031b0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031b4:	f7fe fb0e 	bl	80017d4 <HAL_GetTick>
 80031b8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80031ba:	e00f      	b.n	80031dc <HAL_RCC_OscConfig+0x7c8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80031bc:	f7fe fb0a 	bl	80017d4 <HAL_GetTick>
 80031c0:	4602      	mov	r2, r0
 80031c2:	693b      	ldr	r3, [r7, #16]
 80031c4:	1ad3      	subs	r3, r2, r3
 80031c6:	2b02      	cmp	r3, #2
 80031c8:	d908      	bls.n	80031dc <HAL_RCC_OscConfig+0x7c8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80031ca:	4b1d      	ldr	r3, [pc, #116]	; (8003240 <HAL_RCC_OscConfig+0x82c>)
 80031cc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80031d0:	f003 0302 	and.w	r3, r3, #2
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d001      	beq.n	80031dc <HAL_RCC_OscConfig+0x7c8>
          {
            return HAL_TIMEOUT;
 80031d8:	2303      	movs	r3, #3
 80031da:	e0f5      	b.n	80033c8 <HAL_RCC_OscConfig+0x9b4>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80031dc:	4b18      	ldr	r3, [pc, #96]	; (8003240 <HAL_RCC_OscConfig+0x82c>)
 80031de:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80031e2:	f003 0302 	and.w	r3, r3, #2
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d1e8      	bne.n	80031bc <HAL_RCC_OscConfig+0x7a8>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	f000 80e9 	beq.w	80033c6 <HAL_RCC_OscConfig+0x9b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80031f4:	4b12      	ldr	r3, [pc, #72]	; (8003240 <HAL_RCC_OscConfig+0x82c>)
 80031f6:	689b      	ldr	r3, [r3, #8]
 80031f8:	f003 030c 	and.w	r3, r3, #12
 80031fc:	2b0c      	cmp	r3, #12
 80031fe:	f000 80a3 	beq.w	8003348 <HAL_RCC_OscConfig+0x934>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003206:	2b02      	cmp	r3, #2
 8003208:	d16a      	bne.n	80032e0 <HAL_RCC_OscConfig+0x8cc>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800320a:	4b0d      	ldr	r3, [pc, #52]	; (8003240 <HAL_RCC_OscConfig+0x82c>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4a0c      	ldr	r2, [pc, #48]	; (8003240 <HAL_RCC_OscConfig+0x82c>)
 8003210:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003214:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003216:	f7fe fadd 	bl	80017d4 <HAL_GetTick>
 800321a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800321c:	e012      	b.n	8003244 <HAL_RCC_OscConfig+0x830>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800321e:	f7fe fad9 	bl	80017d4 <HAL_GetTick>
 8003222:	4602      	mov	r2, r0
 8003224:	693b      	ldr	r3, [r7, #16]
 8003226:	1ad3      	subs	r3, r2, r3
 8003228:	2b02      	cmp	r3, #2
 800322a:	d90b      	bls.n	8003244 <HAL_RCC_OscConfig+0x830>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800322c:	4b04      	ldr	r3, [pc, #16]	; (8003240 <HAL_RCC_OscConfig+0x82c>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003234:	2b00      	cmp	r3, #0
 8003236:	d005      	beq.n	8003244 <HAL_RCC_OscConfig+0x830>
            {
              return HAL_TIMEOUT;
 8003238:	2303      	movs	r3, #3
 800323a:	e0c5      	b.n	80033c8 <HAL_RCC_OscConfig+0x9b4>
 800323c:	40007000 	.word	0x40007000
 8003240:	40021000 	.word	0x40021000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003244:	4b62      	ldr	r3, [pc, #392]	; (80033d0 <HAL_RCC_OscConfig+0x9bc>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800324c:	2b00      	cmp	r3, #0
 800324e:	d1e6      	bne.n	800321e <HAL_RCC_OscConfig+0x80a>
            }
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003250:	4b5f      	ldr	r3, [pc, #380]	; (80033d0 <HAL_RCC_OscConfig+0x9bc>)
 8003252:	68da      	ldr	r2, [r3, #12]
 8003254:	4b5f      	ldr	r3, [pc, #380]	; (80033d4 <HAL_RCC_OscConfig+0x9c0>)
 8003256:	4013      	ands	r3, r2
 8003258:	687a      	ldr	r2, [r7, #4]
 800325a:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800325c:	687a      	ldr	r2, [r7, #4]
 800325e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003260:	3a01      	subs	r2, #1
 8003262:	0112      	lsls	r2, r2, #4
 8003264:	4311      	orrs	r1, r2
 8003266:	687a      	ldr	r2, [r7, #4]
 8003268:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800326a:	0212      	lsls	r2, r2, #8
 800326c:	4311      	orrs	r1, r2
 800326e:	687a      	ldr	r2, [r7, #4]
 8003270:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003272:	0852      	lsrs	r2, r2, #1
 8003274:	3a01      	subs	r2, #1
 8003276:	0552      	lsls	r2, r2, #21
 8003278:	4311      	orrs	r1, r2
 800327a:	687a      	ldr	r2, [r7, #4]
 800327c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800327e:	0852      	lsrs	r2, r2, #1
 8003280:	3a01      	subs	r2, #1
 8003282:	0652      	lsls	r2, r2, #25
 8003284:	4311      	orrs	r1, r2
 8003286:	687a      	ldr	r2, [r7, #4]
 8003288:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800328a:	06d2      	lsls	r2, r2, #27
 800328c:	430a      	orrs	r2, r1
 800328e:	4950      	ldr	r1, [pc, #320]	; (80033d0 <HAL_RCC_OscConfig+0x9bc>)
 8003290:	4313      	orrs	r3, r2
 8003292:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003294:	4b4e      	ldr	r3, [pc, #312]	; (80033d0 <HAL_RCC_OscConfig+0x9bc>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a4d      	ldr	r2, [pc, #308]	; (80033d0 <HAL_RCC_OscConfig+0x9bc>)
 800329a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800329e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80032a0:	4b4b      	ldr	r3, [pc, #300]	; (80033d0 <HAL_RCC_OscConfig+0x9bc>)
 80032a2:	68db      	ldr	r3, [r3, #12]
 80032a4:	4a4a      	ldr	r2, [pc, #296]	; (80033d0 <HAL_RCC_OscConfig+0x9bc>)
 80032a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80032aa:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032ac:	f7fe fa92 	bl	80017d4 <HAL_GetTick>
 80032b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80032b2:	e00e      	b.n	80032d2 <HAL_RCC_OscConfig+0x8be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032b4:	f7fe fa8e 	bl	80017d4 <HAL_GetTick>
 80032b8:	4602      	mov	r2, r0
 80032ba:	693b      	ldr	r3, [r7, #16]
 80032bc:	1ad3      	subs	r3, r2, r3
 80032be:	2b02      	cmp	r3, #2
 80032c0:	d907      	bls.n	80032d2 <HAL_RCC_OscConfig+0x8be>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80032c2:	4b43      	ldr	r3, [pc, #268]	; (80033d0 <HAL_RCC_OscConfig+0x9bc>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d101      	bne.n	80032d2 <HAL_RCC_OscConfig+0x8be>
            {
              return HAL_TIMEOUT;
 80032ce:	2303      	movs	r3, #3
 80032d0:	e07a      	b.n	80033c8 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80032d2:	4b3f      	ldr	r3, [pc, #252]	; (80033d0 <HAL_RCC_OscConfig+0x9bc>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d0ea      	beq.n	80032b4 <HAL_RCC_OscConfig+0x8a0>
 80032de:	e072      	b.n	80033c6 <HAL_RCC_OscConfig+0x9b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032e0:	4b3b      	ldr	r3, [pc, #236]	; (80033d0 <HAL_RCC_OscConfig+0x9bc>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4a3a      	ldr	r2, [pc, #232]	; (80033d0 <HAL_RCC_OscConfig+0x9bc>)
 80032e6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80032ea:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
        if (READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80032ec:	4b38      	ldr	r3, [pc, #224]	; (80033d0 <HAL_RCC_OscConfig+0x9bc>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d105      	bne.n	8003304 <HAL_RCC_OscConfig+0x8f0>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80032f8:	4b35      	ldr	r3, [pc, #212]	; (80033d0 <HAL_RCC_OscConfig+0x9bc>)
 80032fa:	68db      	ldr	r3, [r3, #12]
 80032fc:	4a34      	ldr	r2, [pc, #208]	; (80033d0 <HAL_RCC_OscConfig+0x9bc>)
 80032fe:	f023 0303 	bic.w	r3, r3, #3
 8003302:	60d3      	str	r3, [r2, #12]
        }

        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003304:	4b32      	ldr	r3, [pc, #200]	; (80033d0 <HAL_RCC_OscConfig+0x9bc>)
 8003306:	68db      	ldr	r3, [r3, #12]
 8003308:	4a31      	ldr	r2, [pc, #196]	; (80033d0 <HAL_RCC_OscConfig+0x9bc>)
 800330a:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800330e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003312:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003314:	f7fe fa5e 	bl	80017d4 <HAL_GetTick>
 8003318:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800331a:	e00e      	b.n	800333a <HAL_RCC_OscConfig+0x926>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800331c:	f7fe fa5a 	bl	80017d4 <HAL_GetTick>
 8003320:	4602      	mov	r2, r0
 8003322:	693b      	ldr	r3, [r7, #16]
 8003324:	1ad3      	subs	r3, r2, r3
 8003326:	2b02      	cmp	r3, #2
 8003328:	d907      	bls.n	800333a <HAL_RCC_OscConfig+0x926>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800332a:	4b29      	ldr	r3, [pc, #164]	; (80033d0 <HAL_RCC_OscConfig+0x9bc>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003332:	2b00      	cmp	r3, #0
 8003334:	d001      	beq.n	800333a <HAL_RCC_OscConfig+0x926>
            {
              return HAL_TIMEOUT;
 8003336:	2303      	movs	r3, #3
 8003338:	e046      	b.n	80033c8 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800333a:	4b25      	ldr	r3, [pc, #148]	; (80033d0 <HAL_RCC_OscConfig+0x9bc>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003342:	2b00      	cmp	r3, #0
 8003344:	d1ea      	bne.n	800331c <HAL_RCC_OscConfig+0x908>
 8003346:	e03e      	b.n	80033c6 <HAL_RCC_OscConfig+0x9b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_OFF)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800334c:	2b01      	cmp	r3, #1
 800334e:	d101      	bne.n	8003354 <HAL_RCC_OscConfig+0x940>
      {
        return HAL_ERROR;
 8003350:	2301      	movs	r3, #1
 8003352:	e039      	b.n	80033c8 <HAL_RCC_OscConfig+0x9b4>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 8003354:	4b1e      	ldr	r3, [pc, #120]	; (80033d0 <HAL_RCC_OscConfig+0x9bc>)
 8003356:	68db      	ldr	r3, [r3, #12]
 8003358:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800335a:	697b      	ldr	r3, [r7, #20]
 800335c:	f003 0203 	and.w	r2, r3, #3
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003364:	429a      	cmp	r2, r3
 8003366:	d12c      	bne.n	80033c2 <HAL_RCC_OscConfig+0x9ae>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003368:	697b      	ldr	r3, [r7, #20]
 800336a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003372:	3b01      	subs	r3, #1
 8003374:	011b      	lsls	r3, r3, #4
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003376:	429a      	cmp	r2, r3
 8003378:	d123      	bne.n	80033c2 <HAL_RCC_OscConfig+0x9ae>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800337a:	697b      	ldr	r3, [r7, #20]
 800337c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003384:	021b      	lsls	r3, r3, #8
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003386:	429a      	cmp	r2, r3
 8003388:	d11b      	bne.n	80033c2 <HAL_RCC_OscConfig+0x9ae>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800338a:	697b      	ldr	r3, [r7, #20]
 800338c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003394:	06db      	lsls	r3, r3, #27
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003396:	429a      	cmp	r2, r3
 8003398:	d113      	bne.n	80033c2 <HAL_RCC_OscConfig+0x9ae>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800339a:	697b      	ldr	r3, [r7, #20]
 800339c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033a4:	085b      	lsrs	r3, r3, #1
 80033a6:	3b01      	subs	r3, #1
 80033a8:	055b      	lsls	r3, r3, #21
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80033aa:	429a      	cmp	r2, r3
 80033ac:	d109      	bne.n	80033c2 <HAL_RCC_OscConfig+0x9ae>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80033ae:	697b      	ldr	r3, [r7, #20]
 80033b0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033b8:	085b      	lsrs	r3, r3, #1
 80033ba:	3b01      	subs	r3, #1
 80033bc:	065b      	lsls	r3, r3, #25
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80033be:	429a      	cmp	r2, r3
 80033c0:	d001      	beq.n	80033c6 <HAL_RCC_OscConfig+0x9b2>
        {
          return HAL_ERROR;
 80033c2:	2301      	movs	r3, #1
 80033c4:	e000      	b.n	80033c8 <HAL_RCC_OscConfig+0x9b4>
        }
      }
    }
  }

  return HAL_OK;
 80033c6:	2300      	movs	r3, #0
}
 80033c8:	4618      	mov	r0, r3
 80033ca:	3720      	adds	r7, #32
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bd80      	pop	{r7, pc}
 80033d0:	40021000 	.word	0x40021000
 80033d4:	019f800c 	.word	0x019f800c

080033d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b086      	sub	sp, #24
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
 80033e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80033e2:	2300      	movs	r3, #0
 80033e4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d101      	bne.n	80033f0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80033ec:	2301      	movs	r3, #1
 80033ee:	e10d      	b.n	800360c <HAL_RCC_ClockConfig+0x234>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80033f0:	4b88      	ldr	r3, [pc, #544]	; (8003614 <HAL_RCC_ClockConfig+0x23c>)
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f003 030f 	and.w	r3, r3, #15
 80033f8:	683a      	ldr	r2, [r7, #0]
 80033fa:	429a      	cmp	r2, r3
 80033fc:	d910      	bls.n	8003420 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033fe:	4b85      	ldr	r3, [pc, #532]	; (8003614 <HAL_RCC_ClockConfig+0x23c>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f023 020f 	bic.w	r2, r3, #15
 8003406:	4983      	ldr	r1, [pc, #524]	; (8003614 <HAL_RCC_ClockConfig+0x23c>)
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	4313      	orrs	r3, r2
 800340c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800340e:	4b81      	ldr	r3, [pc, #516]	; (8003614 <HAL_RCC_ClockConfig+0x23c>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f003 030f 	and.w	r3, r3, #15
 8003416:	683a      	ldr	r2, [r7, #0]
 8003418:	429a      	cmp	r2, r3
 800341a:	d001      	beq.n	8003420 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800341c:	2301      	movs	r3, #1
 800341e:	e0f5      	b.n	800360c <HAL_RCC_ClockConfig+0x234>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f003 0301 	and.w	r3, r3, #1
 8003428:	2b00      	cmp	r3, #0
 800342a:	f000 8094 	beq.w	8003556 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	2b03      	cmp	r3, #3
 8003434:	d134      	bne.n	80034a0 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003436:	4b78      	ldr	r3, [pc, #480]	; (8003618 <HAL_RCC_ClockConfig+0x240>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800343e:	2b00      	cmp	r3, #0
 8003440:	d101      	bne.n	8003446 <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 8003442:	2301      	movs	r3, #1
 8003444:	e0e2      	b.n	800360c <HAL_RCC_ClockConfig+0x234>
      }

      /* Transition state management when selecting PLL as SYSCLK source and */
      /* target frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003446:	f000 fa05 	bl	8003854 <RCC_GetSysClockFreqFromPLLSource>
 800344a:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if (pllfreq > 80000000U)
 800344c:	693b      	ldr	r3, [r7, #16]
 800344e:	4a73      	ldr	r2, [pc, #460]	; (800361c <HAL_RCC_ClockConfig+0x244>)
 8003450:	4293      	cmp	r3, r2
 8003452:	d956      	bls.n	8003502 <HAL_RCC_ClockConfig+0x12a>
      {
        if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003454:	4b70      	ldr	r3, [pc, #448]	; (8003618 <HAL_RCC_ClockConfig+0x240>)
 8003456:	689b      	ldr	r3, [r3, #8]
 8003458:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800345c:	2b00      	cmp	r3, #0
 800345e:	d10a      	bne.n	8003476 <HAL_RCC_ClockConfig+0x9e>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003460:	4b6d      	ldr	r3, [pc, #436]	; (8003618 <HAL_RCC_ClockConfig+0x240>)
 8003462:	689b      	ldr	r3, [r3, #8]
 8003464:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003468:	4a6b      	ldr	r2, [pc, #428]	; (8003618 <HAL_RCC_ClockConfig+0x240>)
 800346a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800346e:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003470:	2380      	movs	r3, #128	; 0x80
 8003472:	617b      	str	r3, [r7, #20]
 8003474:	e045      	b.n	8003502 <HAL_RCC_ClockConfig+0x12a>
        }
        else if ((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f003 0302 	and.w	r3, r3, #2
 800347e:	2b00      	cmp	r3, #0
 8003480:	d03f      	beq.n	8003502 <HAL_RCC_ClockConfig+0x12a>
                 (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	689b      	ldr	r3, [r3, #8]
        else if ((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003486:	2b00      	cmp	r3, #0
 8003488:	d13b      	bne.n	8003502 <HAL_RCC_ClockConfig+0x12a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800348a:	4b63      	ldr	r3, [pc, #396]	; (8003618 <HAL_RCC_ClockConfig+0x240>)
 800348c:	689b      	ldr	r3, [r3, #8]
 800348e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003492:	4a61      	ldr	r2, [pc, #388]	; (8003618 <HAL_RCC_ClockConfig+0x240>)
 8003494:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003498:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800349a:	2380      	movs	r3, #128	; 0x80
 800349c:	617b      	str	r3, [r7, #20]
 800349e:	e030      	b.n	8003502 <HAL_RCC_ClockConfig+0x12a>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	2b02      	cmp	r3, #2
 80034a6:	d107      	bne.n	80034b8 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80034a8:	4b5b      	ldr	r3, [pc, #364]	; (8003618 <HAL_RCC_ClockConfig+0x240>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d115      	bne.n	80034e0 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80034b4:	2301      	movs	r3, #1
 80034b6:	e0a9      	b.n	800360c <HAL_RCC_ClockConfig+0x234>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	685b      	ldr	r3, [r3, #4]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d107      	bne.n	80034d0 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80034c0:	4b55      	ldr	r3, [pc, #340]	; (8003618 <HAL_RCC_ClockConfig+0x240>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f003 0302 	and.w	r3, r3, #2
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d109      	bne.n	80034e0 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80034cc:	2301      	movs	r3, #1
 80034ce:	e09d      	b.n	800360c <HAL_RCC_ClockConfig+0x234>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80034d0:	4b51      	ldr	r3, [pc, #324]	; (8003618 <HAL_RCC_ClockConfig+0x240>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d101      	bne.n	80034e0 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80034dc:	2301      	movs	r3, #1
 80034de:	e095      	b.n	800360c <HAL_RCC_ClockConfig+0x234>
        }
      }

      /* Transition state management when when going down from PLL used as */
      /* SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80034e0:	f000 f8a2 	bl	8003628 <HAL_RCC_GetSysClockFreq>
 80034e4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if (pllfreq > 80000000U)
 80034e6:	693b      	ldr	r3, [r7, #16]
 80034e8:	4a4c      	ldr	r2, [pc, #304]	; (800361c <HAL_RCC_ClockConfig+0x244>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d909      	bls.n	8003502 <HAL_RCC_ClockConfig+0x12a>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80034ee:	4b4a      	ldr	r3, [pc, #296]	; (8003618 <HAL_RCC_ClockConfig+0x240>)
 80034f0:	689b      	ldr	r3, [r3, #8]
 80034f2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80034f6:	4a48      	ldr	r2, [pc, #288]	; (8003618 <HAL_RCC_ClockConfig+0x240>)
 80034f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034fc:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80034fe:	2380      	movs	r3, #128	; 0x80
 8003500:	617b      	str	r3, [r7, #20]
      }
    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003502:	4b45      	ldr	r3, [pc, #276]	; (8003618 <HAL_RCC_ClockConfig+0x240>)
 8003504:	689b      	ldr	r3, [r3, #8]
 8003506:	f023 0203 	bic.w	r2, r3, #3
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	4942      	ldr	r1, [pc, #264]	; (8003618 <HAL_RCC_ClockConfig+0x240>)
 8003510:	4313      	orrs	r3, r2
 8003512:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003514:	f7fe f95e 	bl	80017d4 <HAL_GetTick>
 8003518:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800351a:	e013      	b.n	8003544 <HAL_RCC_ClockConfig+0x16c>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800351c:	f7fe f95a 	bl	80017d4 <HAL_GetTick>
 8003520:	4602      	mov	r2, r0
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	1ad3      	subs	r3, r2, r3
 8003526:	f241 3288 	movw	r2, #5000	; 0x1388
 800352a:	4293      	cmp	r3, r2
 800352c:	d90a      	bls.n	8003544 <HAL_RCC_ClockConfig+0x16c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800352e:	4b3a      	ldr	r3, [pc, #232]	; (8003618 <HAL_RCC_ClockConfig+0x240>)
 8003530:	689b      	ldr	r3, [r3, #8]
 8003532:	f003 020c 	and.w	r2, r3, #12
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	009b      	lsls	r3, r3, #2
 800353c:	429a      	cmp	r2, r3
 800353e:	d001      	beq.n	8003544 <HAL_RCC_ClockConfig+0x16c>
        {
          return HAL_TIMEOUT;
 8003540:	2303      	movs	r3, #3
 8003542:	e063      	b.n	800360c <HAL_RCC_ClockConfig+0x234>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003544:	4b34      	ldr	r3, [pc, #208]	; (8003618 <HAL_RCC_ClockConfig+0x240>)
 8003546:	689b      	ldr	r3, [r3, #8]
 8003548:	f003 020c 	and.w	r2, r3, #12
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	009b      	lsls	r3, r3, #2
 8003552:	429a      	cmp	r2, r3
 8003554:	d1e2      	bne.n	800351c <HAL_RCC_ClockConfig+0x144>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f003 0302 	and.w	r3, r3, #2
 800355e:	2b00      	cmp	r3, #0
 8003560:	d009      	beq.n	8003576 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003562:	4b2d      	ldr	r3, [pc, #180]	; (8003618 <HAL_RCC_ClockConfig+0x240>)
 8003564:	689b      	ldr	r3, [r3, #8]
 8003566:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	689b      	ldr	r3, [r3, #8]
 800356e:	492a      	ldr	r1, [pc, #168]	; (8003618 <HAL_RCC_ClockConfig+0x240>)
 8003570:	4313      	orrs	r3, r2
 8003572:	608b      	str	r3, [r1, #8]
 8003574:	e008      	b.n	8003588 <HAL_RCC_ClockConfig+0x1b0>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if (hpre == RCC_SYSCLK_DIV2)
 8003576:	697b      	ldr	r3, [r7, #20]
 8003578:	2b80      	cmp	r3, #128	; 0x80
 800357a:	d105      	bne.n	8003588 <HAL_RCC_ClockConfig+0x1b0>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800357c:	4b26      	ldr	r3, [pc, #152]	; (8003618 <HAL_RCC_ClockConfig+0x240>)
 800357e:	689b      	ldr	r3, [r3, #8]
 8003580:	4a25      	ldr	r2, [pc, #148]	; (8003618 <HAL_RCC_ClockConfig+0x240>)
 8003582:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003586:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003588:	4b22      	ldr	r3, [pc, #136]	; (8003614 <HAL_RCC_ClockConfig+0x23c>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f003 030f 	and.w	r3, r3, #15
 8003590:	683a      	ldr	r2, [r7, #0]
 8003592:	429a      	cmp	r2, r3
 8003594:	d210      	bcs.n	80035b8 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003596:	4b1f      	ldr	r3, [pc, #124]	; (8003614 <HAL_RCC_ClockConfig+0x23c>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f023 020f 	bic.w	r2, r3, #15
 800359e:	491d      	ldr	r1, [pc, #116]	; (8003614 <HAL_RCC_ClockConfig+0x23c>)
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	4313      	orrs	r3, r2
 80035a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80035a6:	4b1b      	ldr	r3, [pc, #108]	; (8003614 <HAL_RCC_ClockConfig+0x23c>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f003 030f 	and.w	r3, r3, #15
 80035ae:	683a      	ldr	r2, [r7, #0]
 80035b0:	429a      	cmp	r2, r3
 80035b2:	d001      	beq.n	80035b8 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 80035b4:	2301      	movs	r3, #1
 80035b6:	e029      	b.n	800360c <HAL_RCC_ClockConfig+0x234>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f003 0304 	and.w	r3, r3, #4
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d008      	beq.n	80035d6 <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80035c4:	4b14      	ldr	r3, [pc, #80]	; (8003618 <HAL_RCC_ClockConfig+0x240>)
 80035c6:	689b      	ldr	r3, [r3, #8]
 80035c8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	68db      	ldr	r3, [r3, #12]
 80035d0:	4911      	ldr	r1, [pc, #68]	; (8003618 <HAL_RCC_ClockConfig+0x240>)
 80035d2:	4313      	orrs	r3, r2
 80035d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f003 0308 	and.w	r3, r3, #8
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d009      	beq.n	80035f6 <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80035e2:	4b0d      	ldr	r3, [pc, #52]	; (8003618 <HAL_RCC_ClockConfig+0x240>)
 80035e4:	689b      	ldr	r3, [r3, #8]
 80035e6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	691b      	ldr	r3, [r3, #16]
 80035ee:	00db      	lsls	r3, r3, #3
 80035f0:	4909      	ldr	r1, [pc, #36]	; (8003618 <HAL_RCC_ClockConfig+0x240>)
 80035f2:	4313      	orrs	r3, r2
 80035f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80035f6:	f000 f8b5 	bl	8003764 <HAL_RCC_GetHCLKFreq>
 80035fa:	4603      	mov	r3, r0
 80035fc:	4a08      	ldr	r2, [pc, #32]	; (8003620 <HAL_RCC_ClockConfig+0x248>)
 80035fe:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003600:	4b08      	ldr	r3, [pc, #32]	; (8003624 <HAL_RCC_ClockConfig+0x24c>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4618      	mov	r0, r3
 8003606:	f7fe f895 	bl	8001734 <HAL_InitTick>
 800360a:	4603      	mov	r3, r0
}
 800360c:	4618      	mov	r0, r3
 800360e:	3718      	adds	r7, #24
 8003610:	46bd      	mov	sp, r7
 8003612:	bd80      	pop	{r7, pc}
 8003614:	40022000 	.word	0x40022000
 8003618:	40021000 	.word	0x40021000
 800361c:	04c4b400 	.word	0x04c4b400
 8003620:	20000000 	.word	0x20000000
 8003624:	20000004 	.word	0x20000004

08003628 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003628:	b480      	push	{r7}
 800362a:	b089      	sub	sp, #36	; 0x24
 800362c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800362e:	2300      	movs	r3, #0
 8003630:	61fb      	str	r3, [r7, #28]
 8003632:	2300      	movs	r3, #0
 8003634:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003636:	4b47      	ldr	r3, [pc, #284]	; (8003754 <HAL_RCC_GetSysClockFreq+0x12c>)
 8003638:	689b      	ldr	r3, [r3, #8]
 800363a:	f003 030c 	and.w	r3, r3, #12
 800363e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003640:	4b44      	ldr	r3, [pc, #272]	; (8003754 <HAL_RCC_GetSysClockFreq+0x12c>)
 8003642:	68db      	ldr	r3, [r3, #12]
 8003644:	f003 0303 	and.w	r3, r3, #3
 8003648:	60fb      	str	r3, [r7, #12]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800364a:	693b      	ldr	r3, [r7, #16]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d005      	beq.n	800365c <HAL_RCC_GetSysClockFreq+0x34>
 8003650:	693b      	ldr	r3, [r7, #16]
 8003652:	2b0c      	cmp	r3, #12
 8003654:	d121      	bne.n	800369a <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	2b01      	cmp	r3, #1
 800365a:	d11e      	bne.n	800369a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800365c:	4b3d      	ldr	r3, [pc, #244]	; (8003754 <HAL_RCC_GetSysClockFreq+0x12c>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f003 0308 	and.w	r3, r3, #8
 8003664:	2b00      	cmp	r3, #0
 8003666:	d107      	bne.n	8003678 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003668:	4b3a      	ldr	r3, [pc, #232]	; (8003754 <HAL_RCC_GetSysClockFreq+0x12c>)
 800366a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800366e:	0a1b      	lsrs	r3, r3, #8
 8003670:	f003 030f 	and.w	r3, r3, #15
 8003674:	61fb      	str	r3, [r7, #28]
 8003676:	e005      	b.n	8003684 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003678:	4b36      	ldr	r3, [pc, #216]	; (8003754 <HAL_RCC_GetSysClockFreq+0x12c>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	091b      	lsrs	r3, r3, #4
 800367e:	f003 030f 	and.w	r3, r3, #15
 8003682:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in Hz*/
    msirange = MSIRangeTable[msirange];
 8003684:	4a34      	ldr	r2, [pc, #208]	; (8003758 <HAL_RCC_GetSysClockFreq+0x130>)
 8003686:	69fb      	ldr	r3, [r7, #28]
 8003688:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800368c:	61fb      	str	r3, [r7, #28]

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800368e:	693b      	ldr	r3, [r7, #16]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d10d      	bne.n	80036b0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003694:	69fb      	ldr	r3, [r7, #28]
 8003696:	61bb      	str	r3, [r7, #24]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003698:	e00a      	b.n	80036b0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800369a:	693b      	ldr	r3, [r7, #16]
 800369c:	2b04      	cmp	r3, #4
 800369e:	d102      	bne.n	80036a6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80036a0:	4b2e      	ldr	r3, [pc, #184]	; (800375c <HAL_RCC_GetSysClockFreq+0x134>)
 80036a2:	61bb      	str	r3, [r7, #24]
 80036a4:	e004      	b.n	80036b0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80036a6:	693b      	ldr	r3, [r7, #16]
 80036a8:	2b08      	cmp	r3, #8
 80036aa:	d101      	bne.n	80036b0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80036ac:	4b2c      	ldr	r3, [pc, #176]	; (8003760 <HAL_RCC_GetSysClockFreq+0x138>)
 80036ae:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80036b0:	693b      	ldr	r3, [r7, #16]
 80036b2:	2b0c      	cmp	r3, #12
 80036b4:	d146      	bne.n	8003744 <HAL_RCC_GetSysClockFreq+0x11c>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80036b6:	4b27      	ldr	r3, [pc, #156]	; (8003754 <HAL_RCC_GetSysClockFreq+0x12c>)
 80036b8:	68db      	ldr	r3, [r3, #12]
 80036ba:	f003 0303 	and.w	r3, r3, #3
 80036be:	60bb      	str	r3, [r7, #8]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80036c0:	4b24      	ldr	r3, [pc, #144]	; (8003754 <HAL_RCC_GetSysClockFreq+0x12c>)
 80036c2:	68db      	ldr	r3, [r3, #12]
 80036c4:	091b      	lsrs	r3, r3, #4
 80036c6:	f003 030f 	and.w	r3, r3, #15
 80036ca:	3301      	adds	r3, #1
 80036cc:	607b      	str	r3, [r7, #4]

    switch (pllsource)
 80036ce:	68bb      	ldr	r3, [r7, #8]
 80036d0:	2b02      	cmp	r3, #2
 80036d2:	d003      	beq.n	80036dc <HAL_RCC_GetSysClockFreq+0xb4>
 80036d4:	68bb      	ldr	r3, [r7, #8]
 80036d6:	2b03      	cmp	r3, #3
 80036d8:	d00d      	beq.n	80036f6 <HAL_RCC_GetSysClockFreq+0xce>
 80036da:	e019      	b.n	8003710 <HAL_RCC_GetSysClockFreq+0xe8>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80036dc:	4a1f      	ldr	r2, [pc, #124]	; (800375c <HAL_RCC_GetSysClockFreq+0x134>)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80036e4:	4a1b      	ldr	r2, [pc, #108]	; (8003754 <HAL_RCC_GetSysClockFreq+0x12c>)
 80036e6:	68d2      	ldr	r2, [r2, #12]
 80036e8:	0a12      	lsrs	r2, r2, #8
 80036ea:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80036ee:	fb02 f303 	mul.w	r3, r2, r3
 80036f2:	617b      	str	r3, [r7, #20]
        break;
 80036f4:	e019      	b.n	800372a <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80036f6:	4a1a      	ldr	r2, [pc, #104]	; (8003760 <HAL_RCC_GetSysClockFreq+0x138>)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80036fe:	4a15      	ldr	r2, [pc, #84]	; (8003754 <HAL_RCC_GetSysClockFreq+0x12c>)
 8003700:	68d2      	ldr	r2, [r2, #12]
 8003702:	0a12      	lsrs	r2, r2, #8
 8003704:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003708:	fb02 f303 	mul.w	r3, r2, r3
 800370c:	617b      	str	r3, [r7, #20]
        break;
 800370e:	e00c      	b.n	800372a <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003710:	69fa      	ldr	r2, [r7, #28]
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	fbb2 f3f3 	udiv	r3, r2, r3
 8003718:	4a0e      	ldr	r2, [pc, #56]	; (8003754 <HAL_RCC_GetSysClockFreq+0x12c>)
 800371a:	68d2      	ldr	r2, [r2, #12]
 800371c:	0a12      	lsrs	r2, r2, #8
 800371e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003722:	fb02 f303 	mul.w	r3, r2, r3
 8003726:	617b      	str	r3, [r7, #20]
        break;
 8003728:	bf00      	nop
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 800372a:	4b0a      	ldr	r3, [pc, #40]	; (8003754 <HAL_RCC_GetSysClockFreq+0x12c>)
 800372c:	68db      	ldr	r3, [r3, #12]
 800372e:	0e5b      	lsrs	r3, r3, #25
 8003730:	f003 0303 	and.w	r3, r3, #3
 8003734:	3301      	adds	r3, #1
 8003736:	005b      	lsls	r3, r3, #1
 8003738:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800373a:	697a      	ldr	r2, [r7, #20]
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003742:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003744:	69bb      	ldr	r3, [r7, #24]
}
 8003746:	4618      	mov	r0, r3
 8003748:	3724      	adds	r7, #36	; 0x24
 800374a:	46bd      	mov	sp, r7
 800374c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003750:	4770      	bx	lr
 8003752:	bf00      	nop
 8003754:	40021000 	.word	0x40021000
 8003758:	080043f4 	.word	0x080043f4
 800375c:	00f42400 	.word	0x00f42400
 8003760:	007a1200 	.word	0x007a1200

08003764 <HAL_RCC_GetHCLKFreq>:
  * @note   Each time HCLK changes, this function must be called to update the
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	af00      	add	r7, sp, #0
  return (HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]);
 8003768:	f7ff ff5e 	bl	8003628 <HAL_RCC_GetSysClockFreq>
 800376c:	4602      	mov	r2, r0
 800376e:	4b05      	ldr	r3, [pc, #20]	; (8003784 <HAL_RCC_GetHCLKFreq+0x20>)
 8003770:	689b      	ldr	r3, [r3, #8]
 8003772:	091b      	lsrs	r3, r3, #4
 8003774:	f003 030f 	and.w	r3, r3, #15
 8003778:	4903      	ldr	r1, [pc, #12]	; (8003788 <HAL_RCC_GetHCLKFreq+0x24>)
 800377a:	5ccb      	ldrb	r3, [r1, r3]
 800377c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003780:	4618      	mov	r0, r3
 8003782:	bd80      	pop	{r7, pc}
 8003784:	40021000 	.word	0x40021000
 8003788:	080043e4 	.word	0x080043e4

0800378c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b086      	sub	sp, #24
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003794:	2300      	movs	r3, #0
 8003796:	617b      	str	r3, [r7, #20]
  uint32_t vos;

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003798:	4b2c      	ldr	r3, [pc, #176]	; (800384c <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 800379a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800379c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d003      	beq.n	80037ac <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80037a4:	f7ff f888 	bl	80028b8 <HAL_PWREx_GetVoltageRange>
 80037a8:	6138      	str	r0, [r7, #16]
 80037aa:	e014      	b.n	80037d6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80037ac:	4b27      	ldr	r3, [pc, #156]	; (800384c <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 80037ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037b0:	4a26      	ldr	r2, [pc, #152]	; (800384c <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 80037b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037b6:	6593      	str	r3, [r2, #88]	; 0x58
 80037b8:	4b24      	ldr	r3, [pc, #144]	; (800384c <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 80037ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037c0:	60fb      	str	r3, [r7, #12]
 80037c2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80037c4:	f7ff f878 	bl	80028b8 <HAL_PWREx_GetVoltageRange>
 80037c8:	6138      	str	r0, [r7, #16]
    __HAL_RCC_PWR_CLK_DISABLE();
 80037ca:	4b20      	ldr	r3, [pc, #128]	; (800384c <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 80037cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037ce:	4a1f      	ldr	r2, [pc, #124]	; (800384c <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 80037d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037d4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE0) || (vos == PWR_REGULATOR_VOLTAGE_SCALE1))
 80037d6:	693b      	ldr	r3, [r7, #16]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d003      	beq.n	80037e4 <RCC_SetFlashLatencyFromMSIRange+0x58>
 80037dc:	693b      	ldr	r3, [r7, #16]
 80037de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80037e2:	d10b      	bne.n	80037fc <RCC_SetFlashLatencyFromMSIRange+0x70>
  {
    if (msirange > RCC_MSIRANGE_8)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2b80      	cmp	r3, #128	; 0x80
 80037e8:	d919      	bls.n	800381e <RCC_SetFlashLatencyFromMSIRange+0x92>
    {
      /* MSI > 16Mhz */
      if (msirange > RCC_MSIRANGE_10)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2ba0      	cmp	r3, #160	; 0xa0
 80037ee:	d902      	bls.n	80037f6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80037f0:	2302      	movs	r3, #2
 80037f2:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 80037f4:	e013      	b.n	800381e <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80037f6:	2301      	movs	r3, #1
 80037f8:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 80037fa:	e010      	b.n	800381e <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
    if (msirange > RCC_MSIRANGE_8)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2b80      	cmp	r3, #128	; 0x80
 8003800:	d902      	bls.n	8003808 <RCC_SetFlashLatencyFromMSIRange+0x7c>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003802:	2303      	movs	r3, #3
 8003804:	617b      	str	r3, [r7, #20]
 8003806:	e00a      	b.n	800381e <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    else
    {
      if (msirange == RCC_MSIRANGE_8)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2b80      	cmp	r3, #128	; 0x80
 800380c:	d102      	bne.n	8003814 <RCC_SetFlashLatencyFromMSIRange+0x88>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800380e:	2302      	movs	r3, #2
 8003810:	617b      	str	r3, [r7, #20]
 8003812:	e004      	b.n	800381e <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else if (msirange == RCC_MSIRANGE_7)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2b70      	cmp	r3, #112	; 0x70
 8003818:	d101      	bne.n	800381e <RCC_SetFlashLatencyFromMSIRange+0x92>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800381a:	2301      	movs	r3, #1
 800381c:	617b      	str	r3, [r7, #20]
        /* MSI < 8Mhz default FLASH_LATENCY_0 0WS */
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800381e:	4b0c      	ldr	r3, [pc, #48]	; (8003850 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f023 020f 	bic.w	r2, r3, #15
 8003826:	490a      	ldr	r1, [pc, #40]	; (8003850 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8003828:	697b      	ldr	r3, [r7, #20]
 800382a:	4313      	orrs	r3, r2
 800382c:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 800382e:	4b08      	ldr	r3, [pc, #32]	; (8003850 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f003 030f 	and.w	r3, r3, #15
 8003836:	697a      	ldr	r2, [r7, #20]
 8003838:	429a      	cmp	r2, r3
 800383a:	d001      	beq.n	8003840 <RCC_SetFlashLatencyFromMSIRange+0xb4>
  {
    return HAL_ERROR;
 800383c:	2301      	movs	r3, #1
 800383e:	e000      	b.n	8003842 <RCC_SetFlashLatencyFromMSIRange+0xb6>
  }

  return HAL_OK;
 8003840:	2300      	movs	r3, #0
}
 8003842:	4618      	mov	r0, r3
 8003844:	3718      	adds	r7, #24
 8003846:	46bd      	mov	sp, r7
 8003848:	bd80      	pop	{r7, pc}
 800384a:	bf00      	nop
 800384c:	40021000 	.word	0x40021000
 8003850:	40022000 	.word	0x40022000

08003854 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003854:	b480      	push	{r7}
 8003856:	b087      	sub	sp, #28
 8003858:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 800385a:	2300      	movs	r3, #0
 800385c:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;    /* no init needed */

  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 800385e:	4b36      	ldr	r3, [pc, #216]	; (8003938 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8003860:	68db      	ldr	r3, [r3, #12]
 8003862:	f003 0303 	and.w	r3, r3, #3
 8003866:	2b01      	cmp	r3, #1
 8003868:	d118      	bne.n	800389c <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800386a:	4b33      	ldr	r3, [pc, #204]	; (8003938 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f003 0308 	and.w	r3, r3, #8
 8003872:	2b00      	cmp	r3, #0
 8003874:	d107      	bne.n	8003886 <RCC_GetSysClockFreqFromPLLSource+0x32>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003876:	4b30      	ldr	r3, [pc, #192]	; (8003938 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8003878:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800387c:	0a1b      	lsrs	r3, r3, #8
 800387e:	f003 030f 	and.w	r3, r3, #15
 8003882:	617b      	str	r3, [r7, #20]
 8003884:	e005      	b.n	8003892 <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003886:	4b2c      	ldr	r3, [pc, #176]	; (8003938 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	091b      	lsrs	r3, r3, #4
 800388c:	f003 030f 	and.w	r3, r3, #15
 8003890:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in Hz*/
    msirange = MSIRangeTable[msirange];
 8003892:	4a2a      	ldr	r2, [pc, #168]	; (800393c <RCC_GetSysClockFreqFromPLLSource+0xe8>)
 8003894:	697b      	ldr	r3, [r7, #20]
 8003896:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800389a:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800389c:	4b26      	ldr	r3, [pc, #152]	; (8003938 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 800389e:	68db      	ldr	r3, [r3, #12]
 80038a0:	f003 0303 	and.w	r3, r3, #3
 80038a4:	60fb      	str	r3, [r7, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80038a6:	4b24      	ldr	r3, [pc, #144]	; (8003938 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 80038a8:	68db      	ldr	r3, [r3, #12]
 80038aa:	091b      	lsrs	r3, r3, #4
 80038ac:	f003 030f 	and.w	r3, r3, #15
 80038b0:	3301      	adds	r3, #1
 80038b2:	60bb      	str	r3, [r7, #8]

  switch (pllsource)
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	2b02      	cmp	r3, #2
 80038b8:	d003      	beq.n	80038c2 <RCC_GetSysClockFreqFromPLLSource+0x6e>
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	2b03      	cmp	r3, #3
 80038be:	d00d      	beq.n	80038dc <RCC_GetSysClockFreqFromPLLSource+0x88>
 80038c0:	e019      	b.n	80038f6 <RCC_GetSysClockFreqFromPLLSource+0xa2>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80038c2:	4a1f      	ldr	r2, [pc, #124]	; (8003940 <RCC_GetSysClockFreqFromPLLSource+0xec>)
 80038c4:	68bb      	ldr	r3, [r7, #8]
 80038c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80038ca:	4a1b      	ldr	r2, [pc, #108]	; (8003938 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 80038cc:	68d2      	ldr	r2, [r2, #12]
 80038ce:	0a12      	lsrs	r2, r2, #8
 80038d0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80038d4:	fb02 f303 	mul.w	r3, r2, r3
 80038d8:	613b      	str	r3, [r7, #16]
      break;
 80038da:	e019      	b.n	8003910 <RCC_GetSysClockFreqFromPLLSource+0xbc>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80038dc:	4a19      	ldr	r2, [pc, #100]	; (8003944 <RCC_GetSysClockFreqFromPLLSource+0xf0>)
 80038de:	68bb      	ldr	r3, [r7, #8]
 80038e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80038e4:	4a14      	ldr	r2, [pc, #80]	; (8003938 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 80038e6:	68d2      	ldr	r2, [r2, #12]
 80038e8:	0a12      	lsrs	r2, r2, #8
 80038ea:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80038ee:	fb02 f303 	mul.w	r3, r2, r3
 80038f2:	613b      	str	r3, [r7, #16]
      break;
 80038f4:	e00c      	b.n	8003910 <RCC_GetSysClockFreqFromPLLSource+0xbc>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80038f6:	697a      	ldr	r2, [r7, #20]
 80038f8:	68bb      	ldr	r3, [r7, #8]
 80038fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80038fe:	4a0e      	ldr	r2, [pc, #56]	; (8003938 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8003900:	68d2      	ldr	r2, [r2, #12]
 8003902:	0a12      	lsrs	r2, r2, #8
 8003904:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003908:	fb02 f303 	mul.w	r3, r2, r3
 800390c:	613b      	str	r3, [r7, #16]
      break;
 800390e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 8003910:	4b09      	ldr	r3, [pc, #36]	; (8003938 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8003912:	68db      	ldr	r3, [r3, #12]
 8003914:	0e5b      	lsrs	r3, r3, #25
 8003916:	f003 0303 	and.w	r3, r3, #3
 800391a:	3301      	adds	r3, #1
 800391c:	005b      	lsls	r3, r3, #1
 800391e:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8003920:	693a      	ldr	r2, [r7, #16]
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	fbb2 f3f3 	udiv	r3, r2, r3
 8003928:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 800392a:	683b      	ldr	r3, [r7, #0]
}
 800392c:	4618      	mov	r0, r3
 800392e:	371c      	adds	r7, #28
 8003930:	46bd      	mov	sp, r7
 8003932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003936:	4770      	bx	lr
 8003938:	40021000 	.word	0x40021000
 800393c:	080043f4 	.word	0x080043f4
 8003940:	00f42400 	.word	0x00f42400
 8003944:	007a1200 	.word	0x007a1200

08003948 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b088      	sub	sp, #32
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003950:	2300      	movs	r3, #0
 8003952:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003954:	2300      	movs	r3, #0
 8003956:	77bb      	strb	r3, [r7, #30]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003960:	2b00      	cmp	r3, #0
 8003962:	d040      	beq.n	80039e6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003968:	2b80      	cmp	r3, #128	; 0x80
 800396a:	d02a      	beq.n	80039c2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800396c:	2b80      	cmp	r3, #128	; 0x80
 800396e:	d825      	bhi.n	80039bc <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003970:	2b60      	cmp	r3, #96	; 0x60
 8003972:	d026      	beq.n	80039c2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003974:	2b60      	cmp	r3, #96	; 0x60
 8003976:	d821      	bhi.n	80039bc <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003978:	2b40      	cmp	r3, #64	; 0x40
 800397a:	d006      	beq.n	800398a <HAL_RCCEx_PeriphCLKConfig+0x42>
 800397c:	2b40      	cmp	r3, #64	; 0x40
 800397e:	d81d      	bhi.n	80039bc <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003980:	2b00      	cmp	r3, #0
 8003982:	d009      	beq.n	8003998 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8003984:	2b20      	cmp	r3, #32
 8003986:	d010      	beq.n	80039aa <HAL_RCCEx_PeriphCLKConfig+0x62>
 8003988:	e018      	b.n	80039bc <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800398a:	4b8f      	ldr	r3, [pc, #572]	; (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800398c:	68db      	ldr	r3, [r3, #12]
 800398e:	4a8e      	ldr	r2, [pc, #568]	; (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003990:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003994:	60d3      	str	r3, [r2, #12]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003996:	e015      	b.n	80039c4 <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	3304      	adds	r3, #4
 800399c:	2100      	movs	r1, #0
 800399e:	4618      	mov	r0, r3
 80039a0:	f000 fb56 	bl	8004050 <RCCEx_PLLSAI1_Config>
 80039a4:	4603      	mov	r3, r0
 80039a6:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 80039a8:	e00c      	b.n	80039c4 <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
        /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	3320      	adds	r3, #32
 80039ae:	2100      	movs	r1, #0
 80039b0:	4618      	mov	r0, r3
 80039b2:	f000 fc33 	bl	800421c <RCCEx_PLLSAI2_Config>
 80039b6:	4603      	mov	r3, r0
 80039b8:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 80039ba:	e003      	b.n	80039c4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80039bc:	2301      	movs	r3, #1
 80039be:	77fb      	strb	r3, [r7, #31]
        break;
 80039c0:	e000      	b.n	80039c4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
        break;
 80039c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80039c4:	7ffb      	ldrb	r3, [r7, #31]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d10b      	bne.n	80039e2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80039ca:	4b7f      	ldr	r3, [pc, #508]	; (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80039cc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80039d0:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80039d8:	497b      	ldr	r1, [pc, #492]	; (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80039da:	4313      	orrs	r3, r2
 80039dc:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80039e0:	e001      	b.n	80039e6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039e2:	7ffb      	ldrb	r3, [r7, #31]
 80039e4:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d047      	beq.n	8003a82 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch (PeriphClkInit->Sai2ClockSelection)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039fa:	d030      	beq.n	8003a5e <HAL_RCCEx_PeriphCLKConfig+0x116>
 80039fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a00:	d82a      	bhi.n	8003a58 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003a02:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003a06:	d02a      	beq.n	8003a5e <HAL_RCCEx_PeriphCLKConfig+0x116>
 8003a08:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003a0c:	d824      	bhi.n	8003a58 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003a0e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a12:	d008      	beq.n	8003a26 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8003a14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a18:	d81e      	bhi.n	8003a58 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d00a      	beq.n	8003a34 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8003a1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a22:	d010      	beq.n	8003a46 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003a24:	e018      	b.n	8003a58 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
      case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003a26:	4b68      	ldr	r3, [pc, #416]	; (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003a28:	68db      	ldr	r3, [r3, #12]
 8003a2a:	4a67      	ldr	r2, [pc, #412]	; (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003a2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a30:	60d3      	str	r3, [r2, #12]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8003a32:	e015      	b.n	8003a60 <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	3304      	adds	r3, #4
 8003a38:	2100      	movs	r1, #0
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	f000 fb08 	bl	8004050 <RCCEx_PLLSAI1_Config>
 8003a40:	4603      	mov	r3, r0
 8003a42:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8003a44:	e00c      	b.n	8003a60 <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
        /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	3320      	adds	r3, #32
 8003a4a:	2100      	movs	r1, #0
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	f000 fbe5 	bl	800421c <RCCEx_PLLSAI2_Config>
 8003a52:	4603      	mov	r3, r0
 8003a54:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8003a56:	e003      	b.n	8003a60 <HAL_RCCEx_PeriphCLKConfig+0x118>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a58:	2301      	movs	r3, #1
 8003a5a:	77fb      	strb	r3, [r7, #31]
        break;
 8003a5c:	e000      	b.n	8003a60 <HAL_RCCEx_PeriphCLKConfig+0x118>
        break;
 8003a5e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a60:	7ffb      	ldrb	r3, [r7, #31]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d10b      	bne.n	8003a7e <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003a66:	4b58      	ldr	r3, [pc, #352]	; (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003a68:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003a6c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a74:	4954      	ldr	r1, [pc, #336]	; (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003a76:	4313      	orrs	r3, r2
 8003a78:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8003a7c:	e001      	b.n	8003a82 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a7e:	7ffb      	ldrb	r3, [r7, #31]
 8003a80:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	f000 80ab 	beq.w	8003be6 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a90:	2300      	movs	r3, #0
 8003a92:	75fb      	strb	r3, [r7, #23]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a94:	4b4c      	ldr	r3, [pc, #304]	; (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003a96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d10d      	bne.n	8003abc <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003aa0:	4b49      	ldr	r3, [pc, #292]	; (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003aa2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003aa4:	4a48      	ldr	r2, [pc, #288]	; (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003aa6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003aaa:	6593      	str	r3, [r2, #88]	; 0x58
 8003aac:	4b46      	ldr	r3, [pc, #280]	; (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003aae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ab0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ab4:	60fb      	str	r3, [r7, #12]
 8003ab6:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003ab8:	2301      	movs	r3, #1
 8003aba:	75fb      	strb	r3, [r7, #23]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003abc:	4b43      	ldr	r3, [pc, #268]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4a42      	ldr	r2, [pc, #264]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8003ac2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ac6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003ac8:	f7fd fe84 	bl	80017d4 <HAL_GetTick>
 8003acc:	6138      	str	r0, [r7, #16]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003ace:	e00f      	b.n	8003af0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ad0:	f7fd fe80 	bl	80017d4 <HAL_GetTick>
 8003ad4:	4602      	mov	r2, r0
 8003ad6:	693b      	ldr	r3, [r7, #16]
 8003ad8:	1ad3      	subs	r3, r2, r3
 8003ada:	2b02      	cmp	r3, #2
 8003adc:	d908      	bls.n	8003af0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003ade:	4b3b      	ldr	r3, [pc, #236]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d109      	bne.n	8003afe <HAL_RCCEx_PeriphCLKConfig+0x1b6>
        {
          ret = HAL_TIMEOUT;
 8003aea:	2303      	movs	r3, #3
 8003aec:	77fb      	strb	r3, [r7, #31]
        }
        break;
 8003aee:	e006      	b.n	8003afe <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003af0:	4b36      	ldr	r3, [pc, #216]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d0e9      	beq.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x188>
 8003afc:	e000      	b.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
        break;
 8003afe:	bf00      	nop
      }
    }

    if (ret == HAL_OK)
 8003b00:	7ffb      	ldrb	r3, [r7, #31]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d164      	bne.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x288>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003b06:	4b30      	ldr	r3, [pc, #192]	; (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003b08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b0c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b10:	61bb      	str	r3, [r7, #24]

      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003b12:	69bb      	ldr	r3, [r7, #24]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d01f      	beq.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b1e:	69ba      	ldr	r2, [r7, #24]
 8003b20:	429a      	cmp	r2, r3
 8003b22:	d019      	beq.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x210>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003b24:	4b28      	ldr	r3, [pc, #160]	; (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003b26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b2a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b2e:	61bb      	str	r3, [r7, #24]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003b30:	4b25      	ldr	r3, [pc, #148]	; (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003b32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b36:	4a24      	ldr	r2, [pc, #144]	; (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003b38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b3c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003b40:	4b21      	ldr	r3, [pc, #132]	; (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003b42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b46:	4a20      	ldr	r2, [pc, #128]	; (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003b48:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b4c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003b50:	4a1d      	ldr	r2, [pc, #116]	; (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003b52:	69bb      	ldr	r3, [r7, #24]
 8003b54:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003b58:	69bb      	ldr	r3, [r7, #24]
 8003b5a:	f003 0301 	and.w	r3, r3, #1
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d01f      	beq.n	8003ba2 <HAL_RCCEx_PeriphCLKConfig+0x25a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b62:	f7fd fe37 	bl	80017d4 <HAL_GetTick>
 8003b66:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b68:	e012      	b.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b6a:	f7fd fe33 	bl	80017d4 <HAL_GetTick>
 8003b6e:	4602      	mov	r2, r0
 8003b70:	693b      	ldr	r3, [r7, #16]
 8003b72:	1ad3      	subs	r3, r2, r3
 8003b74:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d909      	bls.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0x248>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b7c:	4b12      	ldr	r3, [pc, #72]	; (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003b7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b82:	f003 0302 	and.w	r3, r3, #2
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d10a      	bne.n	8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x258>
            {
              ret = HAL_TIMEOUT;
 8003b8a:	2303      	movs	r3, #3
 8003b8c:	77fb      	strb	r3, [r7, #31]
            }
            break;
 8003b8e:	e007      	b.n	8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x258>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b90:	4b0d      	ldr	r3, [pc, #52]	; (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003b92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b96:	f003 0302 	and.w	r3, r3, #2
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d0e5      	beq.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0x222>
 8003b9e:	e000      	b.n	8003ba2 <HAL_RCCEx_PeriphCLKConfig+0x25a>
            break;
 8003ba0:	bf00      	nop
          }
        }
      }

      if (ret == HAL_OK)
 8003ba2:	7ffb      	ldrb	r3, [r7, #31]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d10c      	bne.n	8003bc2 <HAL_RCCEx_PeriphCLKConfig+0x27a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003ba8:	4b07      	ldr	r3, [pc, #28]	; (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003baa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bae:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bb8:	4903      	ldr	r1, [pc, #12]	; (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003bba:	4313      	orrs	r3, r2
 8003bbc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003bc0:	e008      	b.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003bc2:	7ffb      	ldrb	r3, [r7, #31]
 8003bc4:	77bb      	strb	r3, [r7, #30]
 8003bc6:	e005      	b.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x28c>
 8003bc8:	40021000 	.word	0x40021000
 8003bcc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bd0:	7ffb      	ldrb	r3, [r7, #31]
 8003bd2:	77bb      	strb	r3, [r7, #30]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003bd4:	7dfb      	ldrb	r3, [r7, #23]
 8003bd6:	2b01      	cmp	r3, #1
 8003bd8:	d105      	bne.n	8003be6 <HAL_RCCEx_PeriphCLKConfig+0x29e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003bda:	4baf      	ldr	r3, [pc, #700]	; (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8003bdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bde:	4aae      	ldr	r2, [pc, #696]	; (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8003be0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003be4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f003 0301 	and.w	r3, r3, #1
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d00a      	beq.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003bf2:	4ba9      	ldr	r3, [pc, #676]	; (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8003bf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bf8:	f023 0203 	bic.w	r2, r3, #3
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c00:	49a5      	ldr	r1, [pc, #660]	; (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8003c02:	4313      	orrs	r3, r2
 8003c04:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f003 0302 	and.w	r3, r3, #2
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d00a      	beq.n	8003c2a <HAL_RCCEx_PeriphCLKConfig+0x2e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003c14:	4ba0      	ldr	r3, [pc, #640]	; (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8003c16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c1a:	f023 020c 	bic.w	r2, r3, #12
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c22:	499d      	ldr	r1, [pc, #628]	; (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8003c24:	4313      	orrs	r3, r2
 8003c26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f003 0304 	and.w	r3, r3, #4
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d00a      	beq.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0x304>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003c36:	4b98      	ldr	r3, [pc, #608]	; (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8003c38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c3c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c44:	4994      	ldr	r1, [pc, #592]	; (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8003c46:	4313      	orrs	r3, r2
 8003c48:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f003 0308 	and.w	r3, r3, #8
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d00a      	beq.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0x326>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003c58:	4b8f      	ldr	r3, [pc, #572]	; (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8003c5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c5e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c66:	498c      	ldr	r1, [pc, #560]	; (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8003c68:	4313      	orrs	r3, r2
 8003c6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f003 0310 	and.w	r3, r3, #16
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d00a      	beq.n	8003c90 <HAL_RCCEx_PeriphCLKConfig+0x348>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003c7a:	4b87      	ldr	r3, [pc, #540]	; (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8003c7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c80:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c88:	4983      	ldr	r1, [pc, #524]	; (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8003c8a:	4313      	orrs	r3, r2
 8003c8c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f003 0320 	and.w	r3, r3, #32
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d00a      	beq.n	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003c9c:	4b7e      	ldr	r3, [pc, #504]	; (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8003c9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ca2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003caa:	497b      	ldr	r1, [pc, #492]	; (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8003cac:	4313      	orrs	r3, r2
 8003cae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d00a      	beq.n	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x38c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003cbe:	4b76      	ldr	r3, [pc, #472]	; (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8003cc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cc4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ccc:	4972      	ldr	r1, [pc, #456]	; (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8003cce:	4313      	orrs	r3, r2
 8003cd0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d00a      	beq.n	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003ce0:	4b6d      	ldr	r3, [pc, #436]	; (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8003ce2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ce6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003cee:	496a      	ldr	r1, [pc, #424]	; (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8003cf0:	4313      	orrs	r3, r2
 8003cf2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d00a      	beq.n	8003d18 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8003d02:	4b65      	ldr	r3, [pc, #404]	; (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8003d04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d08:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003d10:	4961      	ldr	r1, [pc, #388]	; (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8003d12:	4313      	orrs	r3, r2
 8003d14:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == (RCC_PERIPHCLK_FDCAN))
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d031      	beq.n	8003d88 <HAL_RCCEx_PeriphCLKConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLK(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN kernel clock source */
    switch (PeriphClkInit->FdcanClockSelection)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003d28:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003d2c:	d00e      	beq.n	8003d4c <HAL_RCCEx_PeriphCLKConfig+0x404>
 8003d2e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003d32:	d814      	bhi.n	8003d5e <HAL_RCCEx_PeriphCLKConfig+0x416>
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d015      	beq.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8003d38:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003d3c:	d10f      	bne.n	8003d5e <HAL_RCCEx_PeriphCLKConfig+0x416>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN kernel clock*/
        /* Enable PLL48M1CLK output clock generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003d3e:	4b56      	ldr	r3, [pc, #344]	; (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8003d40:	68db      	ldr	r3, [r3, #12]
 8003d42:	4a55      	ldr	r2, [pc, #340]	; (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8003d44:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003d48:	60d3      	str	r3, [r2, #12]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8003d4a:	e00c      	b.n	8003d66 <HAL_RCCEx_PeriphCLKConfig+0x41e>

      case RCC_FDCANCLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for FDCAN kernel clock*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	3304      	adds	r3, #4
 8003d50:	2100      	movs	r1, #0
 8003d52:	4618      	mov	r0, r3
 8003d54:	f000 f97c 	bl	8004050 <RCCEx_PLLSAI1_Config>
 8003d58:	4603      	mov	r3, r0
 8003d5a:	77fb      	strb	r3, [r7, #31]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8003d5c:	e003      	b.n	8003d66 <HAL_RCCEx_PeriphCLKConfig+0x41e>

      default:
        ret = HAL_ERROR;
 8003d5e:	2301      	movs	r3, #1
 8003d60:	77fb      	strb	r3, [r7, #31]
        break;
 8003d62:	e000      	b.n	8003d66 <HAL_RCCEx_PeriphCLKConfig+0x41e>
        break;
 8003d64:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d66:	7ffb      	ldrb	r3, [r7, #31]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d10b      	bne.n	8003d84 <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003d6c:	4b4a      	ldr	r3, [pc, #296]	; (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8003d6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d72:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003d7a:	4947      	ldr	r1, [pc, #284]	; (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8003d7c:	4313      	orrs	r3, r2
 8003d7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003d82:	e001      	b.n	8003d88 <HAL_RCCEx_PeriphCLKConfig+0x440>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d84:	7ffb      	ldrb	r3, [r7, #31]
 8003d86:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d00a      	beq.n	8003daa <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003d94:	4b40      	ldr	r3, [pc, #256]	; (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8003d96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d9a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003da2:	493d      	ldr	r1, [pc, #244]	; (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8003da4:	4313      	orrs	r3, r2
 8003da6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d00a      	beq.n	8003dcc <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003db6:	4b38      	ldr	r3, [pc, #224]	; (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8003db8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dbc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003dc4:	4934      	ldr	r1, [pc, #208]	; (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8003dc6:	4313      	orrs	r3, r2
 8003dc8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d00a      	beq.n	8003dee <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003dd8:	4b2f      	ldr	r3, [pc, #188]	; (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8003dda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dde:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003de6:	492c      	ldr	r1, [pc, #176]	; (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8003de8:	4313      	orrs	r3, r2
 8003dea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d00a      	beq.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003dfa:	4b27      	ldr	r3, [pc, #156]	; (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8003dfc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003e00:	f023 0203 	bic.w	r2, r3, #3
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e08:	4923      	ldr	r1, [pc, #140]	; (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8003e0a:	4313      	orrs	r3, r2
 8003e0c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d028      	beq.n	8003e6e <HAL_RCCEx_PeriphCLKConfig+0x526>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003e1c:	4b1e      	ldr	r3, [pc, #120]	; (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8003e1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e22:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e2a:	491b      	ldr	r1, [pc, #108]	; (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8003e2c:	4313      	orrs	r3, r2
 8003e2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e36:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003e3a:	d106      	bne.n	8003e4a <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e3c:	4b16      	ldr	r3, [pc, #88]	; (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8003e3e:	68db      	ldr	r3, [r3, #12]
 8003e40:	4a15      	ldr	r2, [pc, #84]	; (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8003e42:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003e46:	60d3      	str	r3, [r2, #12]
 8003e48:	e011      	b.n	8003e6e <HAL_RCCEx_PeriphCLKConfig+0x526>
    }
    else
    {
      if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e4e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003e52:	d10c      	bne.n	8003e6e <HAL_RCCEx_PeriphCLKConfig+0x526>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	3304      	adds	r3, #4
 8003e58:	2101      	movs	r1, #1
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	f000 f8f8 	bl	8004050 <RCCEx_PLLSAI1_Config>
 8003e60:	4603      	mov	r3, r0
 8003e62:	77fb      	strb	r3, [r7, #31]

        if (ret != HAL_OK)
 8003e64:	7ffb      	ldrb	r3, [r7, #31]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d001      	beq.n	8003e6e <HAL_RCCEx_PeriphCLKConfig+0x526>
        {
          /* set overall return value */
          status = ret;
 8003e6a:	7ffb      	ldrb	r3, [r7, #31]
 8003e6c:	77bb      	strb	r3, [r7, #30]
  }

#endif /* USB */

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d04d      	beq.n	8003f16 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003e7e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003e82:	d10b      	bne.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0x554>
 8003e84:	4b04      	ldr	r3, [pc, #16]	; (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8003e86:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003e8a:	4a03      	ldr	r2, [pc, #12]	; (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8003e8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003e90:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8003e94:	e015      	b.n	8003ec2 <HAL_RCCEx_PeriphCLKConfig+0x57a>
 8003e96:	bf00      	nop
 8003e98:	40021000 	.word	0x40021000
 8003e9c:	4b6b      	ldr	r3, [pc, #428]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003e9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ea2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003eaa:	4968      	ldr	r1, [pc, #416]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003eac:	4313      	orrs	r3, r2
 8003eae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003eb2:	4b66      	ldr	r3, [pc, #408]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003eb4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003eb8:	4a64      	ldr	r2, [pc, #400]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003eba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003ebe:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

    if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003ec6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003eca:	d10d      	bne.n	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	3304      	adds	r3, #4
 8003ed0:	2101      	movs	r1, #1
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	f000 f8bc 	bl	8004050 <RCCEx_PLLSAI1_Config>
 8003ed8:	4603      	mov	r3, r0
 8003eda:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8003edc:	7ffb      	ldrb	r3, [r7, #31]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d019      	beq.n	8003f16 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      {
        /* set overall return value */
        status = ret;
 8003ee2:	7ffb      	ldrb	r3, [r7, #31]
 8003ee4:	77bb      	strb	r3, [r7, #30]
 8003ee6:	e016      	b.n	8003f16 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      }
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003eec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003ef0:	d106      	bne.n	8003f00 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ef2:	4b56      	ldr	r3, [pc, #344]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003ef4:	68db      	ldr	r3, [r3, #12]
 8003ef6:	4a55      	ldr	r2, [pc, #340]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003ef8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003efc:	60d3      	str	r3, [r2, #12]
 8003efe:	e00a      	b.n	8003f16 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003f04:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003f08:	d105      	bne.n	8003f16 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    {
      /* Enable PLLSAI3CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003f0a:	4b50      	ldr	r3, [pc, #320]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003f0c:	68db      	ldr	r3, [r3, #12]
 8003f0e:	4a4f      	ldr	r2, [pc, #316]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003f10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f14:	60d3      	str	r3, [r2, #12]
      /* Nothing to do */
    }
  }

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d028      	beq.n	8003f74 <HAL_RCCEx_PeriphCLKConfig+0x62c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003f22:	4b4a      	ldr	r3, [pc, #296]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003f24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f28:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f30:	4946      	ldr	r1, [pc, #280]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003f32:	4313      	orrs	r3, r2
 8003f34:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f3c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003f40:	d106      	bne.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0x608>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f42:	4b42      	ldr	r3, [pc, #264]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003f44:	68db      	ldr	r3, [r3, #12]
 8003f46:	4a41      	ldr	r2, [pc, #260]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003f48:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003f4c:	60d3      	str	r3, [r2, #12]
 8003f4e:	e011      	b.n	8003f74 <HAL_RCCEx_PeriphCLKConfig+0x62c>
    }
    else if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f54:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003f58:	d10c      	bne.n	8003f74 <HAL_RCCEx_PeriphCLKConfig+0x62c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	3304      	adds	r3, #4
 8003f5e:	2101      	movs	r1, #1
 8003f60:	4618      	mov	r0, r3
 8003f62:	f000 f875 	bl	8004050 <RCCEx_PLLSAI1_Config>
 8003f66:	4603      	mov	r3, r0
 8003f68:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8003f6a:	7ffb      	ldrb	r3, [r7, #31]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d001      	beq.n	8003f74 <HAL_RCCEx_PeriphCLKConfig+0x62c>
      {
        /* set overall return value */
        status = ret;
 8003f70:	7ffb      	ldrb	r3, [r7, #31]
 8003f72:	77bb      	strb	r3, [r7, #30]
      /* Nothing to do */
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d01e      	beq.n	8003fbe <HAL_RCCEx_PeriphCLKConfig+0x676>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003f80:	4b32      	ldr	r3, [pc, #200]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003f82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f86:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f90:	492e      	ldr	r1, [pc, #184]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003f92:	4313      	orrs	r3, r2
 8003f94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f9e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003fa2:	d10c      	bne.n	8003fbe <HAL_RCCEx_PeriphCLKConfig+0x676>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	3304      	adds	r3, #4
 8003fa8:	2102      	movs	r1, #2
 8003faa:	4618      	mov	r0, r3
 8003fac:	f000 f850 	bl	8004050 <RCCEx_PLLSAI1_Config>
 8003fb0:	4603      	mov	r3, r0
 8003fb2:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8003fb4:	7ffb      	ldrb	r3, [r7, #31]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d001      	beq.n	8003fbe <HAL_RCCEx_PeriphCLKConfig+0x676>
      {
        /* set overall return value */
        status = ret;
 8003fba:	7ffb      	ldrb	r3, [r7, #31]
 8003fbc:	77bb      	strb	r3, [r7, #30]
      }
    }
  }

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d00b      	beq.n	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003fca:	4b20      	ldr	r3, [pc, #128]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003fcc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003fd0:	f023 0204 	bic.w	r2, r3, #4
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003fda:	491c      	ldr	r1, [pc, #112]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003fdc:	4313      	orrs	r3, r2
 8003fde:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d00b      	beq.n	8004006 <HAL_RCCEx_PeriphCLKConfig+0x6be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003fee:	4b17      	ldr	r3, [pc, #92]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003ff0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003ff4:	f023 0218 	bic.w	r2, r3, #24
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ffe:	4913      	ldr	r1, [pc, #76]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004000:	4313      	orrs	r3, r2
 8004002:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800400e:	2b00      	cmp	r3, #0
 8004010:	d017      	beq.n	8004042 <HAL_RCCEx_PeriphCLKConfig+0x6fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8004012:	4b0e      	ldr	r3, [pc, #56]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004014:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004018:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004022:	490a      	ldr	r1, [pc, #40]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004024:	4313      	orrs	r3, r2
 8004026:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if (PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004030:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004034:	d105      	bne.n	8004042 <HAL_RCCEx_PeriphCLKConfig+0x6fa>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004036:	4b05      	ldr	r3, [pc, #20]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004038:	68db      	ldr	r3, [r3, #12]
 800403a:	4a04      	ldr	r2, [pc, #16]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800403c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004040:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8004042:	7fbb      	ldrb	r3, [r7, #30]
}
 8004044:	4618      	mov	r0, r3
 8004046:	3720      	adds	r7, #32
 8004048:	46bd      	mov	sp, r7
 800404a:	bd80      	pop	{r7, pc}
 800404c:	40021000 	.word	0x40021000

08004050 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *pPllSai1, uint32_t Divider)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b084      	sub	sp, #16
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
 8004058:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800405a:	2300      	movs	r3, #0
 800405c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(pPllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(pPllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(pPllSai1->PLLSAI1ClockOut));

  /* Check PLLSAI1 clock source availability */
  switch (pPllSai1->PLLSAI1Source)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	2b03      	cmp	r3, #3
 8004064:	d018      	beq.n	8004098 <RCCEx_PLLSAI1_Config+0x48>
 8004066:	2b03      	cmp	r3, #3
 8004068:	d81f      	bhi.n	80040aa <RCCEx_PLLSAI1_Config+0x5a>
 800406a:	2b01      	cmp	r3, #1
 800406c:	d002      	beq.n	8004074 <RCCEx_PLLSAI1_Config+0x24>
 800406e:	2b02      	cmp	r3, #2
 8004070:	d009      	beq.n	8004086 <RCCEx_PLLSAI1_Config+0x36>
 8004072:	e01a      	b.n	80040aa <RCCEx_PLLSAI1_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004074:	4b65      	ldr	r3, [pc, #404]	; (800420c <RCCEx_PLLSAI1_Config+0x1bc>)
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f003 0302 	and.w	r3, r3, #2
 800407c:	2b00      	cmp	r3, #0
 800407e:	d117      	bne.n	80040b0 <RCCEx_PLLSAI1_Config+0x60>
      {
        status = HAL_ERROR;
 8004080:	2301      	movs	r3, #1
 8004082:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004084:	e014      	b.n	80040b0 <RCCEx_PLLSAI1_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004086:	4b61      	ldr	r3, [pc, #388]	; (800420c <RCCEx_PLLSAI1_Config+0x1bc>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800408e:	2b00      	cmp	r3, #0
 8004090:	d110      	bne.n	80040b4 <RCCEx_PLLSAI1_Config+0x64>
      {
        status = HAL_ERROR;
 8004092:	2301      	movs	r3, #1
 8004094:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004096:	e00d      	b.n	80040b4 <RCCEx_PLLSAI1_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 8004098:	4b5c      	ldr	r3, [pc, #368]	; (800420c <RCCEx_PLLSAI1_Config+0x1bc>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d109      	bne.n	80040b8 <RCCEx_PLLSAI1_Config+0x68>
      {
        status = HAL_ERROR;
 80040a4:	2301      	movs	r3, #1
 80040a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80040a8:	e006      	b.n	80040b8 <RCCEx_PLLSAI1_Config+0x68>
    default:
      status = HAL_ERROR;
 80040aa:	2301      	movs	r3, #1
 80040ac:	73fb      	strb	r3, [r7, #15]
      break;
 80040ae:	e004      	b.n	80040ba <RCCEx_PLLSAI1_Config+0x6a>
      break;
 80040b0:	bf00      	nop
 80040b2:	e002      	b.n	80040ba <RCCEx_PLLSAI1_Config+0x6a>
      break;
 80040b4:	bf00      	nop
 80040b6:	e000      	b.n	80040ba <RCCEx_PLLSAI1_Config+0x6a>
      break;
 80040b8:	bf00      	nop
  }

  if (status == HAL_OK)
 80040ba:	7bfb      	ldrb	r3, [r7, #15]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	f040 809f 	bne.w	8004200 <RCCEx_PLLSAI1_Config+0x1b0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80040c2:	4b52      	ldr	r3, [pc, #328]	; (800420c <RCCEx_PLLSAI1_Config+0x1bc>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	4a51      	ldr	r2, [pc, #324]	; (800420c <RCCEx_PLLSAI1_Config+0x1bc>)
 80040c8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80040cc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80040ce:	f7fd fb81 	bl	80017d4 <HAL_GetTick>
 80040d2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80040d4:	e00f      	b.n	80040f6 <RCCEx_PLLSAI1_Config+0xa6>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80040d6:	f7fd fb7d 	bl	80017d4 <HAL_GetTick>
 80040da:	4602      	mov	r2, r0
 80040dc:	68bb      	ldr	r3, [r7, #8]
 80040de:	1ad3      	subs	r3, r2, r3
 80040e0:	2b02      	cmp	r3, #2
 80040e2:	d908      	bls.n	80040f6 <RCCEx_PLLSAI1_Config+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80040e4:	4b49      	ldr	r3, [pc, #292]	; (800420c <RCCEx_PLLSAI1_Config+0x1bc>)
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d009      	beq.n	8004104 <RCCEx_PLLSAI1_Config+0xb4>
        {
          status = HAL_TIMEOUT;
 80040f0:	2303      	movs	r3, #3
 80040f2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80040f4:	e006      	b.n	8004104 <RCCEx_PLLSAI1_Config+0xb4>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80040f6:	4b45      	ldr	r3, [pc, #276]	; (800420c <RCCEx_PLLSAI1_Config+0x1bc>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d1e9      	bne.n	80040d6 <RCCEx_PLLSAI1_Config+0x86>
 8004102:	e000      	b.n	8004106 <RCCEx_PLLSAI1_Config+0xb6>
        break;
 8004104:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 8004106:	7bfb      	ldrb	r3, [r7, #15]
 8004108:	2b00      	cmp	r3, #0
 800410a:	d179      	bne.n	8004200 <RCCEx_PLLSAI1_Config+0x1b0>
    {
      if (Divider == DIVIDER_P_UPDATE)
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d116      	bne.n	8004140 <RCCEx_PLLSAI1_Config+0xf0>
      {
        assert_param(IS_RCC_PLLSAI1P_VALUE(pPllSai1->PLLSAI1P));

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004112:	4b3e      	ldr	r3, [pc, #248]	; (800420c <RCCEx_PLLSAI1_Config+0x1bc>)
 8004114:	691a      	ldr	r2, [r3, #16]
 8004116:	4b3e      	ldr	r3, [pc, #248]	; (8004210 <RCCEx_PLLSAI1_Config+0x1c0>)
 8004118:	4013      	ands	r3, r2
 800411a:	687a      	ldr	r2, [r7, #4]
 800411c:	6892      	ldr	r2, [r2, #8]
 800411e:	0211      	lsls	r1, r2, #8
 8004120:	687a      	ldr	r2, [r7, #4]
 8004122:	68d2      	ldr	r2, [r2, #12]
 8004124:	06d2      	lsls	r2, r2, #27
 8004126:	4311      	orrs	r1, r2
 8004128:	687a      	ldr	r2, [r7, #4]
 800412a:	6852      	ldr	r2, [r2, #4]
 800412c:	3a01      	subs	r2, #1
 800412e:	0112      	lsls	r2, r2, #4
 8004130:	4311      	orrs	r1, r2
 8004132:	687a      	ldr	r2, [r7, #4]
 8004134:	6812      	ldr	r2, [r2, #0]
 8004136:	430a      	orrs	r2, r1
 8004138:	4934      	ldr	r1, [pc, #208]	; (800420c <RCCEx_PLLSAI1_Config+0x1bc>)
 800413a:	4313      	orrs	r3, r2
 800413c:	610b      	str	r3, [r1, #16]
 800413e:	e033      	b.n	80041a8 <RCCEx_PLLSAI1_Config+0x158>
                   (pPllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (pPllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos) |
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }
      else if (Divider == DIVIDER_Q_UPDATE)
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	2b01      	cmp	r3, #1
 8004144:	d118      	bne.n	8004178 <RCCEx_PLLSAI1_Config+0x128>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(pPllSai1->PLLSAI1Q));

        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004146:	4b31      	ldr	r3, [pc, #196]	; (800420c <RCCEx_PLLSAI1_Config+0x1bc>)
 8004148:	691a      	ldr	r2, [r3, #16]
 800414a:	4b32      	ldr	r3, [pc, #200]	; (8004214 <RCCEx_PLLSAI1_Config+0x1c4>)
 800414c:	4013      	ands	r3, r2
 800414e:	687a      	ldr	r2, [r7, #4]
 8004150:	6892      	ldr	r2, [r2, #8]
 8004152:	0211      	lsls	r1, r2, #8
 8004154:	687a      	ldr	r2, [r7, #4]
 8004156:	6912      	ldr	r2, [r2, #16]
 8004158:	0852      	lsrs	r2, r2, #1
 800415a:	3a01      	subs	r2, #1
 800415c:	0552      	lsls	r2, r2, #21
 800415e:	4311      	orrs	r1, r2
 8004160:	687a      	ldr	r2, [r7, #4]
 8004162:	6852      	ldr	r2, [r2, #4]
 8004164:	3a01      	subs	r2, #1
 8004166:	0112      	lsls	r2, r2, #4
 8004168:	4311      	orrs	r1, r2
 800416a:	687a      	ldr	r2, [r7, #4]
 800416c:	6812      	ldr	r2, [r2, #0]
 800416e:	430a      	orrs	r2, r1
 8004170:	4926      	ldr	r1, [pc, #152]	; (800420c <RCCEx_PLLSAI1_Config+0x1bc>)
 8004172:	4313      	orrs	r3, r2
 8004174:	610b      	str	r3, [r1, #16]
 8004176:	e017      	b.n	80041a8 <RCCEx_PLLSAI1_Config+0x158>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(pPllSai1->PLLSAI1R));

        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004178:	4b24      	ldr	r3, [pc, #144]	; (800420c <RCCEx_PLLSAI1_Config+0x1bc>)
 800417a:	691a      	ldr	r2, [r3, #16]
 800417c:	4b26      	ldr	r3, [pc, #152]	; (8004218 <RCCEx_PLLSAI1_Config+0x1c8>)
 800417e:	4013      	ands	r3, r2
 8004180:	687a      	ldr	r2, [r7, #4]
 8004182:	6892      	ldr	r2, [r2, #8]
 8004184:	0211      	lsls	r1, r2, #8
 8004186:	687a      	ldr	r2, [r7, #4]
 8004188:	6952      	ldr	r2, [r2, #20]
 800418a:	0852      	lsrs	r2, r2, #1
 800418c:	3a01      	subs	r2, #1
 800418e:	0652      	lsls	r2, r2, #25
 8004190:	4311      	orrs	r1, r2
 8004192:	687a      	ldr	r2, [r7, #4]
 8004194:	6852      	ldr	r2, [r2, #4]
 8004196:	3a01      	subs	r2, #1
 8004198:	0112      	lsls	r2, r2, #4
 800419a:	4311      	orrs	r1, r2
 800419c:	687a      	ldr	r2, [r7, #4]
 800419e:	6812      	ldr	r2, [r2, #0]
 80041a0:	430a      	orrs	r2, r1
 80041a2:	491a      	ldr	r1, [pc, #104]	; (800420c <RCCEx_PLLSAI1_Config+0x1bc>)
 80041a4:	4313      	orrs	r3, r2
 80041a6:	610b      	str	r3, [r1, #16]
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80041a8:	4b18      	ldr	r3, [pc, #96]	; (800420c <RCCEx_PLLSAI1_Config+0x1bc>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	4a17      	ldr	r2, [pc, #92]	; (800420c <RCCEx_PLLSAI1_Config+0x1bc>)
 80041ae:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80041b2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041b4:	f7fd fb0e 	bl	80017d4 <HAL_GetTick>
 80041b8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80041ba:	e00f      	b.n	80041dc <RCCEx_PLLSAI1_Config+0x18c>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80041bc:	f7fd fb0a 	bl	80017d4 <HAL_GetTick>
 80041c0:	4602      	mov	r2, r0
 80041c2:	68bb      	ldr	r3, [r7, #8]
 80041c4:	1ad3      	subs	r3, r2, r3
 80041c6:	2b02      	cmp	r3, #2
 80041c8:	d908      	bls.n	80041dc <RCCEx_PLLSAI1_Config+0x18c>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80041ca:	4b10      	ldr	r3, [pc, #64]	; (800420c <RCCEx_PLLSAI1_Config+0x1bc>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d109      	bne.n	80041ea <RCCEx_PLLSAI1_Config+0x19a>
          {
            status = HAL_TIMEOUT;
 80041d6:	2303      	movs	r3, #3
 80041d8:	73fb      	strb	r3, [r7, #15]
          }
          break;
 80041da:	e006      	b.n	80041ea <RCCEx_PLLSAI1_Config+0x19a>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80041dc:	4b0b      	ldr	r3, [pc, #44]	; (800420c <RCCEx_PLLSAI1_Config+0x1bc>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d0e9      	beq.n	80041bc <RCCEx_PLLSAI1_Config+0x16c>
 80041e8:	e000      	b.n	80041ec <RCCEx_PLLSAI1_Config+0x19c>
          break;
 80041ea:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 80041ec:	7bfb      	ldrb	r3, [r7, #15]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d106      	bne.n	8004200 <RCCEx_PLLSAI1_Config+0x1b0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(pPllSai1->PLLSAI1ClockOut);
 80041f2:	4b06      	ldr	r3, [pc, #24]	; (800420c <RCCEx_PLLSAI1_Config+0x1bc>)
 80041f4:	691a      	ldr	r2, [r3, #16]
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	699b      	ldr	r3, [r3, #24]
 80041fa:	4904      	ldr	r1, [pc, #16]	; (800420c <RCCEx_PLLSAI1_Config+0x1bc>)
 80041fc:	4313      	orrs	r3, r2
 80041fe:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004200:	7bfb      	ldrb	r3, [r7, #15]
}
 8004202:	4618      	mov	r0, r3
 8004204:	3710      	adds	r7, #16
 8004206:	46bd      	mov	sp, r7
 8004208:	bd80      	pop	{r7, pc}
 800420a:	bf00      	nop
 800420c:	40021000 	.word	0x40021000
 8004210:	07ff800c 	.word	0x07ff800c
 8004214:	ff9f800c 	.word	0xff9f800c
 8004218:	f9ff800c 	.word	0xf9ff800c

0800421c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *pPllSai2, uint32_t Divider)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b084      	sub	sp, #16
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
 8004224:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004226:	2300      	movs	r3, #0
 8004228:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(pPllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(pPllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(pPllSai2->PLLSAI2ClockOut));

  /* Check PLLSAI2 clock source availability */
  switch (pPllSai2->PLLSAI2Source)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	2b03      	cmp	r3, #3
 8004230:	d018      	beq.n	8004264 <RCCEx_PLLSAI2_Config+0x48>
 8004232:	2b03      	cmp	r3, #3
 8004234:	d81f      	bhi.n	8004276 <RCCEx_PLLSAI2_Config+0x5a>
 8004236:	2b01      	cmp	r3, #1
 8004238:	d002      	beq.n	8004240 <RCCEx_PLLSAI2_Config+0x24>
 800423a:	2b02      	cmp	r3, #2
 800423c:	d009      	beq.n	8004252 <RCCEx_PLLSAI2_Config+0x36>
 800423e:	e01a      	b.n	8004276 <RCCEx_PLLSAI2_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004240:	4b4a      	ldr	r3, [pc, #296]	; (800436c <RCCEx_PLLSAI2_Config+0x150>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f003 0302 	and.w	r3, r3, #2
 8004248:	2b00      	cmp	r3, #0
 800424a:	d117      	bne.n	800427c <RCCEx_PLLSAI2_Config+0x60>
      {
        status = HAL_ERROR;
 800424c:	2301      	movs	r3, #1
 800424e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004250:	e014      	b.n	800427c <RCCEx_PLLSAI2_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004252:	4b46      	ldr	r3, [pc, #280]	; (800436c <RCCEx_PLLSAI2_Config+0x150>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800425a:	2b00      	cmp	r3, #0
 800425c:	d110      	bne.n	8004280 <RCCEx_PLLSAI2_Config+0x64>
      {
        status = HAL_ERROR;
 800425e:	2301      	movs	r3, #1
 8004260:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004262:	e00d      	b.n	8004280 <RCCEx_PLLSAI2_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 8004264:	4b41      	ldr	r3, [pc, #260]	; (800436c <RCCEx_PLLSAI2_Config+0x150>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800426c:	2b00      	cmp	r3, #0
 800426e:	d109      	bne.n	8004284 <RCCEx_PLLSAI2_Config+0x68>
      {
        status = HAL_ERROR;
 8004270:	2301      	movs	r3, #1
 8004272:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004274:	e006      	b.n	8004284 <RCCEx_PLLSAI2_Config+0x68>
    default:
      status = HAL_ERROR;
 8004276:	2301      	movs	r3, #1
 8004278:	73fb      	strb	r3, [r7, #15]
      break;
 800427a:	e004      	b.n	8004286 <RCCEx_PLLSAI2_Config+0x6a>
      break;
 800427c:	bf00      	nop
 800427e:	e002      	b.n	8004286 <RCCEx_PLLSAI2_Config+0x6a>
      break;
 8004280:	bf00      	nop
 8004282:	e000      	b.n	8004286 <RCCEx_PLLSAI2_Config+0x6a>
      break;
 8004284:	bf00      	nop
  }

  if (status == HAL_OK)
 8004286:	7bfb      	ldrb	r3, [r7, #15]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d169      	bne.n	8004360 <RCCEx_PLLSAI2_Config+0x144>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800428c:	4b37      	ldr	r3, [pc, #220]	; (800436c <RCCEx_PLLSAI2_Config+0x150>)
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	4a36      	ldr	r2, [pc, #216]	; (800436c <RCCEx_PLLSAI2_Config+0x150>)
 8004292:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004296:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004298:	f7fd fa9c 	bl	80017d4 <HAL_GetTick>
 800429c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800429e:	e00f      	b.n	80042c0 <RCCEx_PLLSAI2_Config+0xa4>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80042a0:	f7fd fa98 	bl	80017d4 <HAL_GetTick>
 80042a4:	4602      	mov	r2, r0
 80042a6:	68bb      	ldr	r3, [r7, #8]
 80042a8:	1ad3      	subs	r3, r2, r3
 80042aa:	2b02      	cmp	r3, #2
 80042ac:	d908      	bls.n	80042c0 <RCCEx_PLLSAI2_Config+0xa4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80042ae:	4b2f      	ldr	r3, [pc, #188]	; (800436c <RCCEx_PLLSAI2_Config+0x150>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d009      	beq.n	80042ce <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_TIMEOUT;
 80042ba:	2303      	movs	r3, #3
 80042bc:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80042be:	e006      	b.n	80042ce <RCCEx_PLLSAI2_Config+0xb2>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80042c0:	4b2a      	ldr	r3, [pc, #168]	; (800436c <RCCEx_PLLSAI2_Config+0x150>)
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d1e9      	bne.n	80042a0 <RCCEx_PLLSAI2_Config+0x84>
 80042cc:	e000      	b.n	80042d0 <RCCEx_PLLSAI2_Config+0xb4>
        break;
 80042ce:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 80042d0:	7bfb      	ldrb	r3, [r7, #15]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d144      	bne.n	8004360 <RCCEx_PLLSAI2_Config+0x144>
    {
      if (Divider == DIVIDER_P_UPDATE)
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d115      	bne.n	8004308 <RCCEx_PLLSAI2_Config+0xec>
      {
        assert_param(IS_RCC_PLLSAI2P_VALUE(pPllSai2->PLLSAI2P));

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80042dc:	4b23      	ldr	r3, [pc, #140]	; (800436c <RCCEx_PLLSAI2_Config+0x150>)
 80042de:	695a      	ldr	r2, [r3, #20]
 80042e0:	4b23      	ldr	r3, [pc, #140]	; (8004370 <RCCEx_PLLSAI2_Config+0x154>)
 80042e2:	4013      	ands	r3, r2
 80042e4:	687a      	ldr	r2, [r7, #4]
 80042e6:	6892      	ldr	r2, [r2, #8]
 80042e8:	0211      	lsls	r1, r2, #8
 80042ea:	687a      	ldr	r2, [r7, #4]
 80042ec:	68d2      	ldr	r2, [r2, #12]
 80042ee:	06d2      	lsls	r2, r2, #27
 80042f0:	4311      	orrs	r1, r2
 80042f2:	687a      	ldr	r2, [r7, #4]
 80042f4:	6852      	ldr	r2, [r2, #4]
 80042f6:	3a01      	subs	r2, #1
 80042f8:	0112      	lsls	r2, r2, #4
 80042fa:	4311      	orrs	r1, r2
 80042fc:	687a      	ldr	r2, [r7, #4]
 80042fe:	6812      	ldr	r2, [r2, #0]
 8004300:	430a      	orrs	r2, r1
 8004302:	491a      	ldr	r1, [pc, #104]	; (800436c <RCCEx_PLLSAI2_Config+0x150>)
 8004304:	4313      	orrs	r3, r2
 8004306:	614b      	str	r3, [r1, #20]
                   pPllSai2->PLLSAI2Source);

      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004308:	4b18      	ldr	r3, [pc, #96]	; (800436c <RCCEx_PLLSAI2_Config+0x150>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	4a17      	ldr	r2, [pc, #92]	; (800436c <RCCEx_PLLSAI2_Config+0x150>)
 800430e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004312:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004314:	f7fd fa5e 	bl	80017d4 <HAL_GetTick>
 8004318:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800431a:	e00f      	b.n	800433c <RCCEx_PLLSAI2_Config+0x120>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800431c:	f7fd fa5a 	bl	80017d4 <HAL_GetTick>
 8004320:	4602      	mov	r2, r0
 8004322:	68bb      	ldr	r3, [r7, #8]
 8004324:	1ad3      	subs	r3, r2, r3
 8004326:	2b02      	cmp	r3, #2
 8004328:	d908      	bls.n	800433c <RCCEx_PLLSAI2_Config+0x120>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800432a:	4b10      	ldr	r3, [pc, #64]	; (800436c <RCCEx_PLLSAI2_Config+0x150>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004332:	2b00      	cmp	r3, #0
 8004334:	d109      	bne.n	800434a <RCCEx_PLLSAI2_Config+0x12e>
          {
            status = HAL_TIMEOUT;
 8004336:	2303      	movs	r3, #3
 8004338:	73fb      	strb	r3, [r7, #15]
          }
          break;
 800433a:	e006      	b.n	800434a <RCCEx_PLLSAI2_Config+0x12e>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800433c:	4b0b      	ldr	r3, [pc, #44]	; (800436c <RCCEx_PLLSAI2_Config+0x150>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004344:	2b00      	cmp	r3, #0
 8004346:	d0e9      	beq.n	800431c <RCCEx_PLLSAI2_Config+0x100>
 8004348:	e000      	b.n	800434c <RCCEx_PLLSAI2_Config+0x130>
          break;
 800434a:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 800434c:	7bfb      	ldrb	r3, [r7, #15]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d106      	bne.n	8004360 <RCCEx_PLLSAI2_Config+0x144>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(pPllSai2->PLLSAI2ClockOut);
 8004352:	4b06      	ldr	r3, [pc, #24]	; (800436c <RCCEx_PLLSAI2_Config+0x150>)
 8004354:	695a      	ldr	r2, [r3, #20]
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	691b      	ldr	r3, [r3, #16]
 800435a:	4904      	ldr	r1, [pc, #16]	; (800436c <RCCEx_PLLSAI2_Config+0x150>)
 800435c:	4313      	orrs	r3, r2
 800435e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004360:	7bfb      	ldrb	r3, [r7, #15]
}
 8004362:	4618      	mov	r0, r3
 8004364:	3710      	adds	r7, #16
 8004366:	46bd      	mov	sp, r7
 8004368:	bd80      	pop	{r7, pc}
 800436a:	bf00      	nop
 800436c:	40021000 	.word	0x40021000
 8004370:	07ff800c 	.word	0x07ff800c

08004374 <__libc_init_array>:
 8004374:	b570      	push	{r4, r5, r6, lr}
 8004376:	4d0d      	ldr	r5, [pc, #52]	; (80043ac <__libc_init_array+0x38>)
 8004378:	2600      	movs	r6, #0
 800437a:	4c0d      	ldr	r4, [pc, #52]	; (80043b0 <__libc_init_array+0x3c>)
 800437c:	1b64      	subs	r4, r4, r5
 800437e:	10a4      	asrs	r4, r4, #2
 8004380:	42a6      	cmp	r6, r4
 8004382:	d109      	bne.n	8004398 <__libc_init_array+0x24>
 8004384:	4d0b      	ldr	r5, [pc, #44]	; (80043b4 <__libc_init_array+0x40>)
 8004386:	2600      	movs	r6, #0
 8004388:	4c0b      	ldr	r4, [pc, #44]	; (80043b8 <__libc_init_array+0x44>)
 800438a:	f000 f81f 	bl	80043cc <_init>
 800438e:	1b64      	subs	r4, r4, r5
 8004390:	10a4      	asrs	r4, r4, #2
 8004392:	42a6      	cmp	r6, r4
 8004394:	d105      	bne.n	80043a2 <__libc_init_array+0x2e>
 8004396:	bd70      	pop	{r4, r5, r6, pc}
 8004398:	f855 3b04 	ldr.w	r3, [r5], #4
 800439c:	3601      	adds	r6, #1
 800439e:	4798      	blx	r3
 80043a0:	e7ee      	b.n	8004380 <__libc_init_array+0xc>
 80043a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80043a6:	3601      	adds	r6, #1
 80043a8:	4798      	blx	r3
 80043aa:	e7f2      	b.n	8004392 <__libc_init_array+0x1e>
 80043ac:	08004434 	.word	0x08004434
 80043b0:	08004434 	.word	0x08004434
 80043b4:	08004434 	.word	0x08004434
 80043b8:	08004438 	.word	0x08004438

080043bc <memset>:
 80043bc:	4402      	add	r2, r0
 80043be:	4603      	mov	r3, r0
 80043c0:	4293      	cmp	r3, r2
 80043c2:	d100      	bne.n	80043c6 <memset+0xa>
 80043c4:	4770      	bx	lr
 80043c6:	f803 1b01 	strb.w	r1, [r3], #1
 80043ca:	e7f9      	b.n	80043c0 <memset+0x4>

080043cc <_init>:
 80043cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043ce:	bf00      	nop
 80043d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043d2:	bc08      	pop	{r3}
 80043d4:	469e      	mov	lr, r3
 80043d6:	4770      	bx	lr

080043d8 <_fini>:
 80043d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043da:	bf00      	nop
 80043dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043de:	bc08      	pop	{r3}
 80043e0:	469e      	mov	lr, r3
 80043e2:	4770      	bx	lr
